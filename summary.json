[
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/Vue3x组件渲染.md",
      "/home/zepang/WorkSpace/blog/posts/Vue3x组件渲染.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"应用初始化\">应用初始化</h1>\n<p>我们简单的创建一个Vue3x的应用：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn create vite-app leraning-vue3x</code></pre></div>\n<p>Vue会从一个根节点开始整个组件树的渲染，打开 <code>src/main.js</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createApp <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./App.vue'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'./index.css'</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Vue3x导出一个函数<code>createApp</code>来创建应用实例（<code>app</code>），这与Vue2x使用 <code>new</code> 关键字直接创建实例略微有所差别，不过两者最终都需要通过调用 <code>app.mount</code> 挂载到 <code>DOM</code> 节点。</p>\n<p>接下来，在<code>createApp(app)</code>之前打一个断点，然后启动运用，打开<code>chrome</code>浏览器和控制台，我们通过断点调试来分析一下该函数和<code>app</code>创建过程。</p>\n<h1 id=\"createapp函数\">createApp函数</h1>\n<p>ok，通过断点直接进入<code>createApp</code>内部，可以发现<code>createApp</code>大概做了下边两件事情</p>\n<ul>\n<li>\n<p>创建 app</p>\n</li>\n<li>\n<p>重写 app.mount 函数，并在内部调用原来的 mount 函数</p>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> createApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. 创建 app</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">ensureRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">injectNativeTagCheck</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 导出 app 的 mount 函数</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mount <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. 重写 mount 函数</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">mount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">containerOrSelector</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token function\">normalizeContainer</span><span class=\"token punctuation\">(</span>containerOrSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>container<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_component</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">render</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span> <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// clear content before mounting</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用原 app.mount</span>\n        <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v-cloak'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-v-app'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> proxy<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接下来，我们逐步分析一下具体的过程。</p>\n<h1 id=\"创建app\">创建app</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * render = <span class=\"token punctuation\">{</span> render, hydrate, createApp <span class=\"token punctuation\">}</span>\n */</span>\n<span class=\"token keyword\">const</span> render <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 我们使用的是vite创建的项目，createApp(App) 传入的App组件不仅是单文件导出的对象已经是经过vite转化过的对象，其内已经包含render函数</span>\n    <span class=\"token comment\">// 具体可以看 @vue/compiler-sfc 这个依赖 vue-loader同样用到了该依赖</span>\n    <span class=\"token function\">ensureRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ensureRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> renderer <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>renderer <span class=\"token operator\">=</span> <span class=\"token function\">createRenderer</span><span class=\"token punctuation\">(</span>rendererOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createRenderer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">baseCreateRenderer</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">baseCreateRenderer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options<span class=\"token punctuation\">,</span> createHydrationFns</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">path</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> parentComponent <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> parentSuspense <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> isSVG <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> optimized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">processText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">processCommentNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 组件渲染的核心逻辑</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> \n       <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>vnode <span class=\"token operator\">==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span><span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span> <span class=\"token operator\">||</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">flushPostFlushCbs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span> <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        render<span class=\"token punctuation\">,</span>\n        hydrate<span class=\"token punctuation\">,</span>\n        createApp<span class=\"token operator\">:</span> <span class=\"token function\">createAppAPI</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">,</span> hydrate<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>通过追踪代码，发现Vue导出的<code>createApp</code>函数内，创建<code>app</code>调用的<code>createApp</code>函数实际上调用的是<code>createAppAPI</code>返回的函数<code>createApp</code>。</p>\n<p>该函数清晰的描述了 <code>app</code> 这个对象的所有属性，下边我贴出了该函数的全部代码，并在重要的地方做了一些注释。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createAppContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        app<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        config<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            isNativeTag<span class=\"token operator\">:</span> <span class=\"token constant\">NO</span><span class=\"token punctuation\">,</span>\n            <span class=\"token dom variable\">performance</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            globalProperties<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            optionMergeStrategies<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            isCustomElement<span class=\"token operator\">:</span> <span class=\"token constant\">NO</span><span class=\"token punctuation\">,</span>\n            errorHandler<span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span>\n            warnHandler<span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局mixins</span>\n        mixins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局插件</span>\n        components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局指令</span>\n        directives<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局的provide</span>\n        provides<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAppAPI</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">render<span class=\"token punctuation\">,</span> hydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootComponent<span class=\"token punctuation\">,</span> rootProps <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>rootProps <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>rootProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">root props passed to app.mount() must be an object.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rootProps <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\">         * 1. 创建全局的上下文对象</span>\n<span class=\"token doc-comment comment\">         * 2. 在调用 app.use app.mixin app.component app.directive ... 等这些方法的时候分别会往全局上下文中存入一些属性</span>\n<span class=\"token doc-comment comment\">         * 3. 具体的内容可以查看下边的代码和 createAppContext 函数的返回对象</span>\n<span class=\"token doc-comment comment\">         */</span> \n        <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">createAppContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> installedPlugins <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">app</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            _uid<span class=\"token operator\">:</span> uid$<span class=\"token number\">1</span><span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>\n            _component<span class=\"token operator\">:</span> rootComponent<span class=\"token punctuation\">,</span>\n            _props<span class=\"token operator\">:</span> rootProps<span class=\"token punctuation\">,</span>\n            _container<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n            _context<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n            version<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">get</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">config</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">set</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">app.config cannot be replaced. Modify individual options instead.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局插件</span>\n            <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plugin<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>installedPlugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Plugin has already been applied to target app.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>plugin <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">.</span><span class=\"token property-access\">install</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    installedPlugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    plugin<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">install</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    installedPlugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">A plugin must either be a function or an object with an \"install\" </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">function.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局mixins</span>\n            <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mixin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>__VUE_OPTIONS_API__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">mixins</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        context<span class=\"token punctuation\">.</span><span class=\"token property-access\">mixins</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// global mixin with props/emits de-optimizes props/emits</span>\n                        <span class=\"token comment\">// normalization caching.</span>\n                        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">||</span> mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">emits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            context<span class=\"token punctuation\">.</span><span class=\"token property-access\">deopt</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mixin has already been applied to target app'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mixins are only available in builds supporting Options API'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局组件</span>\n            <span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">validateComponentName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">config</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">components</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">components</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Component \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" has already been registered in target app.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token property-access\">components</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> component<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局指令</span>\n            <span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> directive</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">validateDirectiveName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>directive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">directives</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">directives</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Directive \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" has already been registered in target app.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token property-access\">directives</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> directive<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootContainer<span class=\"token punctuation\">,</span> isHydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token function\">createVNode</span><span class=\"token punctuation\">(</span>rootComponent<span class=\"token punctuation\">,</span> rootProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// store app context on the root VNode.</span>\n                    <span class=\"token comment\">// this will be set on the root instance on initial mount.</span>\n                    vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">appContext</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// HMR root reload</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        context<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">reload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">cloneVNode</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isHydrate <span class=\"token operator\">&#x26;&#x26;</span> hydrate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_container</span> <span class=\"token operator\">=</span> rootContainer<span class=\"token punctuation\">;</span>\n                    rootContainer<span class=\"token punctuation\">.</span><span class=\"token property-access\">__vue_app__</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> __VUE_PROD_DEVTOOLS__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">devtoolsInitApp</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">return</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">component</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">proxy</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App has already been mounted.\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">If you want to remount the same app, move your app creation logic </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">into a factory function and create fresh app instances for each </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mount - e.g. \\`const createMyApp = () => createApp(App)\\`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_container</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> __VUE_PROD_DEVTOOLS__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">devtoolsUnmountApp</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cannot unmount an app that is not mounted.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局的provide</span>\n            <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> key <span class=\"token keyword\">in</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">provides</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App already provides property with key \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\". </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">It will be overwritten with the new value.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// TypeScript doesn't allow symbols as index type</span>\n                <span class=\"token comment\">// https://github.com/Microsoft/TypeScript/issues/24587</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token property-access\">provides</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 返回 app 对象</span>\n        <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<h1 id=\"重写-appmount\">重写 app.mount</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">normalizeContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Failed to mount app: mount target selector returned null.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> container<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> createApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// 导出 app 的 mount 函数</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mount <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. 重写 mount 函数</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">mount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">containerOrSelector</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 获取container，</span>\n        <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token function\">normalizeContainer</span><span class=\"token punctuation\">(</span>containerOrSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>container<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_component</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">render</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span> <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// clear content before mounting</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用原 app.mount</span>\n        <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v-cloak'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-v-app'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> proxy<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAppAPI</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">render<span class=\"token punctuation\">,</span> hydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootComponent<span class=\"token punctuation\">,</span> rootProps <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootContainer<span class=\"token punctuation\">,</span> isHydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 创建VNode</span>\n                <span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token function\">createVNode</span><span class=\"token punctuation\">(</span>rootComponent<span class=\"token punctuation\">,</span> rootProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// store app context on the root VNode.</span>\n                <span class=\"token comment\">// this will be set on the root instance on initial mount.</span>\n                vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">appContext</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// HMR root reload</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    context<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">reload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">cloneVNode</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isHydrate <span class=\"token operator\">&#x26;&#x26;</span> hydrate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_container</span> <span class=\"token operator\">=</span> rootContainer<span class=\"token punctuation\">;</span>\n                rootContainer<span class=\"token punctuation\">.</span><span class=\"token property-access\">__vue_app__</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> __VUE_PROD_DEVTOOLS__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">devtoolsInitApp</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">return</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">component</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">proxy</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App has already been mounted.\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">If you want to remount the same app, move your app creation logic </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">into a factory function and create fresh app instances for each </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mount - e.g. \\`const createMyApp = () => createApp(App)\\`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h1 id=\"创建vnode\">创建VNode</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> children <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> patchFlag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dynamicProps <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> isBlockNode <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>type <span class=\"token operator\">||</span> type <span class=\"token operator\">===</span> <span class=\"token constant\">NULL_DYNAMIC_COMPONENT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Invalid vnode type when creating vnode: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        type <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Comment</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isVNode</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// createVNode receiving an existing vnode. This happens in cases like</span>\n        <span class=\"token comment\">// &#x3C;component :is=\"vnode\"/></span>\n        <span class=\"token comment\">// #2078 make sure to merge refs during the clone instead of overwriting it</span>\n        <span class=\"token keyword\">const</span> cloned <span class=\"token operator\">=</span> <span class=\"token function\">cloneVNode</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* mergeRef: true */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">normalizeChildren</span><span class=\"token punctuation\">(</span>cloned<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> cloned<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// class component normalization.</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClassComponent</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span><span class=\"token property-access\">__vccOpts</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// class &#x26; style normalization.</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// for reactive or proxy objects, we need to clone it to enable mutation.</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token maybe-class-name\">InternalObjectKey</span> <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            props <span class=\"token operator\">=</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> klass<span class=\"token punctuation\">,</span> style <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>klass <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            props<span class=\"token punctuation\">.</span><span class=\"token property-access\">class</span> <span class=\"token operator\">=</span> <span class=\"token function\">normalizeClass</span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// reactive state objects need to be cloned since they are likely to be</span>\n            <span class=\"token comment\">// mutated</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                style <span class=\"token operator\">=</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            props<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span> <span class=\"token operator\">=</span> <span class=\"token function\">normalizeStyle</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// encode the vnode type information into a bitmap</span>\n    <span class=\"token keyword\">const</span> shapeFlag <span class=\"token operator\">=</span> <span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token comment\">/* ELEMENT */</span>\n        <span class=\"token operator\">:</span>  <span class=\"token function\">isSuspense</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token number\">128</span> <span class=\"token comment\">/* SUSPENSE */</span>\n            <span class=\"token operator\">:</span> <span class=\"token function\">isTeleport</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">?</span> <span class=\"token number\">64</span> <span class=\"token comment\">/* TELEPORT */</span>\n                <span class=\"token operator\">:</span> <span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token comment\">/* STATEFUL_COMPONENT */</span>\n                    <span class=\"token operator\">:</span> <span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token comment\">/* FUNCTIONAL_COMPONENT */</span>\n                        <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> shapeFlag <span class=\"token operator\">&#x26;</span> <span class=\"token number\">4</span> <span class=\"token comment\">/* STATEFUL_COMPONENT */</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        type <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Vue received a Component which was made a reactive object. This can </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">lead to unnecessary performance overhead, and should be avoided by </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">marking the component with \\`markRaw\\` or using \\`shallowRef\\` </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">instead of \\`ref\\`.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\nComponent that was made reactive: </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        __v_isVNode<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"__v_skip\"</span> <span class=\"token comment\">/* SKIP */</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">,</span>\n        key<span class=\"token operator\">:</span> props <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">normalizeKey</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        ref<span class=\"token operator\">:</span> props <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">normalizeRef</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        scopeId<span class=\"token operator\">:</span> currentScopeId<span class=\"token punctuation\">,</span>\n        children<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        component<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        suspense<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        ssContent<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        ssFallback<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        dirs<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        transition<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        el<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        anchor<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        target<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        targetAnchor<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        staticCount<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        shapeFlag<span class=\"token punctuation\">,</span>\n        patchFlag<span class=\"token punctuation\">,</span>\n        dynamicProps<span class=\"token punctuation\">,</span>\n        dynamicChildren<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        appContext<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// validate key</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span> <span class=\"token operator\">!==</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">VNode created with invalid key (NaN). VNode type:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">normalizeChildren</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// normalize suspense children</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span> shapeFlag <span class=\"token operator\">&#x26;</span> <span class=\"token number\">128</span> <span class=\"token comment\">/* SUSPENSE */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> fallback <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">normalizeSuspenseChildren</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">ssContent</span> <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n        vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">ssFallback</span> <span class=\"token operator\">=</span> fallback<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>shouldTrack$<span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&#x26;&#x26;</span>\n        <span class=\"token comment\">// avoid a block node from tracking itself</span>\n        <span class=\"token operator\">!</span>isBlockNode <span class=\"token operator\">&#x26;&#x26;</span>\n        <span class=\"token comment\">// has current parent block</span>\n        currentBlock <span class=\"token operator\">&#x26;&#x26;</span>\n        <span class=\"token comment\">// presence of a patch flag indicates this node needs patching on updates.</span>\n        <span class=\"token comment\">// component nodes also should always be patched, because even if the</span>\n        <span class=\"token comment\">// component doesn't need to update, it needs to persist the instance on to</span>\n        <span class=\"token comment\">// the next vnode so that it can be properly unmounted later.</span>\n        <span class=\"token punctuation\">(</span>patchFlag <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> shapeFlag <span class=\"token operator\">&#x26;</span> <span class=\"token number\">6</span> <span class=\"token comment\">/* COMPONENT */</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span>\n        <span class=\"token comment\">// the EVENTS flag is only for hydration and if it is the only flag, the</span>\n        <span class=\"token comment\">// vnode should not be considered dynamic due to handler caching.</span>\n        patchFlag <span class=\"token operator\">!==</span> <span class=\"token number\">32</span> <span class=\"token comment\">/* HYDRATE_EVENTS */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        currentBlock<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> vnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>VNode的结构</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    __v_isVNode<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"__v_skip\"</span> <span class=\"token comment\">/* SKIP */</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    key<span class=\"token operator\">:</span> props <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">normalizeKey</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    ref<span class=\"token operator\">:</span> props <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">normalizeRef</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    scopeId<span class=\"token operator\">:</span> currentScopeId<span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    suspense<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    ssContent<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    ssFallback<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    dirs<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    transition<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    el<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    anchor<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    target<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    targetAnchor<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    staticCount<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    shapeFlag<span class=\"token punctuation\">,</span>\n    patchFlag<span class=\"token punctuation\">,</span>\n    dynamicProps<span class=\"token punctuation\">,</span>\n    dynamicChildren<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    appContext<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2 id=\"sharpeflags\">SharpeFlags</h2>\n<p><code>https://github.com/vuejs/vue-next/blob/master/packages/shared/src/shapeFlags.ts</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> <span class=\"token maybe-class-name\">ShapeFlags</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// html 或 svg 标签</span>\n  <span class=\"token constant\">ELEMENT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 函数式组件</span>\n  <span class=\"token constant\">FUNCTIONAL_COMPONENT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 普通有状态组件</span>\n  <span class=\"token constant\">STATEFUL_COMPONENT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 子节点是纯文本</span>\n  <span class=\"token constant\">TEXT_CHILDREN</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 子节点是数组</span>\n  <span class=\"token constant\">ARRAY_CHILDREN</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 子节点是 slots</span>\n  <span class=\"token constant\">SLOTS_CHILDREN</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Portal</span>\n  <span class=\"token constant\">PORTAL</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Suspense</span>\n  <span class=\"token constant\">SUSPENSE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 需要被keepAlive的有状态组件</span>\n  <span class=\"token constant\">COMPONENT_SHOULD_KEEP_ALIVE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 已经被keepAlive的有状态组件</span>\n  <span class=\"token constant\">COMPONENT_KEPT_ALIVE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 有状态组件和函数式组件都是“组件”，用 COMPONENT 表示</span>\n  <span class=\"token constant\">COMPONENT</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">ShapeFlags</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STATEFUL_COMPONENT</span> <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">ShapeFlags</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FUNCTIONAL_COMPONENT</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n",
    "frontmatter": {
      "title": "Vue3x组件渲染",
      "date": "2020-11-05"
    },
    "toc": "<ul>\n<li>\n<p><a href=\"#%E5%BA%94%E7%94%A8%E5%88%9D%E5%A7%8B%E5%8C%96\">应用初始化</a></p>\n</li>\n<li>\n<p><a href=\"#createapp%E5%87%BD%E6%95%B0\">createApp函数</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%88%9B%E5%BB%BAapp\">创建app</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%87%8D%E5%86%99-appmount\">重写 app.mount</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%88%9B%E5%BB%BAvnode\">创建VNode</a></p>\n<ul>\n<li><a href=\"#sharpeflags\">SharpeFlags</a></li>\n</ul>\n</li>\n</ul>\n",
    "name": "Vue3x组件渲染",
    "id": 0,
    "next": {
      "name": "vite 原理解析(1)-vite命令做了什么"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/vite 原理解析(1)-vite命令做了什么.md",
      "/home/zepang/WorkSpace/blog/posts/vite 原理解析(1)-vite命令做了什么.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"环境准备\">环境准备</h1>\n<ul>\n<li>\n<p>VS Code</p>\n</li>\n<li>\n<p>Node.js</p>\n</li>\n<li>\n<p>Yarn</p>\n</li>\n<li>\n<p><a href=\"https://github.com/vitejs/vite\">vite: https://github.com/vitejs/vite</a></p>\n</li>\n</ul>\n<h1 id=\"什么是-vite-\">什么是 vite ?</h1>\n<p>一个基于浏览器原生 ES imports 的开发服务器。</p>\n<p>在项目开发模式下，vite 会根据浏览器解析 <code>import</code> 的请求，在服务端完成编译返回代码。</p>\n<p>vite 拥有很多的特性，本文仅通过对其在 <code>development</code> 模式下相关代码进行分析和探究一些原理。</p>\n<h1 id=\"从-vite-命令开始\">从 vite 命令开始</h1>\n<p>快速创建一个vite项目：</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> create vite-app <span class=\"token operator\">&#x3C;</span>project-name<span class=\"token operator\">></span>\n</code></pre></div>\n<p>，打开 VS Code，找到项目 <code>node_modules/vite</code>（发现vite打包后的代码大部分可阅读性良好，觉得不习惯的可以使用 <code>npm link</code> 直接查看 vite 的源码），通过查看其<code>package.json</code>文件的配置，找到入口文件，通过快速的阅读，可以定位到 <code>vite</code> 命令的入口的代码如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// node_modules/vite/dist/node/cli.js</span>\ncli\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[root]'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// default command</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">alias</span><span class=\"token punctuation\">(</span><span class=\"token string\">'serve'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--port &#x3C;port>'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[number]  port to listen to</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--force'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[boolean]  force the optimizer to ignore the cache and re-bundle</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--https'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[boolean]  start the server with TLS and HTTP/2 enabled</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--open'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[boolean]  open browser on server start</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">action</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> argv</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        argv<span class=\"token punctuation\">.</span><span class=\"token property-access\">root</span> <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">resolveOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> argv<span class=\"token punctuation\">,</span> defaultMode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">runServe</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>通过一些字面理解，运行 <code>vite</code> 命令主要会做两件事：</p>\n<ul>\n<li>\n<p>获取配置</p>\n</li>\n<li>\n<p>启动服务</p>\n</li>\n</ul>\n<p>在获取配置之前的位置打一个断点，打开 VS Code 的调试终端，运行：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm run dev</code></pre></div>\n<h1 id=\"vite-获取配置过程分析\">vite 获取配置过程分析</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">resolveConfig</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mode<span class=\"token punctuation\">,</span> configPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> cwd <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> resolvedPath<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> isTS <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>configPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 获取用户自定义的配置文件路径</span>\n        resolvedPath <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>cwd<span class=\"token punctuation\">,</span> configPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 用户未配置 resolvedPath 的情况下，定位跟目录是否有 'vite.config.js'</span>\n        <span class=\"token keyword\">const</span> jsConfigPath <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>cwd<span class=\"token punctuation\">,</span> <span class=\"token string\">'vite.config.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">existsSync</span><span class=\"token punctuation\">(</span>jsConfigPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            resolvedPath <span class=\"token operator\">=</span> jsConfigPath<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 用户未配置 resolvedPath 的情况下，定位跟目录是否有 'vite.config.ts'</span>\n            <span class=\"token keyword\">const</span> tsConfigPath <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>cwd<span class=\"token punctuation\">,</span> <span class=\"token string\">'vite.config.ts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">existsSync</span><span class=\"token punctuation\">(</span>tsConfigPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                isTS <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                resolvedPath <span class=\"token operator\">=</span> tsConfigPath<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>resolvedPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 没有任何配置文件的情况下直接读取 env 文件的配置，并返回</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n            env<span class=\"token operator\">:</span> <span class=\"token function\">loadEnv</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">,</span> cwd<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> userConfig<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isTS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 获取 vite.config.js 的配置</span>\n                userConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>resolvedPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>userConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 获取 vit.config.ts的配置</span>\n        <span class=\"token punctuation\">}</span>\n        \n        config<span class=\"token punctuation\">.</span><span class=\"token property-access\">__path</span> <span class=\"token operator\">=</span> resolvedPath<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> config<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>配置文件的获取没有什么好说的，关键的注释我都写在上边了</p>\n<h1 id=\"vite-启动服务过程分析\">vite 启动服务过程分析</h1>\n<p><code>node_modules/vite/dist/node/server/index.js</code>中暴露了一个 <code>createServer</code> 用来创建服务实例，代码如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> root <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> configureServer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> alias <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> transforms <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vueCustomBlockTransforms <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> optimizeDeps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> enableEsbuild <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> assetsInclude <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">koa_1<span class=\"token punctuation\">.</span>default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">resolveServer</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> watcher <span class=\"token operator\">=</span> chokidar_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">watch</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        ignored<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'**/node_modules/**'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'**/.git/**'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// #610</span>\n        awaitWriteFinish<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            stabilityThreshold<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n            pollInterval<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> resolver <span class=\"token operator\">=</span> resolver_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createResolver</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> resolvers<span class=\"token punctuation\">,</span> alias<span class=\"token punctuation\">,</span> assetsInclude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">,</span>\n        app<span class=\"token punctuation\">,</span>\n        server<span class=\"token punctuation\">,</span>\n        watcher<span class=\"token punctuation\">,</span>\n        resolver<span class=\"token punctuation\">,</span>\n        config<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// port is exposed on the context for hmr client connection</span>\n        <span class=\"token comment\">// in case the files are served under a different port</span>\n        port<span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">port</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// attach server context to koa context</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">read</span> <span class=\"token operator\">=</span> utils_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cachedRead</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// cors</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token property-access\">cors</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@koa/cors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">cors</span> <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">cors</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> resolvedPlugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// 配置各种插件</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    resolvedPlugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> m <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> listen <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token property-access\">listen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">port<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>optimizeDeps<span class=\"token punctuation\">.</span><span class=\"token property-access\">auto</span> <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../optimizer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">optimizeDeps</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token property-access\">port</span> <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">port</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> server<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>通过代码分析，<code>createServer</code> 函数大概做了一下几件事：</p>\n<ul>\n<li>\n<p>为了获得使用中间件的能力，创建 koa的 实例</p>\n</li>\n<li>\n<p>使用 <code>chokidar</code> 创建一个 <code>watcher</code></p>\n</li>\n<li>\n<p>将 <code>root, app, server, watcher, resolver, config, port</code> 挂载到 koa 上下文对象</p>\n</li>\n<li>\n<p>配置和挂载各种vite服务插件</p>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvedPlugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 生成sourceMap插件</span>\n    sourceMapPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 重写模块中import的导入</span>\n    moduleRewritePlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 重写html中script的内容</span>\n    htmlRewritePlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 用户定义的插件</span>\n    <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">toArray</span><span class=\"token punctuation\">(</span>configureServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// /vite/env 返回环境变量插件</span>\n    envPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 获取模块内容插件</span>\n    moduleResolvePlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 代理插件</span>\n    proxyPlugin<span class=\"token punctuation\">,</span>\n    clientPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 热更新插件</span>\n    hmrPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>transforms<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">||</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>vueCustomBlockTransforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span>\n      <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token function\">createServerTransformPlugin</span><span class=\"token punctuation\">(</span>\n            transforms<span class=\"token punctuation\">,</span>\n            vueCustomBlockTransforms<span class=\"token punctuation\">,</span>\n            resolver\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// vue文件处理插件</span>\n    vuePlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// css 资源处理</span>\n    cssPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// esbuild处理资源插件</span>\n    enableEsbuild <span class=\"token operator\">?</span> esbuildPlugin <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// JSON 资源处理插件</span>\n    jsonPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 处理静态资源插件</span>\n    assetPathPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 处理 webWorker 插件</span>\n    webWorkerPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 处理 wasm 插件</span>\n    wasmPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 静态资源服务插件</span>\n    serveStaticPlugin\n  <span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>当服务运行起来之后，等待资源请求，然后针对不同的请求走对应的插件处理和返回内容就完了。</p>\n",
    "frontmatter": {
      "title": "通过源码分析 vite 的一些原理",
      "date": "2020-09-10"
    },
    "toc": "<ul>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">环境准备</a></li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-vite-\">什么是 vite ?</a></li>\n<li><a href=\"#%E4%BB%8E-vite-%E5%91%BD%E4%BB%A4%E5%BC%80%E5%A7%8B\">从 vite 命令开始</a></li>\n<li><a href=\"#vite-%E8%8E%B7%E5%8F%96%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90\">vite 获取配置过程分析</a></li>\n<li><a href=\"#vite-%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90\">vite 启动服务过程分析</a></li>\n</ul>\n",
    "name": "vite 原理解析(1)-vite命令做了什么",
    "id": 1,
    "prev": {
      "name": "Vue3x组件渲染"
    },
    "next": {
      "name": "一些关于Git的内容"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/一些关于Git的内容.md",
      "/home/zepang/WorkSpace/blog/posts/一些关于Git的内容.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"概述\">概述</h1>\n<p>这篇文章的目的是帮助大家了解并快速上手使用git，整理了一些我觉得需要了解的内容，篇幅不长，没有什么特别深入的内容，主要涉及以下三个方面的内容：</p>\n<ul>\n<li>\n<p>基本使用和三个分区概念</p>\n</li>\n<li>\n<p>git如何保存信息</p>\n</li>\n<li>\n<p>git的常用命令和使用场景</p>\n</li>\n</ul>\n<p>如果需要比较全面的了解git的内容可以查看官方提供的文档。</p>\n<h2 id=\"基本使用和三个分区概念\">基本使用和三个分区概念</h2>\n<p>对于经常使用git的开发，在一天的工作中，至少会重复若干次下边的流程</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">git init // 在当前目录下初始化一个git版本库，该命令会在当前目录下生成一个`.git`目录\n\n\n\n// 在当前目录中添加一些文件或者修改一些文件\n\n\n\ngit add . // 将当前工作区的所有内容进行暂存\n\n\n\ngit commit -m &#x26;#39;update&#x26;#39; // 将暂存的内容提交到版本库，并添加描述信息\n\n\n\ngit push origin branch-name // 将代码提交到远程的代码仓库</code></pre></div>\n<p>对于一些初学者想要不靠死记硬背记住上边的commit流程，你需要知道git的三个分区。</p>\n<p>git的本地数据管理大概可以分为三个分区：</p>\n<ul>\n<li>\n<p>工作区（Working Directory）</p>\n<p>通常就是指我们的文件目录或者项目目录</p>\n</li>\n<li>\n<p>暂存区（Stage）</p>\n<p>git在工作目录和版本库之间加设了一层索引（index），用 来暂存（stage）、收集或者修改</p>\n</li>\n<li>\n<p>版本库（History）</p>\n<p>用来存放每一次提交的快照</p>\n</li>\n</ul>\n<p>在工作中，为了协作开发或者代码代码管理，通常我们还会使用<code>git push</code>命令将版本库的数据提交到远程的仓库。</p>\n<p>以下图片来自网络</p>\n<p><img src=\"/images/git-three-part.jpg\" alt=\"三个分区\"></p>\n<p>如果还想要更加深入的了解<code>git add</code>，<code>git commit</code>都发生了什么，那么你需要知道git大概是如何存储信息的。</p>\n<h2 id=\"git如何存储信息\">git如何存储信息</h2>\n<p>git版本库你可以认为是一个简单的数据库，git主要维护两个主要的数据结构：对象库和索引。</p>\n<p>对象库包含你的原始数据文件和所 有日志消息、作者信息、日期，以及其他用来重建项目任意版本或分 支的信息。</p>\n<p>索引描述整个版本库的目录结构。</p>\n<p>我们还是结合一下实际的案例来说明吧。</p>\n<p>初始化一个Git的版本库，然后创建两个文件，分别在文件中添加一些内容。</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> init \n\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"console.log('app')\"</span> <span class=\"token operator\">></span> app.js\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"console.log('app')\"</span> <span class=\"token operator\">></span> index.js\n\n\ntree\n<span class=\"token builtin class-name\">.</span>\n├── app.js\n└── index.js\n</code></pre></div>\n<p>使用<code>git add .</code>命令将文件添加到暂存区，这个时候会创建索引。</p>\n<p>我们可以通过<code>git status</code>和<code>git ls-files</code>命令来查看索引的状态和目录：</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> status\nOn branch master\n\n\nNo commits yet\n\n\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git rm --cached &#x3C;file>...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n\n        new file:   app.js\n        new file:   index.js\n\n\n<span class=\"token function\">git</span> ls-files --stage\n<span class=\"token number\">100644</span> fe6b72dcf87d057d45129f5cf281c1cb6277a010 <span class=\"token number\">0</span>       app.js\n<span class=\"token number\">100644</span> 7f7cc294ff052479b84bd1c13a510a616588af8e <span class=\"token number\">0</span>       index.js\n</code></pre></div>\n<p>那么为什么需要通过<code>git add</code>命令建立索引？</p>\n<p>是因为当执行git commit命令的时候，Git会通过检查索引而不是工作目录来找到提交的内容</p>\n<p>如果你没有先使用<code>git add</code>添加索引，那么执行commit的时候你会收到下边的提示</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">nothing to commit, working tree clean</code></pre></div>\n<h2 id=\"objects目录\">objects目录</h2>\n<p>使用<code>git init</code>命令初始化版本库的时候，实际上会在工作目录中创建一个<code>.git</code>的文件目录</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">tree -L <span class=\"token number\">1</span> .git\n\n\n.git\n├── COMMIT_EDITMSG\n├── FETCH_HEAD\n├── HEAD\n├── ORIG_HEAD\n├── config\n├── description\n├── hooks\n├── index\n├── info\n├── logs\n├── objects\n├── packed-refs\n└── refs\n</code></pre></div>\n<p>上边运行的<code>git add .</code>命令会在<code>.git/objects</code>目录下创建两个目录文件，用于保存文件的信息，通过<code>tree</code>命令可以查看到对应的文件</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">tree .git/objects\n\n\n.git/objects\n├── 7f\n│   └── 7cc294ff052479b84bd1c13a510a616588af8e\n├── fe\n│   └── 6b72dcf87d057d45129f5cf281c1cb6277a010\n├── info\n└── pack\n</code></pre></div>\n<h2 id=\"git对象\">git对象</h2>\n<p>之前提到了对象库，这里说明一下git的对象的内容。</p>\n<p>git提供了<code>cat-file</code>命令查看对象的类型对象内容，</p>\n<p>git的对象库包含4种对象：</p>\n<ul>\n<li>块 blob</li>\n<li>目录树 tree</li>\n<li>提交 commit</li>\n<li>标签 tag</li>\n</ul>\n<p>每个对象都会有一个40位的十六进制数组成的可寻址的内容名称，这个值是向对象的内容应用SHA1得到的散列值，这个散列值唯一有效且完全由对象内容决定。</p>\n<p><code>git add</code>会在<code>.git/objects</code>目录下创建<code>blob</code>对象，就是上面提到的两个目录文件。</p>\n<p>使用<code>git cat-file</code>命令可以查看到对象的类型和内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> caf-file -t fe6b72dcf87d057d45129f5cf281c1cb6277a010\nblob\n<span class=\"token function\">git</span> caf-file -t 7f7cc294ff052479b84bd1c13a510a616588af8e\nblob\n\n\n<span class=\"token function\">git</span> caf-file -p fe6b72dcf87d057d45129f5cf281c1cb6277a010\nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">git</span> caf-file -p 7f7cc294ff052479b84bd1c13a510a616588af8e\nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>接下来，将暂存区的内容提交到版本库</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> commit -m <span class=\"token string\">'update'</span>\n\n\n<span class=\"token punctuation\">[</span>master <span class=\"token punctuation\">(</span>root-commit<span class=\"token punctuation\">)</span> 65fdbfb<span class=\"token punctuation\">]</span> update\n <span class=\"token number\">2</span> files changed, <span class=\"token number\">2</span> insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>\n create mode <span class=\"token number\">100644</span> app.js\n create mode <span class=\"token number\">100644</span> index.js\n\n\ntree .git/objects/\n\n\n.git/objects/\n├── <span class=\"token number\">65</span>\n│   └── fdbfbfd99f20a3d792fd2c5951324afde1b8f1\n├── 6d\n│   └── 5e4e2a71c52c661a19b8268384fd7093405f10\n├── 7f\n│   └── 7cc294ff052479b84bd1c13a510a616588af8e\n├── fe\n│   └── 6b72dcf87d057d45129f5cf281c1cb6277a010\n├── info\n└── pack\n</code></pre></div>\n<p><code>git commit</code>命令会在<code>.git/objects</code>目录下创建<code>tree</code>对象和<code>commit</code>对象</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> cat-file -t 6d5e4e2a71c52c661a19b8268384fd7093405f10\ntree\n\n\n<span class=\"token function\">git</span> cat-file -t 65fdbfbfd99f20a3d792fd2c5951324afde1b8f1\ncommit\n</code></pre></div>\n<h2 id=\"git对象关系\">git对象关系</h2>\n<p>我从《git版本管理》一书中截取了一张图，用来说明git对象的关系：</p>\n<p><img src=\"/images/git-object.png\" alt=\"\"></p>\n<p>下边是tree对象里边的内容：</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> cat-file -p 6d5e4e2a71c52c661a19b8268384fd7093405f10\n<span class=\"token number\">100644</span> blob fe6b72dcf87d057d45129f5cf281c1cb6277a010    app.js\n<span class=\"token number\">100644</span> blob 7f7cc294ff052479b84bd1c13a510a616588af8e    index.js\n</code></pre></div>\n<ul>\n<li>100644 是文件的读写权限属性，熟悉chmod的人应该比较熟悉</li>\n<li>blob fe6b72dcf87d057d45129f5cf281c1cb6277a010 blob的对象名</li>\n<li>app.js 与blob关联的文件名字</li>\n</ul>\n<p>然后再来看看commit的内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> cat-file -p 65fdbfbfd99f20a3d792fd2c5951324afde1b8f1\ntree 6d5e4e2a71c52c661a19b8268384fd7093405f10\nauthor zepang <span class=\"token operator\">&#x3C;</span>ummlq4@gmail.com<span class=\"token operator\">></span> <span class=\"token number\">1577961062</span> +0800\ncommitter zepang <span class=\"token operator\">&#x3C;</span>ummlq4@gmail.com<span class=\"token operator\">></span> <span class=\"token number\">1577961062</span> +0800\n\n\nupdate\n</code></pre></div>\n<ul>\n<li>tree 6d5e4e2a71c52c661a19b8268384fd7093405f10 标识关联文件的树对象的名称</li>\n<li>author zepang <a href=\"mailto:ummlq4@gmail.com\">ummlq4@gmail.com</a> 1577961062 +0800 作者的名字和创作的时间</li>\n<li>committer zepang <a href=\"mailto:ummlq4@gmail.com\">ummlq4@gmail.com</a> 1577961062 +0800 把新版本放到版本库的人（提交者）的名字和提交的时间</li>\n<li>update 对本次修订原因的说明（提交消息）</li>\n</ul>\n<p>当前HEAD指向的是master分支，可以直接查看<code>.git/refs/head/master</code>中保存的对象名称</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">cat</span> .git/refs/head/master\n\n\n65fdbfbfd99f20a3d792fd2c5951324afde1b8f1 // 是当前的commit对象\n</code></pre></div>\n<p>所以，案例中blob，tree，commit这几个对象的图示关系应为：</p>\n<p><img src=\"/images/git-object-relation-1.png\" alt=\"\"></p>\n<p>接下来我们修改一下app.js的内容，并作为一次提交，然后在看看<code>.git/objects</code>的内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> count-objects\n<span class=\"token number\">7</span> objects, <span class=\"token number\">0</span> kilobytes\n\n\ntree .git/objects/\n\n\n.git/objects/\n├── <span class=\"token number\">13</span>\n│   └── 7c5ad58c117d04cd09ba0adfcc0f15beb5f59d\n├── <span class=\"token number\">65</span>\n│   └── fdbfbfd99f20a3d792fd2c5951324afde1b8f1\n├── 6d\n│   └── 5e4e2a71c52c661a19b8268384fd7093405f10\n├── 7f\n│   └── 7cc294ff052479b84bd1c13a510a616588af8e\n├── ea\n│   └── 61ada05f2a3bcfda48230d8f511decf026b367\n├── f6\n│   └── 8afe902f9b946699ee61f7177461ef311b1134\n├── fe\n│   └── 6b72dcf87d057d45129f5cf281c1cb6277a010\n├── info\n└── pack\n</code></pre></div>\n<p>发现多出了3个对象。</p>\n<p>由之前的内容我们得知，commit对象里包含tree对象的信息，tree对象里边包含blob对象信息，所以这次直接从commit对象开始查看，找出多出的对象和对象之间的关系。</p>\n<p>通过<code>git log</code>命令拿到最新的commit 名称为<code>f68afe902f9b946699ee61f7177461ef311b1134</code>，值与之前不一样，所以是一个新的对象</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> cat-file -p f68afe902f9b946699ee61f7177461ef311b1134\ntree 137c5ad58c117d04cd09ba0adfcc0f15beb5f59d // 新对象\nparent 65fdbfbfd99f20a3d792fd2c5951324afde1b8f1\nauthor zepang <span class=\"token operator\">&#x3C;</span>ummlq4@gmail.com<span class=\"token operator\">></span> <span class=\"token number\">1578018373</span> +0800\ncommitter zepang <span class=\"token operator\">&#x3C;</span>ummlq4@gmail.com<span class=\"token operator\">></span> <span class=\"token number\">1578018373</span> +0800\n\n\nmodify\n\n\n<span class=\"token function\">git</span> cat-file -p 137c5ad58c117d04cd09ba0adfcc0f15beb5f59d\n<span class=\"token number\">100644</span> blob ea61ada05f2a3bcfda48230d8f511decf026b367    app.js // 新对象\n<span class=\"token number\">100644</span> blob 7f7cc294ff052479b84bd1c13a510a616588af8e    index.js // 之前的对象\n\n\n<span class=\"token function\">git</span> cat-file -p ea61ada05f2a3bcfda48230d8f511decf026b367 \nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'modify'</span><span class=\"token punctuation\">)</span> // 保存着新的内容\n<span class=\"token function\">git</span> cat-file -p 7f7cc294ff052479b84bd1c13a510a616588af8e \nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token function\">cat</span> .git/refs/head/master\n\n\nf68afe902f9b946699ee61f7177461ef311b1134 // master中保存的commit的对象信息也改变了\n</code></pre></div>\n<p>由此，我们做出新的关系图为：</p>\n<p><img src=\"/images/git-object-relation-2.png\" alt=\"\"></p>\n<p>之前我们提到关于对象的名称是一个由对象内容决定的SHA1散列值，当<code>app.js</code>中的内容修改之后，app.js对应的blob对象以及上层的tree对象和commit对象的引用对象都是根据内容新计算出的对象，只有index.js对应的blob对象还是之前的对象。</p>\n<p>所以，Git存储着每一个版本的对象副本，对象中保存着完整的文件副本。我们回退，切换或者修改版本内容实际上就是改变对象之间的引用关系。</p>\n<h1 id=\"git的常用命令和使用场景\">git的常用命令和使用场景</h1>\n<p>下边工作中可能会遇到的场景，涉及命令的具体用法需要自己去查看详细的说明文档：</p>\n<h3 id=\"基本的命令\">基本的命令</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">// 切换分支\n<span class=\"token function\">git</span> checkout <span class=\"token operator\">&#x3C;</span>branch<span class=\"token operator\">></span>\n// 切换新分支\n<span class=\"token function\">git</span> checkout -b <span class=\"token operator\">&#x3C;</span>new branch<span class=\"token operator\">></span>\n// 查看文件状态\n​git status\n// 暂存\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token operator\">&#x3C;</span>name<span class=\"token operator\">></span>\n// 提交\n<span class=\"token function\">git</span> commit -m <span class=\"token operator\">&#x3C;</span>message<span class=\"token operator\">></span>\n// 推送远程仓库\n<span class=\"token function\">git</span> push origin <span class=\"token operator\">&#x3C;</span>branch<span class=\"token operator\">></span>\n</code></pre></div>\n<h3 id=\"远程仓库相关\">远程仓库相关</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> remote --help\n</code></pre></div>\n<h3 id=\"回退代码\">回退代码</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> reset --help\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">需要注意的--hard --mixed --soft的区别：\n\n\n\n--hard：回退将会影响索引和工作区\n\n\n\n--mixed：这个是默认的参数，回退仅影响索引，也就是暂存区\n\n\n\n--soft：不影响索引和工作区，回退之后直接可以直接commit</code></pre></div>\n<h3 id=\"开发过程中需要切换分支修改其他内容\">开发过程中需要切换分支修改其他内容</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">// 将文件存到临时空间，之后再取出\n\n\n<span class=\"token function\">git</span> stash \n\n\n// 先提交一个commit，回来之后修改完在使用 --amend，会将当前的修改合并到上一个commit，并且还能修改描述信息\n\n\n<span class=\"token function\">git</span> commit --amend \n</code></pre></div>\n<h3 id=\"代码误操作需要找回，或者查看操作内容\">代码误操作需要找回，或者查看操作内容</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">// 可以查看所有的操作步骤\n<span class=\"token function\">git</span> reflog\n</code></pre></div>\n<p>​</p>\n<h3 id=\"不小心将大文件提交到了git中\">不小心将大文件提交到了git中</h3>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">// 使用 git rm 命令将其删除\n\ngit rm // 同时删除索引和工作区\ngit rm --cached // 仅删除索引</code></pre></div>\n<h3 id=\"当你想取另一个分支上的commit到当前分支\">当你想取另一个分支上的commit到当前分支</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">// 首先你得知道需要取的commit的名称，就是hash值，然后使用 <span class=\"token function\">git</span> cherry-pick 命令就能够将commit搬运过来，有可能会出现冲突\n\n\n<span class=\"token function\">git</span> cherry-pick <span class=\"token operator\">&#x3C;</span>commit<span class=\"token operator\">></span>\n</code></pre></div>\n<h3 id=\"多人协作的时候你会发现，当你使用使用git-branch--a-查看分支的时候，会出现很多远程已经删除的分支，如果你想要删除这些不需要展示分支名，可以使用下边的命令：\">多人协作的时候你会发现，当你使用使用git branch -a 查看分支的时候，会出现很多远程已经删除的分支，如果你想要删除这些不需要展示分支名，可以使用下边的命令：</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> remote prune origin \n</code></pre></div>\n<h3 id=\"git-diff-命令\">git diff 命令</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> <span class=\"token function\">diff</span>                工作区 vs 暂存区\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token function\">head</span>           工作区 vs 版本库\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> –cached        暂存区 vs 版本库\n</code></pre></div>\n<p>推荐使用git difftool，比git diff更好用的命令，最好用的还是直接安装编辑器的插件。</p>\n<h3 id=\"git-merge-和-git-rebase\">git merge 和 git rebase</h3>\n<p>使用前可以先了解一下两者的区别，git merge能够保存分支完整的历史记录，git rebase会将需要合并commit添加到目标分支，网上已经有很多类似的文章讲的比较详细，大家可以去搜索一下，具体使用哪个命令，根据团队的规范或者个人喜好来定。</p>\n",
    "frontmatter": {
      "title": "一些关于Git的内容",
      "date": "2019-01-10"
    },
    "toc": "<ul>\n<li>\n<p><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></p>\n<ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E4%B8%89%E4%B8%AA%E5%88%86%E5%8C%BA%E6%A6%82%E5%BF%B5\">基本使用和三个分区概念</a></li>\n<li><a href=\"#git%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E4%BF%A1%E6%81%AF\">git如何存储信息</a></li>\n<li><a href=\"#objects%E7%9B%AE%E5%BD%95\">objects目录</a></li>\n<li><a href=\"#git%E5%AF%B9%E8%B1%A1\">git对象</a></li>\n<li><a href=\"#git%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB\">git对象关系</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#git%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\">git的常用命令和使用场景</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%91%BD%E4%BB%A4\">基本的命令</a></li>\n<li><a href=\"#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9B%B8%E5%85%B3\">远程仓库相关</a></li>\n<li><a href=\"#%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81\">回退代码</a></li>\n<li><a href=\"#%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%9C%80%E8%A6%81%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF%E4%BF%AE%E6%94%B9%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9\">开发过程中需要切换分支修改其他内容</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E8%AF%AF%E6%93%8D%E4%BD%9C%E9%9C%80%E8%A6%81%E6%89%BE%E5%9B%9E%EF%BC%8C%E6%88%96%E8%80%85%E6%9F%A5%E7%9C%8B%E6%93%8D%E4%BD%9C%E5%86%85%E5%AE%B9\">代码误操作需要找回，或者查看操作内容</a></li>\n<li><a href=\"#%E4%B8%8D%E5%B0%8F%E5%BF%83%E5%B0%86%E5%A4%A7%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4%E5%88%B0%E4%BA%86git%E4%B8%AD\">不小心将大文件提交到了git中</a></li>\n<li><a href=\"#%E5%BD%93%E4%BD%A0%E6%83%B3%E5%8F%96%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E4%B8%8A%E7%9A%84commit%E5%88%B0%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF\">当你想取另一个分支上的commit到当前分支</a></li>\n<li><a href=\"#%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E7%9A%84%E6%97%B6%E5%80%99%E4%BD%A0%E4%BC%9A%E5%8F%91%E7%8E%B0%EF%BC%8C%E5%BD%93%E4%BD%A0%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8git-branch--a-%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%BE%88%E5%A4%9A%E8%BF%9C%E7%A8%8B%E5%B7%B2%E7%BB%8F%E5%88%A0%E9%99%A4%E7%9A%84%E5%88%86%E6%94%AF%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%83%B3%E8%A6%81%E5%88%A0%E9%99%A4%E8%BF%99%E4%BA%9B%E4%B8%8D%E9%9C%80%E8%A6%81%E5%B1%95%E7%A4%BA%E5%88%86%E6%94%AF%E5%90%8D%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%B8%8B%E8%BE%B9%E7%9A%84%E5%91%BD%E4%BB%A4%EF%BC%9A\">多人协作的时候你会发现，当你使用使用git branch -a 查看分支的时候，会出现很多远程已经删除的分支，如果你想要删除这些不需要展示分支名，可以使用下边的命令：</a></li>\n<li><a href=\"#git-diff-%E5%91%BD%E4%BB%A4\">git diff 命令</a></li>\n<li><a href=\"#git-merge-%E5%92%8C-git-rebase\">git merge 和 git rebase</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
    "name": "一些关于Git的内容",
    "id": 2,
    "prev": {
      "name": "vite 原理解析(1)-vite命令做了什么"
    },
    "next": {
      "name": "使用 Next.js SSG 和 Markdown 创建博客"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/使用 Next.js SSG 和 Markdown 创建博客.md",
      "/home/zepang/WorkSpace/blog/posts/使用 Next.js SSG 和 Markdown 创建博客.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"环境准备\">环境准备</h1>\n<ul>\n<li>\n<p>Node.js</p>\n</li>\n<li>\n<p>Npm, npx</p>\n</li>\n<li>\n<p>VS Code</p>\n</li>\n</ul>\n<h1 id=\"什么是-ssg？\">什么是 SSG？</h1>\n<p>静态站点生成器SSG是介于传统静态站点和动态站点之间的一种折中解决方案。</p>\n<p>传统意义的静态网站内容固定，而动态网站则会根据获取的数据动态的渲染内容。</p>\n<p>SGG与上边两者的区别是SSG会提前（打包编译）获取数据，数据来源可能是通过API或者Markdown、JSON文件等等，然后根据获取的数据输出HTML静态文件。</p>\n<p>next.js9.3版本宣布支持SSG，具体查看该文章<a href=\"https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support\">https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support</a>。</p>\n<p>本文将尝试配置一个 Next.js SSG Blog Starter 项目，并基于该项目创建个人博客。</p>\n<h1 id=\"初始化一个nextjs项目\">初始化一个next.js项目</h1>\n<p>打开next.js的文档，按照步骤快速创建一个next.js应用</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npx create-next-app\n\n# 文件目录如下\n.\n├── README.md\n├── package.json\n├── pages\n├── public\n├── styles\n└── yarn.lock</code></pre></div>\n<p>创建完成之后我们先进入目录，启动一下项目，确保没有问题</p>\n<h1 id=\"尝试使用getstaticprops提前获取数据\">尝试使用getStaticProps提前获取数据</h1>\n<p>看下官方文档对getStaticProps函数的描述：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">If you export an async function called getStaticProps from a page, Next.js will pre-render this page at build time using the props returned by getStaticProps.</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// will be passed to the page component as props</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>接下来，创建<code>/posts</code>目录，并在该目录下添加一个Markdown的文件<code>index.md</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\"># hello next.js</code></pre></div>\n<p>改造<code>index.js</code>的内容：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">fs</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'fs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">path</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'path'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> markdown <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>markdown<span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> markdown <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'posts/index.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      markdown\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>打开浏览器，可以看到标题<code># hello next.js</code>，成功的拿到了数据。</p>\n<h1 id=\"获取文章元信息（metadata）和内容\">获取文章元信息（metaData）和内容</h1>\n<p>在使用Markdown写文章的时候，为了区别文章的一些元信息和文章内容，通常会使用yaml语法来描述文章元信息。</p>\n<p>比如，创建一片文章<code>/post/第一篇文章.md</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token hr punctuation\">---</span>\n<span class=\"token title important\">title: 第一篇文章\n<span class=\"token punctuation\">---</span></span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> 第一篇文章</span>\n\n第一篇文章内容\n</code></pre></div>\n<p>我们使用<code>front-matter</code>处理元信息和获取需要的Markdown内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn add front-matter</code></pre></div>\n<p>下面是改造后的<code>index.js</code>文件内容:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">fs</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'fs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">path</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'path'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">frontMatter</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'front-matter'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">page</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>main className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">main</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&#x3C;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>\n            posts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&#x3C;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">titleWrapper</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&#x3C;</span>a className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n             <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> postsDirectory <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readdirSync</span><span class=\"token punctuation\">(</span>postsDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>md<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>postsDirectory<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> attributes<span class=\"token punctuation\">,</span> body <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">frontMatter</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 确保title存在</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'[object Object]'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">basename</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">basename</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      meta<span class=\"token operator\">:</span> attributes<span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> body\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      posts\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>打开页面，可以看到文章的标题</p>\n<h1 id=\"使用-react-markdown-渲染markdown\">使用 react-markdown 渲染Markdown</h1>\n<p>安装依赖<code>react-markdown</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn add react-markdown</code></pre></div>\n<p>改造index.js旳代码：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactMarkdown</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-markdown'</span>\n<span class=\"token spread operator\">...</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">page</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>main className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">main</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&#x3C;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>\n            posts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&#x3C;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">titleWrapper</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&#x3C;</span>a className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n             <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n        <span class=\"token comment\">// 文章内容</span>\n        <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ReactMarkdown</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>markdown<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">ReactMarkdown</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token spread operator\">...</span>\n</code></pre></div>\n<p>重新运行项目，页面已经呈现出了Markdown文件内容。</p>\n<h1 id=\"使用nextjs动态路由\">使用Next.js动态路由</h1>\n<p>SSG打包出来的都是静态页面，也就是说需要为每个Markdown文章页输出一个HTML文章页，通过访问URL上的静态文件名来访问HTML页面。</p>\n<p>为了达到这个效果，需要用到next.js的动态路由和<code>getStaticPaths</code>函数，你也可以使用通过在<code>next.config.js</code>中配置<code>exportPathMap</code>来替换<code>getStaticPaths</code>函数的作用。</p>\n<p>先来尝试一下next.js的动态路由，创建<code>pages/post/[postName].js</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'next/router'</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span>h1<span class=\"token operator\">></span>这是文章<span class=\"token punctuation\">{</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">postName</span><span class=\"token punctuation\">}</span>的详情页面<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>之后可以通过<code>localhost:3000/post/:postName</code>来访问页面，并且可以通过<code>next/router</code>的<code>useRouter</code> hooks创建的router对象获取 <code>postName</code> 的值。</p>\n<p>在改造<code>pages/post/[postName].js</code>之前，先把<code>index.js</code>文件中的一些通用方法提到<code>/utils/index.js</code>文件中：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">fs</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'fs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">path</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'path'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">frontMatter</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'front-matter'</span>\n\n<span class=\"token keyword\">const</span> postsDirectory <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAllPosts</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readdirSync</span><span class=\"token punctuation\">(</span>postsDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>md<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">basename</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> posts\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPost</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>postsDirectory<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.md</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> attributes<span class=\"token punctuation\">,</span> body <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">frontMatter</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 确保title存在</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'[object Object]'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> filename <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> filename\n  <span class=\"token punctuation\">}</span>\n\n  attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">filename</span> <span class=\"token operator\">=</span> filename\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    meta<span class=\"token operator\">:</span> attributes<span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> body\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>接下来在<code>pages/post/[postName].js</code>加入<code>getStaticPaths</code>函数和<code>getStaticProps函数</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'next/router'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> getAllPosts<span class=\"token punctuation\">,</span> getPost <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../utils'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactMarkdown</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-markdown'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> post <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>h1<span class=\"token operator\">></span>这是文章<span class=\"token punctuation\">{</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">postName</span><span class=\"token punctuation\">}</span>的详情页面<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ReactMarkdown</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">ReactMarkdown</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">contxt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> post <span class=\"token operator\">=</span> <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>contxt<span class=\"token punctuation\">.</span><span class=\"token property-access\">params</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">postName</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      post\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticPaths</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token function\">getAllPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> paths <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token comment\">// 兼容中文命名需要使用 encodeURIComponent，否则无法根据URL的文件名找到对应文件</span>\n        postName<span class=\"token operator\">:</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">filename</span><span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    paths<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 不存在的文章显示404</span>\n    fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n</code></pre></div>\n<p>目前已经可以通过访问<code>localhost:3000/post/:postName</code>正确的展示Markdown文章页面和内容。</p>\n<h1 id=\"添加markdown代码块的语法高亮\">添加markdown代码块的语法高亮</h1>\n<p><code>react-markdown</code> 默认没有语法高亮，语法高亮需要用到另外一个依赖 <code>react-syntax-highlighter</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn add react-syntax-highlighter</code></pre></div>\n<p>关于 <code>react-syntax-highlighter</code> 的使用这里不做过多说明，具体的话去查看对应的文档即可。</p>\n<p>为了使的 <code>react-syntax-highlighter</code> 配合 <code>react-markdown</code>，需要使用<code>react-markdown</code>的自定义<code>renderers</code>，文档也有提到相关的内容。</p>\n<p>修改<code>pages/post/[postName].js</code>的代码，针对<code>code</code>标签的内容交给<code>CodeBlock</code>组件处理：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ReactMarkdown</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span><span class=\"token punctuation\">}</span> renderers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> code<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CodeBlock</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">ReactMarkdown</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token spread operator\">...</span>\n</code></pre></div>\n<p>创建文件<code>components/CodeBlock.js</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Prism</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">SyntaxHighlighter</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-syntax-highlighter'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> okaidia <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-syntax-highlighter/dist/cjs/styles/prism'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">CodeBlock</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> language<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">SyntaxHighlighter</span> language<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>language<span class=\"token punctuation\">}</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>okaidia<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">SyntaxHighlighter</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">CodeBlock</span>\n</code></pre></div>\n<p>这样markdown中代码块的语法高亮就处理完了。</p>\n",
    "frontmatter": {
      "title": "使用 Next.js SSG 和 Markdown 创建博客",
      "date": "2020-11-29"
    },
    "toc": "<ul>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">环境准备</a></li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-ssg%EF%BC%9F\">什么是 SSG？</a></li>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AAnextjs%E9%A1%B9%E7%9B%AE\">初始化一个next.js项目</a></li>\n<li><a href=\"#%E5%B0%9D%E8%AF%95%E4%BD%BF%E7%94%A8getstaticprops%E6%8F%90%E5%89%8D%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\">尝试使用getStaticProps提前获取数据</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E6%96%87%E7%AB%A0%E5%85%83%E4%BF%A1%E6%81%AF%EF%BC%88metadata%EF%BC%89%E5%92%8C%E5%86%85%E5%AE%B9\">获取文章元信息（metaData）和内容</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-react-markdown-%E6%B8%B2%E6%9F%93markdown\">使用 react-markdown 渲染Markdown</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8nextjs%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\">使用Next.js动态路由</a></li>\n<li><a href=\"#%E6%B7%BB%E5%8A%A0markdown%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE\">添加markdown代码块的语法高亮</a></li>\n</ul>\n",
    "name": "使用 Next.js SSG 和 Markdown 创建博客",
    "id": 3,
    "prev": {
      "name": "一些关于Git的内容"
    },
    "next": {
      "name": "在线Web IDE--code server部署"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/在线Web IDE--code server部署.md",
      "/home/zepang/WorkSpace/blog/posts/在线Web IDE--code server部署.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"环境准备\">环境准备</h1>\n<ul>\n<li>\n<p>一台服务器</p>\n</li>\n<li>\n<p>Docker环境</p>\n</li>\n<li>\n<p>Nginx</p>\n</li>\n</ul>\n<h1 id=\"code-server-部署\">Code Server 部署</h1>\n<ul>\n<li><code>code-server</code> <a href=\"https://github.com/cdr/code-server\">https://github.com/cdr/code-server</a></li>\n</ul>\n<p>由于之前使用过docker，环境都还在，所以，选择使用docker的方式进行部署</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p ~/.config\n\ndocker run -it --name code-server -p <span class=\"token number\">127.0</span>.0.1:8080:8080 <span class=\"token punctuation\">\\</span>\n  -v <span class=\"token string\">\"<span class=\"token environment constant\">$HOME</span>/.config:/home/coder/.config\"</span> <span class=\"token punctuation\">\\</span>\n  -v <span class=\"token string\">\"<span class=\"token environment constant\">$PWD</span>:/home/coder/project\"</span> <span class=\"token punctuation\">\\</span>\n  -u <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span>:<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span>\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token comment\"># 此处填写等会访问Web IDE密码</span>\n  -e <span class=\"token string\">\"PASSWORD=xxxxx\"</span>\n  codercom/code-server:latest\n</code></pre></div>\n<p>跑完之后查看一下容器是否正常运行</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">➜  ~ docker container <span class=\"token function\">ls</span> -a\nCONTAINER ID   IMAGE                         COMMAND                  CREATED       STATUS       PORTS                    NAMES\n62d7182c80ea   codercom/code-server:latest   <span class=\"token string\">\"/usr/bin/entrypoint…\"</span>   <span class=\"token number\">8</span> hours ago   Up <span class=\"token number\">8</span> hours   <span class=\"token number\">0.0</span>.0.0:8080-<span class=\"token operator\">></span><span class=\"token number\">8080</span>/tcp   code-server\n</code></pre></div>\n<p>过程进行的还比较顺利，一步就成功了</p>\n<h1 id=\"nginx-配置\">Nginx 配置</h1>\n<p>在Nginx的配置文件上加一个 <code>location</code> 的配置块</p>\n<div class=\"remark-highlight\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">location</span> <span class=\"token operator\">/</span>code<span class=\"token operator\">-</span><span class=\"token keyword\">server</span><span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span><span class=\"token operator\">/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Upgrade <span class=\"token variable\">$http_upgrade</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Connection upgrade<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Accept<span class=\"token operator\">-</span>Encoding <span class=\"token keyword\">gzip</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>打开浏览器访问 <code>https://example.com/code-server</code>，出现输入框，输入刚才设置的密码，进入IDE</p>\n<p><img src=\"/images/vscode-web-ide.png\" alt=\"\"></p>\n<p>关于code-server的配置可以查看文档或者搜索相关的文章</p>\n<p>关于换的问题根据个人的需求处理就好了</p>\n<p>参考：</p>\n<ul>\n<li>https://blog.0x233.cn/2020/04/11/code-server/</li>\n</ul>\n",
    "frontmatter": {
      "title": "在线Web IDE--code server部署",
      "date": "2020-12-17"
    },
    "toc": "<ul>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">环境准备</a></li>\n<li><a href=\"#code-server-%E9%83%A8%E7%BD%B2\">Code Server 部署</a></li>\n<li><a href=\"#nginx-%E9%85%8D%E7%BD%AE\">Nginx 配置</a></li>\n</ul>\n",
    "name": "在线Web IDE--code server部署",
    "id": 4,
    "prev": {
      "name": "使用 Next.js SSG 和 Markdown 创建博客"
    },
    "next": {
      "name": "读书笔记-你不知道的JavaScript-上篇"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/读书笔记-你不知道的JavaScript-上篇.md",
      "/home/zepang/WorkSpace/blog/posts/读书笔记-你不知道的JavaScript-上篇.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h2 id=\"第一章-作用域是什么？\">第一章 作用域是什么？</h2>\n<h1 id=\"第二部分\">第二部分</h1>\n<h2 id=\"第一章-关于-this\">第一章 关于 this</h2>\n<h3 id=\"对-this-的误解\">对 this 的误解</h3>\n<ul>\n<li>this 指向函数自身</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// foo: 6</span>\n<span class=\"token comment\">// foo: 7</span>\n<span class=\"token comment\">// foo: 8</span>\n<span class=\"token comment\">// foo: 9</span>\n<span class=\"token comment\">// foo 被调用了多少次？</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 -- WTF?</span>\n</code></pre></div>\n<p>foo 调用实际上是增加了全局的 count。</p>\n<p><strong>就针对上面的代码，如何回避以上问题：</strong></p>\n<ul>\n<li>第一种</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  data<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// foo: 6</span>\n<span class=\"token comment\">// foo: 7</span>\n<span class=\"token comment\">// foo: 8</span>\n<span class=\"token comment\">// foo: 9</span>\n<span class=\"token comment\">// foo 被调用了多少次？</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<p>创建一个对象来存储 count，回避掉 this 的问题，用词法作用域来解释。</p>\n<ul>\n<li>第二种</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>使用具名函数，指定函数名。</p>\n<ul>\n<li>第三种</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  <span class=\"token comment\">// 注意，在当前的调用方式下（参见下方代码），this 确实指向 foo</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 使用 call(..) 可以确保 this 指向函数对象 foo 本身</span>\n    foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span> foo<span class=\"token punctuation\">,</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// foo: 6</span>\n<span class=\"token comment\">// foo: 7</span>\n<span class=\"token comment\">// foo: 8</span>\n<span class=\"token comment\">// foo: 9</span>\n<span class=\"token comment\">// foo 被调用了多少次？</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<p>使用 call apply bind 这一类，强制绑顶 this 的指向。</p>\n<ul>\n<li>this 指向函数作用域\n（说实话没看懂作者举的例子和当前的主题有啥干系）</li>\n</ul>\n<h4 id=\"小结\">小结</h4>\n<p>this 既不指向函数自身也不指向函数的词法作用域，this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。</p>\n<hr>\n<h2 id=\"第二章-全面了解-this\">第二章 全面了解 this</h2>\n<h3 id=\"this的绑定规则\">this的绑定规则</h3>\n<h4 id=\"默认绑定\">默认绑定</h4>\n<p>独立函数调用（作为普通的函数调用），在非严格的模式下，this 指向全局对象。在严格模式下，this 是 undefined。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>书上的说法是 foo 是直接使用不带任何修饰的函数引用进行调用的，因此只能使用默认绑定。</p>\n",
    "frontmatter": {
      "title": "你不知道的JavaScript系列摘录-上卷",
      "img": "https://placem.at/places?h=140",
      "date": "2019-04-29"
    },
    "toc": "<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86\">第二部分</a></p>\n<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%85%B3%E4%BA%8E-this\">第一章 关于 this</a></p>\n<ul>\n<li>\n<p><a href=\"#%E5%AF%B9-this-%E7%9A%84%E8%AF%AF%E8%A7%A3\">对 this 的误解</a></p>\n<ul>\n<li><a href=\"#%E5%B0%8F%E7%BB%93\">小结</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%85%A8%E9%9D%A2%E4%BA%86%E8%A7%A3-this\">第二章 全面了解 this</a></p>\n<ul>\n<li>\n<p><a href=\"#this%E7%9A%84%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99\">this的绑定规则</a></p>\n<ul>\n<li><a href=\"#%E9%BB%98%E8%AE%A4%E7%BB%91%E5%AE%9A\">默认绑定</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
    "name": "读书笔记-你不知道的JavaScript-上篇",
    "id": 5,
    "prev": {
      "name": "在线Web IDE--code server部署"
    }
  }
]