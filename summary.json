[
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/Vue3x组件渲染.md",
      "/home/zepang/WorkSpace/blog/posts/Vue3x组件渲染.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"应用初始化\">应用初始化</h1>\n<p>我们简单的创建一个Vue3x的应用：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn create vite-app leraning-vue3x</code></pre></div>\n<p>Vue会从一个根节点开始整个组件树的渲染，打开 <code>src/main.js</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createApp <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./App.vue'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'./index.css'</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Vue3x导出一个函数<code>createApp</code>来创建应用实例（<code>app</code>），这与Vue2x使用 <code>new</code> 关键字直接创建实例略微有所差别，不过两者最终都需要通过调用 <code>app.mount</code> 挂载到 <code>DOM</code> 节点。</p>\n<p>接下来，在<code>createApp(app)</code>之前打一个断点，然后启动运用，打开<code>chrome</code>浏览器和控制台，我们通过断点调试来分析一下该函数和<code>app</code>创建过程。</p>\n<h1 id=\"createapp函数\">createApp函数</h1>\n<p>ok，通过断点直接进入<code>createApp</code>内部，可以发现<code>createApp</code>大概做了下边两件事情</p>\n<ul>\n<li>\n<p>创建 app</p>\n</li>\n<li>\n<p>重写 app.mount 函数，并在内部调用原来的 mount 函数</p>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> createApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. 创建 app</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">ensureRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">injectNativeTagCheck</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 导出 app 的 mount 函数</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mount <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. 重写 mount 函数</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">mount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">containerOrSelector</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token function\">normalizeContainer</span><span class=\"token punctuation\">(</span>containerOrSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>container<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_component</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">render</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span> <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// clear content before mounting</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用原 app.mount</span>\n        <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v-cloak'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-v-app'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> proxy<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接下来，我们逐步分析一下具体的过程。</p>\n<h1 id=\"创建app\">创建app</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * render = <span class=\"token punctuation\">{</span> render, hydrate, createApp <span class=\"token punctuation\">}</span>\n */</span>\n<span class=\"token keyword\">const</span> render <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 我们使用的是vite创建的项目，createApp(App) 传入的App组件不仅是单文件导出的对象已经是经过vite转化过的对象，其内已经包含render函数</span>\n    <span class=\"token comment\">// 具体可以看 @vue/compiler-sfc 这个依赖 vue-loader同样用到了该依赖</span>\n    <span class=\"token function\">ensureRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ensureRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> renderer <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>renderer <span class=\"token operator\">=</span> <span class=\"token function\">createRenderer</span><span class=\"token punctuation\">(</span>rendererOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createRenderer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">baseCreateRenderer</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">baseCreateRenderer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options<span class=\"token punctuation\">,</span> createHydrationFns</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">path</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> parentComponent <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> parentSuspense <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> isSVG <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> optimized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">processText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">processCommentNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 组件渲染的核心逻辑</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> \n       <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>vnode <span class=\"token operator\">==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span><span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span> <span class=\"token operator\">||</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">flushPostFlushCbs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span> <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        render<span class=\"token punctuation\">,</span>\n        hydrate<span class=\"token punctuation\">,</span>\n        createApp<span class=\"token operator\">:</span> <span class=\"token function\">createAppAPI</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">,</span> hydrate<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>通过追踪代码，发现Vue导出的<code>createApp</code>函数内，创建<code>app</code>调用的<code>createApp</code>函数实际上调用的是<code>createAppAPI</code>返回的函数<code>createApp</code>。</p>\n<p>该函数清晰的描述了 <code>app</code> 这个对象的所有属性，下边我贴出了该函数的全部代码，并在重要的地方做了一些注释。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createAppContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        app<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        config<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            isNativeTag<span class=\"token operator\">:</span> <span class=\"token constant\">NO</span><span class=\"token punctuation\">,</span>\n            <span class=\"token dom variable\">performance</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            globalProperties<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            optionMergeStrategies<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            isCustomElement<span class=\"token operator\">:</span> <span class=\"token constant\">NO</span><span class=\"token punctuation\">,</span>\n            errorHandler<span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span>\n            warnHandler<span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局mixins</span>\n        mixins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局插件</span>\n        components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局指令</span>\n        directives<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局的provide</span>\n        provides<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAppAPI</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">render<span class=\"token punctuation\">,</span> hydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootComponent<span class=\"token punctuation\">,</span> rootProps <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>rootProps <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>rootProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">root props passed to app.mount() must be an object.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rootProps <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\">         * 1. 创建全局的上下文对象</span>\n<span class=\"token doc-comment comment\">         * 2. 在调用 app.use app.mixin app.component app.directive ... 等这些方法的时候分别会往全局上下文中存入一些属性</span>\n<span class=\"token doc-comment comment\">         * 3. 具体的内容可以查看下边的代码和 createAppContext 函数的返回对象</span>\n<span class=\"token doc-comment comment\">         */</span> \n        <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">createAppContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> installedPlugins <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">app</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            _uid<span class=\"token operator\">:</span> uid$<span class=\"token number\">1</span><span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>\n            _component<span class=\"token operator\">:</span> rootComponent<span class=\"token punctuation\">,</span>\n            _props<span class=\"token operator\">:</span> rootProps<span class=\"token punctuation\">,</span>\n            _container<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n            _context<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n            version<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">get</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">config</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">set</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">app.config cannot be replaced. Modify individual options instead.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局插件</span>\n            <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plugin<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>installedPlugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Plugin has already been applied to target app.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>plugin <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">.</span><span class=\"token property-access\">install</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    installedPlugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    plugin<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">install</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    installedPlugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">A plugin must either be a function or an object with an \"install\" </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">function.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局mixins</span>\n            <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mixin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>__VUE_OPTIONS_API__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">mixins</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        context<span class=\"token punctuation\">.</span><span class=\"token property-access\">mixins</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// global mixin with props/emits de-optimizes props/emits</span>\n                        <span class=\"token comment\">// normalization caching.</span>\n                        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">||</span> mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">emits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            context<span class=\"token punctuation\">.</span><span class=\"token property-access\">deopt</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mixin has already been applied to target app'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mixins are only available in builds supporting Options API'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局组件</span>\n            <span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">validateComponentName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">config</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">components</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">components</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Component \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" has already been registered in target app.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token property-access\">components</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> component<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局指令</span>\n            <span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> directive</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">validateDirectiveName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>directive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">directives</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">directives</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Directive \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" has already been registered in target app.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token property-access\">directives</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> directive<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootContainer<span class=\"token punctuation\">,</span> isHydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token function\">createVNode</span><span class=\"token punctuation\">(</span>rootComponent<span class=\"token punctuation\">,</span> rootProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// store app context on the root VNode.</span>\n                    <span class=\"token comment\">// this will be set on the root instance on initial mount.</span>\n                    vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">appContext</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// HMR root reload</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        context<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">reload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">cloneVNode</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isHydrate <span class=\"token operator\">&#x26;&#x26;</span> hydrate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_container</span> <span class=\"token operator\">=</span> rootContainer<span class=\"token punctuation\">;</span>\n                    rootContainer<span class=\"token punctuation\">.</span><span class=\"token property-access\">__vue_app__</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> __VUE_PROD_DEVTOOLS__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">devtoolsInitApp</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">return</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">component</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">proxy</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App has already been mounted.\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">If you want to remount the same app, move your app creation logic </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">into a factory function and create fresh app instances for each </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mount - e.g. \\`const createMyApp = () => createApp(App)\\`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_container</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> __VUE_PROD_DEVTOOLS__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">devtoolsUnmountApp</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cannot unmount an app that is not mounted.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局的provide</span>\n            <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> key <span class=\"token keyword\">in</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">provides</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App already provides property with key \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\". </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">It will be overwritten with the new value.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// TypeScript doesn't allow symbols as index type</span>\n                <span class=\"token comment\">// https://github.com/Microsoft/TypeScript/issues/24587</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token property-access\">provides</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 返回 app 对象</span>\n        <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<h1 id=\"重写-appmount\">重写 app.mount</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">normalizeContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Failed to mount app: mount target selector returned null.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> container<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> createApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// 导出 app 的 mount 函数</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mount <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. 重写 mount 函数</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">mount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">containerOrSelector</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 获取container，</span>\n        <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token function\">normalizeContainer</span><span class=\"token punctuation\">(</span>containerOrSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>container<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_component</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">render</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span> <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// clear content before mounting</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用原 app.mount</span>\n        <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v-cloak'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-v-app'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> proxy<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAppAPI</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">render<span class=\"token punctuation\">,</span> hydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootComponent<span class=\"token punctuation\">,</span> rootProps <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootContainer<span class=\"token punctuation\">,</span> isHydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 创建VNode</span>\n                <span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token function\">createVNode</span><span class=\"token punctuation\">(</span>rootComponent<span class=\"token punctuation\">,</span> rootProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// store app context on the root VNode.</span>\n                <span class=\"token comment\">// this will be set on the root instance on initial mount.</span>\n                vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">appContext</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// HMR root reload</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    context<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">reload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">cloneVNode</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isHydrate <span class=\"token operator\">&#x26;&#x26;</span> hydrate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_container</span> <span class=\"token operator\">=</span> rootContainer<span class=\"token punctuation\">;</span>\n                rootContainer<span class=\"token punctuation\">.</span><span class=\"token property-access\">__vue_app__</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> __VUE_PROD_DEVTOOLS__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">devtoolsInitApp</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">return</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">component</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">proxy</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App has already been mounted.\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">If you want to remount the same app, move your app creation logic </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">into a factory function and create fresh app instances for each </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mount - e.g. \\`const createMyApp = () => createApp(App)\\`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h1 id=\"创建vnode\">创建VNode</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">_createVNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> children <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> patchFlag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dynamicProps <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> isBlockNode <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>type <span class=\"token operator\">||</span> type <span class=\"token operator\">===</span> <span class=\"token constant\">NULL_DYNAMIC_COMPONENT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Invalid vnode type when creating vnode: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        type <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Comment</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isVNode</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// createVNode receiving an existing vnode. This happens in cases like</span>\n        <span class=\"token comment\">// &#x3C;component :is=\"vnode\"/></span>\n        <span class=\"token comment\">// #2078 make sure to merge refs during the clone instead of overwriting it</span>\n        <span class=\"token keyword\">const</span> cloned <span class=\"token operator\">=</span> <span class=\"token function\">cloneVNode</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* mergeRef: true */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">normalizeChildren</span><span class=\"token punctuation\">(</span>cloned<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> cloned<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// class component normalization.</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClassComponent</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span><span class=\"token property-access\">__vccOpts</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// class &#x26; style normalization.</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// for reactive or proxy objects, we need to clone it to enable mutation.</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token maybe-class-name\">InternalObjectKey</span> <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            props <span class=\"token operator\">=</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> klass<span class=\"token punctuation\">,</span> style <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>klass <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            props<span class=\"token punctuation\">.</span><span class=\"token property-access\">class</span> <span class=\"token operator\">=</span> <span class=\"token function\">normalizeClass</span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// reactive state objects need to be cloned since they are likely to be</span>\n            <span class=\"token comment\">// mutated</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                style <span class=\"token operator\">=</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            props<span class=\"token punctuation\">.</span><span class=\"token property-access\">style</span> <span class=\"token operator\">=</span> <span class=\"token function\">normalizeStyle</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// encode the vnode type information into a bitmap</span>\n    <span class=\"token keyword\">const</span> shapeFlag <span class=\"token operator\">=</span> <span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token comment\">/* ELEMENT */</span>\n        <span class=\"token operator\">:</span>  <span class=\"token function\">isSuspense</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token number\">128</span> <span class=\"token comment\">/* SUSPENSE */</span>\n            <span class=\"token operator\">:</span> <span class=\"token function\">isTeleport</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">?</span> <span class=\"token number\">64</span> <span class=\"token comment\">/* TELEPORT */</span>\n                <span class=\"token operator\">:</span> <span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token comment\">/* STATEFUL_COMPONENT */</span>\n                    <span class=\"token operator\">:</span> <span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token comment\">/* FUNCTIONAL_COMPONENT */</span>\n                        <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> shapeFlag <span class=\"token operator\">&#x26;</span> <span class=\"token number\">4</span> <span class=\"token comment\">/* STATEFUL_COMPONENT */</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        type <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Vue received a Component which was made a reactive object. This can </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">lead to unnecessary performance overhead, and should be avoided by </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">marking the component with \\`markRaw\\` or using \\`shallowRef\\` </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">instead of \\`ref\\`.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\nComponent that was made reactive: </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        __v_isVNode<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"__v_skip\"</span> <span class=\"token comment\">/* SKIP */</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">,</span>\n        key<span class=\"token operator\">:</span> props <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">normalizeKey</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        ref<span class=\"token operator\">:</span> props <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">normalizeRef</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        scopeId<span class=\"token operator\">:</span> currentScopeId<span class=\"token punctuation\">,</span>\n        children<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        component<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        suspense<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        ssContent<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        ssFallback<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        dirs<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        transition<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        el<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        anchor<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        target<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        targetAnchor<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        staticCount<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        shapeFlag<span class=\"token punctuation\">,</span>\n        patchFlag<span class=\"token punctuation\">,</span>\n        dynamicProps<span class=\"token punctuation\">,</span>\n        dynamicChildren<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        appContext<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// validate key</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span> <span class=\"token operator\">!==</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">VNode created with invalid key (NaN). VNode type:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">normalizeChildren</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// normalize suspense children</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span> shapeFlag <span class=\"token operator\">&#x26;</span> <span class=\"token number\">128</span> <span class=\"token comment\">/* SUSPENSE */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> fallback <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">normalizeSuspenseChildren</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">ssContent</span> <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n        vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">ssFallback</span> <span class=\"token operator\">=</span> fallback<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>shouldTrack$<span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&#x26;&#x26;</span>\n        <span class=\"token comment\">// avoid a block node from tracking itself</span>\n        <span class=\"token operator\">!</span>isBlockNode <span class=\"token operator\">&#x26;&#x26;</span>\n        <span class=\"token comment\">// has current parent block</span>\n        currentBlock <span class=\"token operator\">&#x26;&#x26;</span>\n        <span class=\"token comment\">// presence of a patch flag indicates this node needs patching on updates.</span>\n        <span class=\"token comment\">// component nodes also should always be patched, because even if the</span>\n        <span class=\"token comment\">// component doesn't need to update, it needs to persist the instance on to</span>\n        <span class=\"token comment\">// the next vnode so that it can be properly unmounted later.</span>\n        <span class=\"token punctuation\">(</span>patchFlag <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> shapeFlag <span class=\"token operator\">&#x26;</span> <span class=\"token number\">6</span> <span class=\"token comment\">/* COMPONENT */</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span>\n        <span class=\"token comment\">// the EVENTS flag is only for hydration and if it is the only flag, the</span>\n        <span class=\"token comment\">// vnode should not be considered dynamic due to handler caching.</span>\n        patchFlag <span class=\"token operator\">!==</span> <span class=\"token number\">32</span> <span class=\"token comment\">/* HYDRATE_EVENTS */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        currentBlock<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> vnode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>VNode的结构</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    __v_isVNode<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"__v_skip\"</span> <span class=\"token comment\">/* SKIP */</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    key<span class=\"token operator\">:</span> props <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">normalizeKey</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    ref<span class=\"token operator\">:</span> props <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">normalizeRef</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    scopeId<span class=\"token operator\">:</span> currentScopeId<span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    suspense<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    ssContent<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    ssFallback<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    dirs<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    transition<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    el<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    anchor<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    target<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    targetAnchor<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    staticCount<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    shapeFlag<span class=\"token punctuation\">,</span>\n    patchFlag<span class=\"token punctuation\">,</span>\n    dynamicProps<span class=\"token punctuation\">,</span>\n    dynamicChildren<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    appContext<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2 id=\"sharpeflags\">SharpeFlags</h2>\n<p><code>https://github.com/vuejs/vue-next/blob/master/packages/shared/src/shapeFlags.ts</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> <span class=\"token maybe-class-name\">ShapeFlags</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// html 或 svg 标签</span>\n  <span class=\"token constant\">ELEMENT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 函数式组件</span>\n  <span class=\"token constant\">FUNCTIONAL_COMPONENT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 普通有状态组件</span>\n  <span class=\"token constant\">STATEFUL_COMPONENT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 子节点是纯文本</span>\n  <span class=\"token constant\">TEXT_CHILDREN</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 子节点是数组</span>\n  <span class=\"token constant\">ARRAY_CHILDREN</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 子节点是 slots</span>\n  <span class=\"token constant\">SLOTS_CHILDREN</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Portal</span>\n  <span class=\"token constant\">PORTAL</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Suspense</span>\n  <span class=\"token constant\">SUSPENSE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 需要被keepAlive的有状态组件</span>\n  <span class=\"token constant\">COMPONENT_SHOULD_KEEP_ALIVE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 已经被keepAlive的有状态组件</span>\n  <span class=\"token constant\">COMPONENT_KEPT_ALIVE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 有状态组件和函数式组件都是“组件”，用 COMPONENT 表示</span>\n  <span class=\"token constant\">COMPONENT</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">ShapeFlags</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STATEFUL_COMPONENT</span> <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">ShapeFlags</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FUNCTIONAL_COMPONENT</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n",
    "frontmatter": {
      "title": "Vue3x组件渲染",
      "date": "2020-11-05"
    },
    "toc": "<ul>\n<li>\n<p><a href=\"#%E5%BA%94%E7%94%A8%E5%88%9D%E5%A7%8B%E5%8C%96\">应用初始化</a></p>\n</li>\n<li>\n<p><a href=\"#createapp%E5%87%BD%E6%95%B0\">createApp函数</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%88%9B%E5%BB%BAapp\">创建app</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%87%8D%E5%86%99-appmount\">重写 app.mount</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%88%9B%E5%BB%BAvnode\">创建VNode</a></p>\n<ul>\n<li><a href=\"#sharpeflags\">SharpeFlags</a></li>\n</ul>\n</li>\n</ul>\n",
    "name": "Vue3x组件渲染",
    "id": "c228310886a810a45a4fcc807de3c954",
    "next": {
      "name": "vite 原理解析(1)-vite命令做了什么",
      "id": "20520b7394c04937472b75071f39853b"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/vite 原理解析(1)-vite命令做了什么.md",
      "/home/zepang/WorkSpace/blog/posts/vite 原理解析(1)-vite命令做了什么.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"环境准备\">环境准备</h1>\n<ul>\n<li>\n<p>VS Code</p>\n</li>\n<li>\n<p>Node.js</p>\n</li>\n<li>\n<p>Yarn</p>\n</li>\n<li>\n<p><a href=\"https://github.com/vitejs/vite\">vite: https://github.com/vitejs/vite</a></p>\n</li>\n</ul>\n<h1 id=\"什么是-vite-\">什么是 vite ?</h1>\n<p>一个基于浏览器原生 ES imports 的开发服务器。</p>\n<p>在项目开发模式下，vite 会根据浏览器解析 <code>import</code> 的请求，在服务端完成编译返回代码。</p>\n<p>vite 拥有很多的特性，本文仅通过对其在 <code>development</code> 模式下相关代码进行分析和探究一些原理。</p>\n<h1 id=\"从-vite-命令开始\">从 vite 命令开始</h1>\n<p>快速创建一个vite项目：</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> create vite-app <span class=\"token operator\">&#x3C;</span>project-name<span class=\"token operator\">></span>\n</code></pre></div>\n<p>，打开 VS Code，找到项目 <code>node_modules/vite</code>（发现vite打包后的代码大部分可阅读性良好，觉得不习惯的可以使用 <code>npm link</code> 直接查看 vite 的源码），通过查看其<code>package.json</code>文件的配置，找到入口文件，通过快速的阅读，可以定位到 <code>vite</code> 命令的入口的代码如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// node_modules/vite/dist/node/cli.js</span>\ncli\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[root]'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// default command</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">alias</span><span class=\"token punctuation\">(</span><span class=\"token string\">'serve'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--port &#x3C;port>'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[number]  port to listen to</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--force'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[boolean]  force the optimizer to ignore the cache and re-bundle</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--https'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[boolean]  start the server with TLS and HTTP/2 enabled</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--open'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[boolean]  open browser on server start</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">action</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> argv</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        argv<span class=\"token punctuation\">.</span><span class=\"token property-access\">root</span> <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">resolveOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> argv<span class=\"token punctuation\">,</span> defaultMode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">runServe</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>通过一些字面理解，运行 <code>vite</code> 命令主要会做两件事：</p>\n<ul>\n<li>\n<p>获取配置</p>\n</li>\n<li>\n<p>启动服务</p>\n</li>\n</ul>\n<p>在获取配置之前的位置打一个断点，打开 VS Code 的调试终端，运行：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npm run dev</code></pre></div>\n<h1 id=\"vite-获取配置过程分析\">vite 获取配置过程分析</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">resolveConfig</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mode<span class=\"token punctuation\">,</span> configPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> cwd <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> resolvedPath<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> isTS <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>configPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 获取用户自定义的配置文件路径</span>\n        resolvedPath <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>cwd<span class=\"token punctuation\">,</span> configPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 用户未配置 resolvedPath 的情况下，定位跟目录是否有 'vite.config.js'</span>\n        <span class=\"token keyword\">const</span> jsConfigPath <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>cwd<span class=\"token punctuation\">,</span> <span class=\"token string\">'vite.config.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">existsSync</span><span class=\"token punctuation\">(</span>jsConfigPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            resolvedPath <span class=\"token operator\">=</span> jsConfigPath<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 用户未配置 resolvedPath 的情况下，定位跟目录是否有 'vite.config.ts'</span>\n            <span class=\"token keyword\">const</span> tsConfigPath <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>cwd<span class=\"token punctuation\">,</span> <span class=\"token string\">'vite.config.ts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">existsSync</span><span class=\"token punctuation\">(</span>tsConfigPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                isTS <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                resolvedPath <span class=\"token operator\">=</span> tsConfigPath<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>resolvedPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 没有任何配置文件的情况下直接读取 env 文件的配置，并返回</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n            env<span class=\"token operator\">:</span> <span class=\"token function\">loadEnv</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">,</span> cwd<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> userConfig<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isTS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 获取 vite.config.js 的配置</span>\n                userConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>resolvedPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>userConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 获取 vit.config.ts的配置</span>\n        <span class=\"token punctuation\">}</span>\n        \n        config<span class=\"token punctuation\">.</span><span class=\"token property-access\">__path</span> <span class=\"token operator\">=</span> resolvedPath<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> config<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>配置文件的获取没有什么好说的，关键的注释我都写在上边了</p>\n<h1 id=\"vite-启动服务过程分析\">vite 启动服务过程分析</h1>\n<p><code>node_modules/vite/dist/node/server/index.js</code>中暴露了一个 <code>createServer</code> 用来创建服务实例，代码如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> root <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> configureServer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> alias <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> transforms <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vueCustomBlockTransforms <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> optimizeDeps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> enableEsbuild <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> assetsInclude <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">koa_1<span class=\"token punctuation\">.</span>default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">resolveServer</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> watcher <span class=\"token operator\">=</span> chokidar_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">watch</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        ignored<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'**/node_modules/**'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'**/.git/**'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// #610</span>\n        awaitWriteFinish<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            stabilityThreshold<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n            pollInterval<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> resolver <span class=\"token operator\">=</span> resolver_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createResolver</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> resolvers<span class=\"token punctuation\">,</span> alias<span class=\"token punctuation\">,</span> assetsInclude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">,</span>\n        app<span class=\"token punctuation\">,</span>\n        server<span class=\"token punctuation\">,</span>\n        watcher<span class=\"token punctuation\">,</span>\n        resolver<span class=\"token punctuation\">,</span>\n        config<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// port is exposed on the context for hmr client connection</span>\n        <span class=\"token comment\">// in case the files are served under a different port</span>\n        port<span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">port</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// attach server context to koa context</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">read</span> <span class=\"token operator\">=</span> utils_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cachedRead</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// cors</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token property-access\">cors</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@koa/cors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">cors</span> <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">cors</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> resolvedPlugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// 配置各种插件</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    resolvedPlugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> m <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> listen <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token property-access\">listen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">port<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>optimizeDeps<span class=\"token punctuation\">.</span><span class=\"token property-access\">auto</span> <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../optimizer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">optimizeDeps</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token property-access\">port</span> <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">port</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> server<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>通过代码分析，<code>createServer</code> 函数大概做了一下几件事：</p>\n<ul>\n<li>\n<p>为了获得使用中间件的能力，创建 koa的 实例</p>\n</li>\n<li>\n<p>使用 <code>chokidar</code> 创建一个 <code>watcher</code></p>\n</li>\n<li>\n<p>将 <code>root, app, server, watcher, resolver, config, port</code> 挂载到 koa 上下文对象</p>\n</li>\n<li>\n<p>配置和挂载各种vite服务插件</p>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvedPlugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 生成sourceMap插件</span>\n    sourceMapPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 重写模块中import的导入</span>\n    moduleRewritePlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 重写html中script的内容</span>\n    htmlRewritePlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 用户定义的插件</span>\n    <span class=\"token spread operator\">...</span><span class=\"token method function property-access\">toArray</span><span class=\"token punctuation\">(</span>configureServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// /vite/env 返回环境变量插件</span>\n    envPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 获取模块内容插件</span>\n    moduleResolvePlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 代理插件</span>\n    proxyPlugin<span class=\"token punctuation\">,</span>\n    clientPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 热更新插件</span>\n    hmrPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span>transforms<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">||</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>vueCustomBlockTransforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span>\n      <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token function\">createServerTransformPlugin</span><span class=\"token punctuation\">(</span>\n            transforms<span class=\"token punctuation\">,</span>\n            vueCustomBlockTransforms<span class=\"token punctuation\">,</span>\n            resolver\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// vue文件处理插件</span>\n    vuePlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// css 资源处理</span>\n    cssPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// esbuild处理资源插件</span>\n    enableEsbuild <span class=\"token operator\">?</span> esbuildPlugin <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// JSON 资源处理插件</span>\n    jsonPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 处理静态资源插件</span>\n    assetPathPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 处理 webWorker 插件</span>\n    webWorkerPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 处理 wasm 插件</span>\n    wasmPlugin<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 静态资源服务插件</span>\n    serveStaticPlugin\n  <span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>当服务运行起来之后，等待资源请求，然后针对不同的请求走对应的插件处理和返回内容就完了。</p>\n",
    "frontmatter": {
      "title": "vite 原理解析(1)-vite命令做了什么",
      "date": "2020-09-10"
    },
    "toc": "<ul>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">环境准备</a></li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-vite-\">什么是 vite ?</a></li>\n<li><a href=\"#%E4%BB%8E-vite-%E5%91%BD%E4%BB%A4%E5%BC%80%E5%A7%8B\">从 vite 命令开始</a></li>\n<li><a href=\"#vite-%E8%8E%B7%E5%8F%96%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90\">vite 获取配置过程分析</a></li>\n<li><a href=\"#vite-%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90\">vite 启动服务过程分析</a></li>\n</ul>\n",
    "name": "vite 原理解析(1)-vite命令做了什么",
    "id": "20520b7394c04937472b75071f39853b",
    "prev": {
      "name": "Vue3x组件渲染",
      "id": "c228310886a810a45a4fcc807de3c954"
    },
    "next": {
      "name": "vite 原理解析(2)-重写npm模块和@modules",
      "id": "81022b0d239d20f20c696c37083cc328"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/vite 原理解析(2)-重写npm模块和@modules.md",
      "/home/zepang/WorkSpace/blog/posts/vite 原理解析(2)-重写npm模块和@modules.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"环境准备\">环境准备</h1>\n<ul>\n<li>\n<p>VS Code</p>\n</li>\n<li>\n<p>Node.js</p>\n</li>\n<li>\n<p>Yarn</p>\n</li>\n</ul>\n<h1 id=\"es-modules\">ES modules</h1>\n<p>关于 ES modules ，文章不做过多的介绍，具体请查看 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules</a></p>\n<p>接着上一篇文章的进度，在浏览器中访问<code>locahost:3000</code>，查看一下<code>index.html</code>的代码：</p>\n<p><img src=\"/images/vite-es-modules-html.png\" alt=\"\"></p>\n<p><code>script</code>标签指定了<code>type=\"module\"</code>告知浏览器这是一个模块，找到控制台的<code>network > js</code>，在请求资源中查看一下<code>main.js</code>的代码：</p>\n<p><img src=\"/images/vite-es-modules-main.jpg\" alt=\"\"></p>\n<p>代码中直接使用<code>import</code>关键字去导入<code>vue</code>，同时，浏览器会以发出请求加载该资源</p>\n<p><img src=\"/images/vite-es-modules-request-vue.jpg\" alt=\"\"></p>\n<h1 id=\"重写依赖路径---modules\">重写依赖路径 -> @modules</h1>\n<p>通过上边的一个截图，可以发现浏览器加载的<code>main.js</code>中导出<code>vue</code>的代码和源代码并不一致：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// source</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">vue</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token comment\">// loaded</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">vue</span> <span class=\"token keyword module\">from</span> '@modules<span class=\"token operator\">/</span>vue\n</code></pre></div>\n<p>上一篇文章中有提到一个插件<code>moduleRewritePlugin</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Plugin for rewriting served js.</span>\n<span class=\"token comment\">// - Rewrites named module imports to `/@modules/:id` requests, e.g.</span>\n<span class=\"token comment\">//   \"vue\" => \"/@modules/vue\"</span>\n<span class=\"token comment\">// - Rewrites files containing HMR code (reference to `import.meta.hot`) to</span>\n<span class=\"token comment\">//   inject `import.meta.hot` and track HMR boundary accept whitelists.</span>\n<span class=\"token comment\">// - Also tracks importer/importee relationship graph during the rewrite.</span>\n<span class=\"token comment\">//   The graph is used by the HMR plugin to perform analysis on file change.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">moduleRewritePlugin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> root<span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">,</span> watcher<span class=\"token punctuation\">,</span> resolver <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">===</span> <span class=\"token number\">304</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// we are doing the js rewrite after all other middlewares have finished;</span>\n        <span class=\"token comment\">// this allows us to post-process javascript produced by user middlewares</span>\n        <span class=\"token comment\">// regardless of the extension of the original files.</span>\n        <span class=\"token keyword\">const</span> publicPath <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span> <span class=\"token operator\">&#x26;&#x26;</span>\n            ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">response</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span>\n            <span class=\"token operator\">!</span>cssUtils_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isCSSRequest</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span>\n            <span class=\"token operator\">!</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.map'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span>\n            <span class=\"token operator\">!</span>resolver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isPublicRequest</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span>\n            <span class=\"token comment\">// skip internal client</span>\n            publicPath <span class=\"token operator\">!==</span> serverPluginClient_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">clientPublicPath</span> <span class=\"token operator\">&#x26;&#x26;</span>\n            <span class=\"token comment\">// need to rewrite for &#x3C;script>\\&#x3C;template> part in vue files</span>\n            <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.vue'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">vue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> utils_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readBody</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> cacheKey <span class=\"token operator\">=</span> publicPath <span class=\"token operator\">+</span> content<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> isHmrRequest <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">t</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isHmrRequest <span class=\"token operator\">&#x26;&#x26;</span> rewriteCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(cached) </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span> <span class=\"token operator\">=</span> rewriteCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">await</span> es_module_lexer_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">init</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// dynamic import may contain extension-less path,</span>\n                <span class=\"token comment\">// (.e.g import(runtimePathString))</span>\n                <span class=\"token comment\">// so we need to normalize importer to ensure it contains extension</span>\n                <span class=\"token comment\">// before we perform hmr analysis.</span>\n                <span class=\"token comment\">// on the other hand, static import is guaranteed to have extension</span>\n                <span class=\"token comment\">// because they must all have gone through module rewrite.</span>\n                <span class=\"token keyword\">const</span> importer <span class=\"token operator\">=</span> utils_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeUnRelatedHmrQuery</span><span class=\"token punctuation\">(</span>resolver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">normalizePublicPath</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span> <span class=\"token operator\">=</span> <span class=\"token function\">rewriteImports</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> importer<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isHmrRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    rewriteCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(skipped) </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>源代码的以协注释解释了该插件会重写<code>js</code>文件中模块导入，并且还特意提供了例子 \"vue\" => \"/@modules/vue\"，<code>import vue from 'vue'</code>这样的导入模块的代码将会被重写为<code>import vue from '@modules/vue</code>。</p>\n<p>可以看下具体的代码：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">rewriteImports</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> importer<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// #806 strip UTF-8 BOM</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0xfeff</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> imports <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// es-module-lerxer</span>\n            imports <span class=\"token operator\">=</span> es_module_lexer_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> hasHMR <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'import.meta.hot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> hasEnv <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'import.meta.env'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>imports<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">||</span> hasHMR <span class=\"token operator\">||</span> hasEnv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>importer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: rewriting</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">magic_string_1<span class=\"token punctuation\">.</span>default</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> hasReplaced <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> prevImportees <span class=\"token operator\">=</span> serverPluginHmr_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">importeeMap</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>importer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> currentImportees <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serverPluginHmr_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">importeeMap</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>importer<span class=\"token punctuation\">,</span> currentImportees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> imports<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> s<span class=\"token operator\">:</span> start<span class=\"token punctuation\">,</span> e<span class=\"token operator\">:</span> end<span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> dynamicIndex<span class=\"token punctuation\">,</span> ss<span class=\"token operator\">:</span> expStart<span class=\"token punctuation\">,</span> se<span class=\"token operator\">:</span> expEnd <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> imports<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">substring</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> hasViteIgnore <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token escape\">\\/</span><span class=\"token special-escape escape\">\\*</span><span class=\"token charclass class-name\">\\s</span><span class=\"token quantifier number\">*</span>@vite-ignore<span class=\"token charclass class-name\">\\s</span><span class=\"token quantifier number\">*</span><span class=\"token special-escape escape\">\\*</span><span class=\"token escape\">\\/</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// ...</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>dynamicIndex <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> hasLiteralDynamicId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// do not rewrite external imports</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>utils_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isExternalUrl</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword control-flow\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">const</span> resolved <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolveImport</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> importer<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>resolved <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">    \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" --> \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>resolved<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isOptimizedCjs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>dynamicIndex <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">const</span> exp <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">substring</span><span class=\"token punctuation\">(</span>expStart<span class=\"token punctuation\">,</span> expEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">const</span> replacement <span class=\"token operator\">=</span> <span class=\"token function\">transformCjsImport</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> resolved<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                s<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">overwrite</span><span class=\"token punctuation\">(</span>expStart<span class=\"token punctuation\">,</span> expEnd<span class=\"token punctuation\">,</span> replacement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>hasLiteralDynamicId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token comment\">// rewrite `import('package')`</span>\n                                s<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">overwrite</span><span class=\"token punctuation\">(</span>dynamicIndex<span class=\"token punctuation\">,</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">import('</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>resolved<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">').then(m=>m.default)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                            s<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">overwrite</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> hasLiteralDynamicId <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>resolved<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        hasReplaced <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">// save the import chain for hmr analysis</span>\n                    <span class=\"token keyword\">const</span> importee <span class=\"token operator\">=</span> utils_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cleanUrl</span><span class=\"token punctuation\">(</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>importee <span class=\"token operator\">!==</span> importer <span class=\"token operator\">&#x26;&#x26;</span>\n                        <span class=\"token comment\">// no need to track hmr client or module dependencies</span>\n                        importee <span class=\"token operator\">!==</span> serverPluginClient_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">clientPublicPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        currentImportees<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>importee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        serverPluginHmr_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">debugHmr</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>importer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> imports </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>importee<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        serverPluginHmr_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ensureMapEntry</span><span class=\"token punctuation\">(</span>serverPluginHmr_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">importerMap</span><span class=\"token punctuation\">,</span> importee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>importer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">!==</span> <span class=\"token string\">'import.meta'</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>hasViteIgnore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">warn</span><span class=\"token punctuation\">(</span>chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">yellow</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[vite] ignored dynamic import(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>importer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// ..</span>\n            <span class=\"token keyword control-flow\">return</span> hasReplaced <span class=\"token operator\">?</span> s<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> source<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>importer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: no imports found.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> source<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">resolveImport</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> importer<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    id <span class=\"token operator\">=</span> resolver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">alias</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>utils_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">bareImportRE</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// directly resolve bare module names to its entry path so that relative</span>\n        <span class=\"token comment\">// imports from it (including source map urls) can work correctly</span>\n        id <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/@modules/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>resolver_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolveBareModuleRequest</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> importer<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 1. relative to absolute</span>\n        <span class=\"token comment\">//    ./foo -> /some/path/foo</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> pathname<span class=\"token punctuation\">,</span> query <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> resolver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolveRelativeRequest</span><span class=\"token punctuation\">(</span>importer<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2. resolve dir index and extensions.</span>\n        pathname <span class=\"token operator\">=</span> resolver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">normalizePublicPath</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 3. mark non-src imports</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>query <span class=\"token operator\">&#x26;&#x26;</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>resolver_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">jsSrcRE</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            query <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?import</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        id <span class=\"token operator\">=</span> pathname <span class=\"token operator\">+</span> query<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 4. force re-fetch dirty imports by appending timestamp</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> dirtyFiles <span class=\"token operator\">=</span> serverPluginHmr_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">hmrDirtyFilesMap</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> cleanId <span class=\"token operator\">=</span> utils_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cleanUrl</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// only rewrite if:</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>dirtyFiles <span class=\"token operator\">&#x26;&#x26;</span> dirtyFiles<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>cleanId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 1. this is a marked dirty file (in the import chain of the changed file)</span>\n            id <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&#x26;</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">t=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>timestamp<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>serverPluginHmr_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">latestVersionsMap</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>cleanId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 2. this file was previously hot-updated and has an updated version</span>\n            id <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&#x26;</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">t=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>serverPluginHmr_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">latestVersionsMap</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>cleanId<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>代码总体大概的步骤：</p>\n<ol>\n<li>使用 <code>es-module-lexer</code> 解析 <code>js</code> 拿到 import 的内容</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword control-flow\">await</span> es_module_lexer_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">init</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\nimports <span class=\"token operator\">=</span> es_module_lexer_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">substring</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>判断 <code>import</code> 资源的路径是否是绝对路径，是的话是为<code>npm</code>的模块</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\nutils_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">bareImportRE</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>返回<code>vue</code>的模块导入路径 'vue' => '@modules/vue'，然后使用 <code>magic-string</code> 进行重写并返回结果</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> magic_string_1 <span class=\"token operator\">=</span> <span class=\"token function\">__importDefault</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"magic-string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">magic_string_1<span class=\"token punctuation\">.</span>default</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\ns<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">overwrite</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> hasLiteralDynamicId <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>resolved<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword control-flow\">return</span> hasReplaced <span class=\"token operator\">?</span> s<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> source<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span> <span class=\"token operator\">=</span> <span class=\"token function\">rewriteImports</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> importer<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h1 id=\"modulevuejs-在哪？\">@module/vue.js 在哪？</h1>\n<p>当浏览器发起请求<code>localhost:3000/@modules/vue.js</code>，会经过插件<code>moduleResolvePlugin</code>，下边是其完整的代码：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// plugin for resolving /@modules/:id requests.</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> moduleResolvePlugin<span class=\"token operator\">:</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ServerPlugin</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> root<span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">,</span> resolver <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> vueResolved <span class=\"token operator\">=</span> <span class=\"token function\">resolveVue</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>moduleRE<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// path maybe contain encode chars</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span>moduleRE<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">'js'</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">serve</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> file<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      moduleIdToFileMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n      moduleFileToIdMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getDebugPath</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword control-flow\">await</span> ctx<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">read</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// special handling for vue runtime in case it's not installed</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vueResolved<span class=\"token punctuation\">.</span><span class=\"token property-access\">isLocal</span> <span class=\"token operator\">&#x26;&#x26;</span> id <span class=\"token keyword\">in</span> vueResolved<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">serve</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>vueResolved <span class=\"token keyword module\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'non-local vue'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// already resolved and cached</span>\n    <span class=\"token keyword\">const</span> cachedPath <span class=\"token operator\">=</span> moduleIdToFileMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>cachedPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">serve</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> cachedPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'cached'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// resolve from vite optimized modules</span>\n    <span class=\"token keyword\">const</span> optimized <span class=\"token operator\">=</span> <span class=\"token function\">resolveOptimizedModule</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>optimized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">serve</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> optimized<span class=\"token punctuation\">,</span> <span class=\"token string\">'optimized'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> referer <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'referer'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> importer<span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword nil\">undefined</span>\n    <span class=\"token comment\">// this is a map file request from browser dev tool</span>\n    <span class=\"token keyword\">const</span> isMapFile <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.map'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>referer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      importer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>referer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pathname</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isMapFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// for some reason Chrome doesn't provide referer for source map requests.</span>\n      <span class=\"token comment\">// do our best to reverse-infer the importer.</span>\n      importer <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>map<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> importerFilePath <span class=\"token operator\">=</span> importer <span class=\"token operator\">?</span> resolver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">requestToFile</span><span class=\"token punctuation\">(</span>importer<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> root\n    <span class=\"token comment\">// #829 node package has sub-package(has package.json), should check it before `resolveNodeModuleFile`</span>\n    <span class=\"token keyword\">const</span> nodeModuleInfo <span class=\"token operator\">=</span> <span class=\"token function\">resolveNodeModule</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>nodeModuleInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">serve</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> nodeModuleInfo<span class=\"token punctuation\">.</span><span class=\"token property-access\">entryFilePath</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> nodeModuleFilePath <span class=\"token operator\">=</span> <span class=\"token function\">resolveNodeModuleFile</span><span class=\"token punctuation\">(</span>importerFilePath<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>nodeModuleFilePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">serve</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> nodeModuleFilePath<span class=\"token punctuation\">,</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isMapFile <span class=\"token operator\">&#x26;&#x26;</span> importer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// the resolveNodeModuleFile doesn't work with linked pkg</span>\n      <span class=\"token comment\">// our last try: infer from the dir of importer</span>\n      <span class=\"token keyword\">const</span> inferMapPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dirname</span><span class=\"token punctuation\">(</span>importerFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">basename</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">existsSync</span><span class=\"token punctuation\">(</span>inferMapPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">serve</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> inferMapPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'map file in linked pkg'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>\n      chalk<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">red</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[vite] Failed to resolve module import \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\". </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(imported by </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>importer <span class=\"token operator\">||</span> <span class=\"token string\">'unknown'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">=</span> <span class=\"token number\">404</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>查看注释发现下边代码：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">serve</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> file<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    moduleIdToFileMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n    moduleFileToIdMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">path</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getDebugPath</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">await</span> ctx<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">read</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token comment\">// resolve from vite optimized modules</span>\n<span class=\"token keyword\">const</span> optimized <span class=\"token operator\">=</span> <span class=\"token function\">resolveOptimizedModule</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>optimized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">serve</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> optimized<span class=\"token punctuation\">,</span> <span class=\"token string\">'optimized'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>通过<code>serve</code>函数可以猜测一下 <code>const optimized</code> 应该是返回的是文件的路径，找到<code>resolveOptimizedModule</code>函数：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">resolveOptimizedModule</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">root<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> string</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword nil\">undefined</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cacheKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>root<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">const</span> cached <span class=\"token operator\">=</span> viteOptimizedMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>cached<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> cached\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> cacheDir <span class=\"token operator\">=</span> <span class=\"token function\">resolveOptimizedCacheDir</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cacheDir<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tryResolve</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">file<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    file <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>cacheDir<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">existsSync</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">statSync</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      viteOptimizedMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword control-flow\">return</span> file\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">tryResolve</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">tryResolve</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>果然如此，返回的就是文件的路径。</p>\n<p>接下来，找下<code>const cacheDir = resolveOptimizedCacheDir(root)</code>中的<code>resolveOptimizedCacheDir</code>看下文件目录</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">OPTIMIZE_CACHE_DIR</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">node_modules/.vite_opt_cache</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">resolveOptimizedCacheDir</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">root<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  pkgPath<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword null nil\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cached <span class=\"token operator\">=</span> cacheDirCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>cached <span class=\"token operator\">!==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> cached\n  pkgPath <span class=\"token operator\">=</span> pkgPath <span class=\"token operator\">||</span> <span class=\"token function\">lookupFile</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">package.json</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* pathOnly */</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pkgPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword null nil\">null</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> cacheDir <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dirname</span><span class=\"token punctuation\">(</span>pkgPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OPTIMIZE_CACHE_DIR</span><span class=\"token punctuation\">)</span>\n  cacheDirCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> cacheDir<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> cacheDir\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>发现文件目录是<code>node_modules/.vite_opt_cache</code>。</p>\n<p>打开对应目录查可以看到对应的文件<code>vue.js</code>：</p>\n<p><img src=\"/images/vite-es-modules-tree.png\" alt=\"\"></p>\n<p>之后就简单了，<code>serve</code>函数将会使用<code>ctx.read</code>也就是<code>cachedRead</code>读取文件，然后缓存，然后返回结果。具体的代码我也贴一下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\"> * Read a file with in-memory cache.</span>\n<span class=\"token doc-comment comment\"> * Also sets appropriate headers and body on the Koa context.</span>\n<span class=\"token doc-comment comment\"> * This is exposed on middleware context as `ctx.read` with the `ctx` already</span>\n<span class=\"token doc-comment comment\"> * bound, so it can be used as `ctx.read(file)`.</span>\n<span class=\"token doc-comment comment\"> */</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">cachedRead</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">ctx<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Context</span> <span class=\"token operator\">|</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n  file<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  poll <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Buffer</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lastModified <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">statSync</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">mtimeMs</span>\n  <span class=\"token keyword\">const</span> cached <span class=\"token operator\">=</span> fsReadCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'no-cache'</span><span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">=</span> mime<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lookup</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'application/octet-stream'</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>cached <span class=\"token operator\">&#x26;&#x26;</span> cached<span class=\"token punctuation\">.</span><span class=\"token property-access\">lastModified</span> <span class=\"token operator\">===</span> lastModified<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// a private marker in case the user ticks \"disable cache\" during dev</span>\n      ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">__notModified</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">etag</span> <span class=\"token operator\">=</span> cached<span class=\"token punctuation\">.</span><span class=\"token property-access\">etag</span>\n      ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">lastModified</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>cached<span class=\"token punctuation\">.</span><span class=\"token property-access\">lastModified</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'If-None-Match'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">etag</span> <span class=\"token operator\">&#x26;&#x26;</span> seenUrls<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">=</span> <span class=\"token number\">304</span>\n      <span class=\"token punctuation\">}</span>\n      seenUrls<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">)</span>\n      ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span> <span class=\"token operator\">=</span> cached<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> cached<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// #395 some file is an binary file, eg. font</span>\n  <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>poll <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>content<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">untilModified</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n    content <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Populate the \"sourcesContent\" array and resolve relative paths in the</span>\n  <span class=\"token comment\">// \"sources\" array, so the debugger can trace back to the original source.</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.map'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> map<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">RawSourceMap</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map<span class=\"token punctuation\">.</span><span class=\"token property-access\">sourcesContent</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>map<span class=\"token punctuation\">.</span><span class=\"token property-access\">sources</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">every</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token property-access\">isAbsolute</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> sourcesContent <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token property-access\">sourcesContent</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> sourceRoot <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dirname</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span><span class=\"token property-access\">sourceRoot</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token property-access\">sources</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token property-access\">sources</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> originalPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>sourceRoot<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sourcesContent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n              sourcesContent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">cachedRead</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> originalPath<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span> <span class=\"token operator\">===</span> <span class=\"token string\">'ENOENT'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>\n                  chalk<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">red</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[vite] Sourcemap \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>file<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" points to non-existent source: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>originalPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span>\n                  <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword control-flow\">return</span> source\n              <span class=\"token punctuation\">}</span>\n              <span class=\"token keyword control-flow\">throw</span> err\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword control-flow\">return</span> originalPath\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token property-access\">sourcesContent</span> <span class=\"token operator\">=</span> sourcesContent\n      content <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Buffer</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> etag <span class=\"token operator\">=</span> <span class=\"token function\">getETag</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n  fsReadCache<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">,</span>\n    etag<span class=\"token punctuation\">,</span>\n    lastModified\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">etag</span> <span class=\"token operator\">=</span> etag\n    ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">lastModified</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>lastModified<span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span> <span class=\"token operator\">=</span> content\n    ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\n    <span class=\"token comment\">// watch the file if it's out of root.</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> root<span class=\"token punctuation\">,</span> watcher <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ctx\n    <span class=\"token function\">watchFileIfOutOfRoot</span><span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> content\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h1 id=\"modulesvuejs-是何时生成的？\">@modules/vue.js 是何时生成的？</h1>\n<p>在创建 vite server 的代码的时候，<code>createServer</code>会重新<code>server.listen</code>方法</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token property-access\">listen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">port<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>optimizeDeps<span class=\"token punctuation\">.</span><span class=\"token property-access\">auto</span> <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../optimizer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">optimizeDeps</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword control-flow\">return</span> server<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>没错，<code>vue.js</code>这一类的npm模块就是在<code>optimizeDeps</code>内进行打包输出到<code>node_modules/.vite_opt_cache</code>，找到 <code>optimizeDeps</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">optimizeDeps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">,</span> asCommand <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> asCommand <span class=\"token operator\">?</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span> <span class=\"token operator\">:</span> debug<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">root</span> <span class=\"token operator\">||</span> process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// warn presence of web_modules</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">existsSync</span><span class=\"token punctuation\">(</span>path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">'web_modules'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">warn</span><span class=\"token punctuation\">(</span>chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">yellow</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[vite] vite 0.15 has built-in dependency pre-bundling and resolving </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">from web_modules is no longer supported.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> pkgPath <span class=\"token operator\">=</span> utils_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lookupFile</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">package.json</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* pathOnly */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pkgPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">package.json not found. Skipping.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> cacheDir <span class=\"token operator\">=</span> <span class=\"token function\">resolveOptimizedCacheDir</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> pkgPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> hashPath <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>cacheDir<span class=\"token punctuation\">,</span> <span class=\"token string\">'hash'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> depHash <span class=\"token operator\">=</span> <span class=\"token function\">getDepHash</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">__path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span><span class=\"token property-access\">force</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> prevhash<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n            prevhash <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFile</span><span class=\"token punctuation\">(</span>hashPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// hash is consistent, no need to re-bundle</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>prevhash <span class=\"token operator\">===</span> depHash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hash is consistent. Skipping. Use --force to override.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">remove</span><span class=\"token punctuation\">(</span>cacheDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ensureDir</span><span class=\"token punctuation\">(</span>cacheDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">optimizeDeps</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> resolver <span class=\"token operator\">=</span> resolver_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createResolver</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">resolvers</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">alias</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">assetsInclude</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Determine deps to optimize. The goal is to only pre-bundle deps that falls</span>\n    <span class=\"token comment\">// under one of the following categories:</span>\n    <span class=\"token comment\">// 1. Has imports to relative files (e.g. lodash-es, lit-html)</span>\n    <span class=\"token comment\">// 2. Has imports to bare modules that are not in the project's own deps</span>\n    <span class=\"token comment\">//    (i.e. esm that imports its own dependencies, e.g. styled-components)</span>\n    <span class=\"token keyword control-flow\">await</span> es_module_lexer_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">init</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> qualified<span class=\"token punctuation\">,</span> external <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">resolveQualifiedDeps</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Resolve deps from linked packages in a monorepo</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span><span class=\"token property-access\">link</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        options<span class=\"token punctuation\">.</span><span class=\"token property-access\">link</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">linkedDep</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> depRoot <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dirname</span><span class=\"token punctuation\">(</span>utils_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolveFrom</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>linkedDep<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/package.json</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> qualified<span class=\"token operator\">:</span> q<span class=\"token punctuation\">,</span> external<span class=\"token operator\">:</span> e <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">resolveQualifiedDeps</span><span class=\"token punctuation\">(</span>depRoot<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>qualified<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    qualified<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>external<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    external<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Force included deps - these can also be deep paths</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span><span class=\"token property-access\">include</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        options<span class=\"token punctuation\">.</span><span class=\"token property-access\">include</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> pkg <span class=\"token operator\">=</span> resolver_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolveNodeModule</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>pkg <span class=\"token operator\">&#x26;&#x26;</span> pkg<span class=\"token punctuation\">.</span><span class=\"token property-access\">entryFilePath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                qualified<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pkg<span class=\"token punctuation\">.</span><span class=\"token property-access\">entryFilePath</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> resolver_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolveNodeModuleFile</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    qualified<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> filePath<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>qualified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">writeFile</span><span class=\"token punctuation\">(</span>hashPath<span class=\"token punctuation\">,</span> depHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">No listed dependency requires optimization. Skipping.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>asCommand<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// This is auto run on server start - let the user know that we are</span>\n        <span class=\"token comment\">// pre-optimizing deps</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">greenBright</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[vite] Optimizable dependencies detected:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>qualified<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">yellow</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">, </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> spinner<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> asCommand\n        <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Pre-bundling dependencies to speed up dev server page load...</span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Pre-bundling them to speed up dev server page load...\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(this will be run only when your dependencies have changed)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEBUG</span> <span class=\"token operator\">||</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        spinner <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ora'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pluginsPreBuild<span class=\"token punctuation\">,</span> pluginsPostBuild<span class=\"token punctuation\">,</span> pluginsOptimizer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rollupInputOptions <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">rollupInputOptions</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> rollup <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rollup'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> bundle <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> rollup<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">rollup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            input<span class=\"token operator\">:</span> qualified<span class=\"token punctuation\">,</span>\n            external<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// treeshake: { moduleSideEffects: 'no-external' },</span>\n            onwarn<span class=\"token operator\">:</span> build_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onRollupWarning</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token spread operator\">...</span>rollupInputOptions<span class=\"token punctuation\">,</span>\n            plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                pluginAssets_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createDepAssetExternalPlugin</span><span class=\"token punctuation\">(</span>resolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                entryAnalysisPlugin_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entryAnalysisPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> build_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createBaseRollupPlugins</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                pluginAssets_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createDepAssetPlugin</span><span class=\"token punctuation\">(</span>resolver<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token spread operator\">...</span>pluginsOptimizer\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> output <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> bundle<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token spread operator\">...</span>config<span class=\"token punctuation\">.</span><span class=\"token property-access\">rollupOutputOptions</span><span class=\"token punctuation\">,</span>\n            format<span class=\"token operator\">:</span> <span class=\"token string\">'es'</span><span class=\"token punctuation\">,</span>\n            exports<span class=\"token operator\">:</span> <span class=\"token string\">'named'</span><span class=\"token punctuation\">,</span>\n            entryFileNames<span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n            chunkFileNames<span class=\"token operator\">:</span> <span class=\"token string\">'common/[name]-[hash].js'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        spinner <span class=\"token operator\">&#x26;&#x26;</span> spinner<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk <span class=\"token keyword\">of</span> output<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'chunk'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">fileName</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>cacheDir<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ensureDir</span><span class=\"token punctuation\">(</span>path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dirname</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">writeFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'asset'</span> <span class=\"token operator\">&#x26;&#x26;</span> chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">fileName</span> <span class=\"token operator\">===</span> <span class=\"token string\">'_analysis.json'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>cacheDir<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">fileName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">writeFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">source</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">writeFile</span><span class=\"token punctuation\">(</span>hashPath<span class=\"token punctuation\">,</span> depHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        spinner <span class=\"token operator\">&#x26;&#x26;</span> spinner<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>asCommand<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">red</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\n[vite] Dep optimization failed with error:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">red</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span> <span class=\"token operator\">===</span> <span class=\"token string\">'PARSE_ERROR'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cyan</span><span class=\"token punctuation\">(</span>path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">relative</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">loc</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dim</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">frame</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Node built-in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">yellow</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Tip:\\nMake sure your \"dependencies\" only include packages that you\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">intend to use in the browser. If it's a Node.js package, it\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">should be in \"devDependencies\".\\n\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">If you do intend to use this dependency in the browser and the\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">dependency does not actually use these Node built-ins in the\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">browser, you can add the dependency (not the built-in) to the\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"optimizeDeps.allowNodeBuiltins\" option in vite.config.js.\\n\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">If that results in a runtime error, then unfortunately the\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">package is not distributed in a web-friendly format. You should\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">open an issue in its repo, or look for a modern alternative.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// TODO link to docs once we have it</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>resolveQualifiedDeps</code>函数将获取需要rollup处理的依赖，其获取依赖的逻辑如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">resolveQualifiedDeps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> resolver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> include<span class=\"token punctuation\">,</span> exclude<span class=\"token punctuation\">,</span> link <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> pkgContent <span class=\"token operator\">=</span> utils_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lookupFile</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'package.json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pkgContent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n            qualified<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            external<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> pkg <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>pkgContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> deps <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>pkg<span class=\"token punctuation\">.</span><span class=\"token property-access\">dependencies</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> qualifiedDeps <span class=\"token operator\">=</span> deps<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>include <span class=\"token operator\">&#x26;&#x26;</span> include<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// already force included</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>exclude <span class=\"token operator\">&#x26;&#x26;</span> exclude<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">skipping </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (excluded)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>link <span class=\"token operator\">&#x26;&#x26;</span> link<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">skipping </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (link)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">KNOWN_IGNORE_LIST</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">skipping </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (internal excluded)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// #804</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@types/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">skipping </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (ts declaration)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> pkgInfo <span class=\"token operator\">=</span> resolver_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolveNodeModule</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pkgInfo <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>pkgInfo<span class=\"token punctuation\">.</span><span class=\"token property-access\">entryFilePath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">skipping </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (cannot resolve entry)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">yellow</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[vite] cannot resolve entry for dependency </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cyan</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> entryFilePath <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> pkgInfo<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>resolver_1<span class=\"token punctuation\">.</span><span class=\"token property-access\">supportedExts</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>entryFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">skipping </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (entry is not js)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">existsSync</span><span class=\"token punctuation\">(</span>entryFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">skipping </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (entry file does not exist)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>chalk_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">yellow</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[vite] dependency </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> declares non-existent entry file </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>entryFilePath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span>entryFilePath<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>imports<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> es_module_lexer_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">export<span class=\"token charclass class-name\">\\s</span><span class=\"token quantifier number\">+</span><span class=\"token special-escape escape\">\\*</span><span class=\"token charclass class-name\">\\s</span><span class=\"token quantifier number\">+</span>from</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">optimizing </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (no exports, likely commonjs)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> s<span class=\"token punctuation\">,</span> e <span class=\"token punctuation\">}</span> <span class=\"token keyword\">of</span> imports<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">=</span> resolver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">alias</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">optimizing </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (contains relative imports)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>deps<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">optimizing </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (imports sub dependencies)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">skipping </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (single esm file, doesn't need optimization)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> qualified <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    qualifiedDeps<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        qualified<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> resolver_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolveNodeModule</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">entryFilePath</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// mark non-optimized deps as external</span>\n    <span class=\"token keyword\">const</span> external <span class=\"token operator\">=</span> deps\n        <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">!</span>qualifiedDeps<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// make sure aliased deps are external</span>\n        <span class=\"token comment\">// https://github.com/vitejs/vite-plugin-react/issues/4</span>\n        <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> resolver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">alias</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        qualified<span class=\"token punctuation\">,</span>\n        external\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>首先去根目录的<code>package.json</code>中找其<code>dependencies</code></li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> deps <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>pkg<span class=\"token punctuation\">.</span><span class=\"token property-access\">dependencies</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n<li>遍历获取每个依赖的信息<code>pkgInfo</code></li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pkgInfo <span class=\"token operator\">=</span> resolver_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolveNodeModule</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n<li>使用 es-module-lexer 去获取每个依赖的相关依赖</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> qualifiedDeps <span class=\"token operator\">=</span> deps<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> entryFilePath <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> pkgInfo<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>imports<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> es_module_lexer_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> s<span class=\"token punctuation\">,</span> e <span class=\"token punctuation\">}</span> <span class=\"token keyword\">of</span> imports<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i <span class=\"token operator\">=</span> resolver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">alias</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">optimizing </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (contains relative imports)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>deps<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">optimizing </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (imports sub dependencies)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n</code></pre></div>\n<ul>\n<li>返回所有的依赖的路径</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> qualified <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nqualifiedDeps<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    qualified<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> resolver_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolveNodeModule</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">entryFilePath</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    qualified<span class=\"token punctuation\">,</span>\n    external\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>比如:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  qualified<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>vue<span class=\"token operator\">:</span><span class=\"token string\">'/mnt/c/Users/zpo/learning-vue3x/node_modules/vue/dist/vue.runtime.esm-bundler.js'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最后，使用 rollup 对收集的依赖进行打包并输出到 <code>node_modules/.vite_opt_cache</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> cacheDir <span class=\"token operator\">=</span> <span class=\"token function\">resolveOptimizedCacheDir</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> pkgPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> rollup <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rollup'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> bundle <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> rollup<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">rollup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        input<span class=\"token operator\">:</span> qualified<span class=\"token punctuation\">,</span>\n        external<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// treeshake: { moduleSideEffects: 'no-external' },</span>\n        onwarn<span class=\"token operator\">:</span> build_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onRollupWarning</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token spread operator\">...</span>rollupInputOptions<span class=\"token punctuation\">,</span>\n        plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            pluginAssets_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createDepAssetExternalPlugin</span><span class=\"token punctuation\">(</span>resolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            entryAnalysisPlugin_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entryAnalysisPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token spread operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> build_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createBaseRollupPlugins</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            pluginAssets_1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createDepAssetPlugin</span><span class=\"token punctuation\">(</span>resolver<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token spread operator\">...</span>pluginsOptimizer\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> output <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> bundle<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token spread operator\">...</span>config<span class=\"token punctuation\">.</span><span class=\"token property-access\">rollupOutputOptions</span><span class=\"token punctuation\">,</span>\n        format<span class=\"token operator\">:</span> <span class=\"token string\">'es'</span><span class=\"token punctuation\">,</span>\n        exports<span class=\"token operator\">:</span> <span class=\"token string\">'named'</span><span class=\"token punctuation\">,</span>\n        entryFileNames<span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n        chunkFileNames<span class=\"token operator\">:</span> <span class=\"token string\">'common/[name]-[hash].js'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    spinner <span class=\"token operator\">&#x26;&#x26;</span> spinner<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk <span class=\"token keyword\">of</span> output<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'chunk'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">fileName</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>cacheDir<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ensureDir</span><span class=\"token punctuation\">(</span>path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dirname</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">writeFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'asset'</span> <span class=\"token operator\">&#x26;&#x26;</span> chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">fileName</span> <span class=\"token operator\">===</span> <span class=\"token string\">'_analysis.json'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>cacheDir<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">fileName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">writeFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span><span class=\"token property-access\">source</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">await</span> fs_extra_1<span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">writeFile</span><span class=\"token punctuation\">(</span>hashPath<span class=\"token punctuation\">,</span> depHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n",
    "frontmatter": {
      "title": "vite 原理解析(2)-重写npm模块和@modules",
      "date": "2020-09-18"
    },
    "toc": "<ul>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">环境准备</a></li>\n<li><a href=\"#es-modules\">ES modules</a></li>\n<li><a href=\"#%E9%87%8D%E5%86%99%E4%BE%9D%E8%B5%96%E8%B7%AF%E5%BE%84---modules\">重写依赖路径 -> @modules</a></li>\n<li><a href=\"#modulevuejs-%E5%9C%A8%E5%93%AA%EF%BC%9F\">@module/vue.js 在哪？</a></li>\n<li><a href=\"#modulesvuejs-%E6%98%AF%E4%BD%95%E6%97%B6%E7%94%9F%E6%88%90%E7%9A%84%EF%BC%9F\">@modules/vue.js 是何时生成的？</a></li>\n</ul>\n",
    "name": "vite 原理解析(2)-重写npm模块和@modules",
    "id": "81022b0d239d20f20c696c37083cc328",
    "prev": {
      "name": "vite 原理解析(1)-vite命令做了什么",
      "id": "20520b7394c04937472b75071f39853b"
    },
    "next": {
      "name": "一些关于Git的内容",
      "id": "9d416bfd8ea5d650c625f97e4f7839c6"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/一些关于Git的内容.md",
      "/home/zepang/WorkSpace/blog/posts/一些关于Git的内容.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"概述\">概述</h1>\n<p>这篇文章的目的是帮助大家了解并快速上手使用git，整理了一些我觉得需要了解的内容，篇幅不长，没有什么特别深入的内容，主要涉及以下三个方面的内容：</p>\n<ul>\n<li>\n<p>基本使用和三个分区概念</p>\n</li>\n<li>\n<p>git如何保存信息</p>\n</li>\n<li>\n<p>git的常用命令和使用场景</p>\n</li>\n</ul>\n<p>如果需要比较全面的了解git的内容可以查看官方提供的文档。</p>\n<h2 id=\"基本使用和三个分区概念\">基本使用和三个分区概念</h2>\n<p>对于经常使用git的开发，在一天的工作中，至少会重复若干次下边的流程</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">git init // 在当前目录下初始化一个git版本库，该命令会在当前目录下生成一个`.git`目录\n\n\n\n// 在当前目录中添加一些文件或者修改一些文件\n\n\n\ngit add . // 将当前工作区的所有内容进行暂存\n\n\n\ngit commit -m &#x26;#39;update&#x26;#39; // 将暂存的内容提交到版本库，并添加描述信息\n\n\n\ngit push origin branch-name // 将代码提交到远程的代码仓库</code></pre></div>\n<p>对于一些初学者想要不靠死记硬背记住上边的commit流程，你需要知道git的三个分区。</p>\n<p>git的本地数据管理大概可以分为三个分区：</p>\n<ul>\n<li>\n<p>工作区（Working Directory）</p>\n<p>通常就是指我们的文件目录或者项目目录</p>\n</li>\n<li>\n<p>暂存区（Stage）</p>\n<p>git在工作目录和版本库之间加设了一层索引（index），用 来暂存（stage）、收集或者修改</p>\n</li>\n<li>\n<p>版本库（History）</p>\n<p>用来存放每一次提交的快照</p>\n</li>\n</ul>\n<p>在工作中，为了协作开发或者代码代码管理，通常我们还会使用<code>git push</code>命令将版本库的数据提交到远程的仓库。</p>\n<p>以下图片来自网络</p>\n<p><img src=\"/images/git-three-part.jpg\" alt=\"三个分区\"></p>\n<p>如果还想要更加深入的了解<code>git add</code>，<code>git commit</code>都发生了什么，那么你需要知道git大概是如何存储信息的。</p>\n<h2 id=\"git如何存储信息\">git如何存储信息</h2>\n<p>git版本库你可以认为是一个简单的数据库，git主要维护两个主要的数据结构：对象库和索引。</p>\n<p>对象库包含你的原始数据文件和所 有日志消息、作者信息、日期，以及其他用来重建项目任意版本或分 支的信息。</p>\n<p>索引描述整个版本库的目录结构。</p>\n<p>我们还是结合一下实际的案例来说明吧。</p>\n<p>初始化一个Git的版本库，然后创建两个文件，分别在文件中添加一些内容。</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> init \n\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"console.log('app')\"</span> <span class=\"token operator\">></span> app.js\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"console.log('app')\"</span> <span class=\"token operator\">></span> index.js\n\n\ntree\n<span class=\"token builtin class-name\">.</span>\n├── app.js\n└── index.js\n</code></pre></div>\n<p>使用<code>git add .</code>命令将文件添加到暂存区，这个时候会创建索引。</p>\n<p>我们可以通过<code>git status</code>和<code>git ls-files</code>命令来查看索引的状态和目录：</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> status\nOn branch master\n\n\nNo commits yet\n\n\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git rm --cached &#x3C;file>...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n\n        new file:   app.js\n        new file:   index.js\n\n\n<span class=\"token function\">git</span> ls-files --stage\n<span class=\"token number\">100644</span> fe6b72dcf87d057d45129f5cf281c1cb6277a010 <span class=\"token number\">0</span>       app.js\n<span class=\"token number\">100644</span> 7f7cc294ff052479b84bd1c13a510a616588af8e <span class=\"token number\">0</span>       index.js\n</code></pre></div>\n<p>那么为什么需要通过<code>git add</code>命令建立索引？</p>\n<p>是因为当执行git commit命令的时候，Git会通过检查索引而不是工作目录来找到提交的内容</p>\n<p>如果你没有先使用<code>git add</code>添加索引，那么执行commit的时候你会收到下边的提示</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">nothing to commit, working tree clean</code></pre></div>\n<h2 id=\"objects目录\">objects目录</h2>\n<p>使用<code>git init</code>命令初始化版本库的时候，实际上会在工作目录中创建一个<code>.git</code>的文件目录</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">tree -L <span class=\"token number\">1</span> .git\n\n\n.git\n├── COMMIT_EDITMSG\n├── FETCH_HEAD\n├── HEAD\n├── ORIG_HEAD\n├── config\n├── description\n├── hooks\n├── index\n├── info\n├── logs\n├── objects\n├── packed-refs\n└── refs\n</code></pre></div>\n<p>上边运行的<code>git add .</code>命令会在<code>.git/objects</code>目录下创建两个目录文件，用于保存文件的信息，通过<code>tree</code>命令可以查看到对应的文件</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">tree .git/objects\n\n\n.git/objects\n├── 7f\n│   └── 7cc294ff052479b84bd1c13a510a616588af8e\n├── fe\n│   └── 6b72dcf87d057d45129f5cf281c1cb6277a010\n├── info\n└── pack\n</code></pre></div>\n<h2 id=\"git对象\">git对象</h2>\n<p>之前提到了对象库，这里说明一下git的对象的内容。</p>\n<p>git提供了<code>cat-file</code>命令查看对象的类型对象内容，</p>\n<p>git的对象库包含4种对象：</p>\n<ul>\n<li>块 blob</li>\n<li>目录树 tree</li>\n<li>提交 commit</li>\n<li>标签 tag</li>\n</ul>\n<p>每个对象都会有一个40位的十六进制数组成的可寻址的内容名称，这个值是向对象的内容应用SHA1得到的散列值，这个散列值唯一有效且完全由对象内容决定。</p>\n<p><code>git add</code>会在<code>.git/objects</code>目录下创建<code>blob</code>对象，就是上面提到的两个目录文件。</p>\n<p>使用<code>git cat-file</code>命令可以查看到对象的类型和内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> caf-file -t fe6b72dcf87d057d45129f5cf281c1cb6277a010\nblob\n<span class=\"token function\">git</span> caf-file -t 7f7cc294ff052479b84bd1c13a510a616588af8e\nblob\n\n\n<span class=\"token function\">git</span> caf-file -p fe6b72dcf87d057d45129f5cf281c1cb6277a010\nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">git</span> caf-file -p 7f7cc294ff052479b84bd1c13a510a616588af8e\nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>接下来，将暂存区的内容提交到版本库</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> commit -m <span class=\"token string\">'update'</span>\n\n\n<span class=\"token punctuation\">[</span>master <span class=\"token punctuation\">(</span>root-commit<span class=\"token punctuation\">)</span> 65fdbfb<span class=\"token punctuation\">]</span> update\n <span class=\"token number\">2</span> files changed, <span class=\"token number\">2</span> insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>\n create mode <span class=\"token number\">100644</span> app.js\n create mode <span class=\"token number\">100644</span> index.js\n\n\ntree .git/objects/\n\n\n.git/objects/\n├── <span class=\"token number\">65</span>\n│   └── fdbfbfd99f20a3d792fd2c5951324afde1b8f1\n├── 6d\n│   └── 5e4e2a71c52c661a19b8268384fd7093405f10\n├── 7f\n│   └── 7cc294ff052479b84bd1c13a510a616588af8e\n├── fe\n│   └── 6b72dcf87d057d45129f5cf281c1cb6277a010\n├── info\n└── pack\n</code></pre></div>\n<p><code>git commit</code>命令会在<code>.git/objects</code>目录下创建<code>tree</code>对象和<code>commit</code>对象</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> cat-file -t 6d5e4e2a71c52c661a19b8268384fd7093405f10\ntree\n\n\n<span class=\"token function\">git</span> cat-file -t 65fdbfbfd99f20a3d792fd2c5951324afde1b8f1\ncommit\n</code></pre></div>\n<h2 id=\"git对象关系\">git对象关系</h2>\n<p>我从《git版本管理》一书中截取了一张图，用来说明git对象的关系：</p>\n<p><img src=\"/images/git-object.png\" alt=\"\"></p>\n<p>下边是tree对象里边的内容：</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> cat-file -p 6d5e4e2a71c52c661a19b8268384fd7093405f10\n<span class=\"token number\">100644</span> blob fe6b72dcf87d057d45129f5cf281c1cb6277a010    app.js\n<span class=\"token number\">100644</span> blob 7f7cc294ff052479b84bd1c13a510a616588af8e    index.js\n</code></pre></div>\n<ul>\n<li>100644 是文件的读写权限属性，熟悉chmod的人应该比较熟悉</li>\n<li>blob fe6b72dcf87d057d45129f5cf281c1cb6277a010 blob的对象名</li>\n<li>app.js 与blob关联的文件名字</li>\n</ul>\n<p>然后再来看看commit的内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> cat-file -p 65fdbfbfd99f20a3d792fd2c5951324afde1b8f1\ntree 6d5e4e2a71c52c661a19b8268384fd7093405f10\nauthor zepang <span class=\"token operator\">&#x3C;</span>ummlq4@gmail.com<span class=\"token operator\">></span> <span class=\"token number\">1577961062</span> +0800\ncommitter zepang <span class=\"token operator\">&#x3C;</span>ummlq4@gmail.com<span class=\"token operator\">></span> <span class=\"token number\">1577961062</span> +0800\n\n\nupdate\n</code></pre></div>\n<ul>\n<li>tree 6d5e4e2a71c52c661a19b8268384fd7093405f10 标识关联文件的树对象的名称</li>\n<li>author zepang <a href=\"mailto:ummlq4@gmail.com\">ummlq4@gmail.com</a> 1577961062 +0800 作者的名字和创作的时间</li>\n<li>committer zepang <a href=\"mailto:ummlq4@gmail.com\">ummlq4@gmail.com</a> 1577961062 +0800 把新版本放到版本库的人（提交者）的名字和提交的时间</li>\n<li>update 对本次修订原因的说明（提交消息）</li>\n</ul>\n<p>当前HEAD指向的是master分支，可以直接查看<code>.git/refs/head/master</code>中保存的对象名称</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">cat</span> .git/refs/head/master\n\n\n65fdbfbfd99f20a3d792fd2c5951324afde1b8f1 // 是当前的commit对象\n</code></pre></div>\n<p>所以，案例中blob，tree，commit这几个对象的图示关系应为：</p>\n<p><img src=\"/images/git-object-relation-1.png\" alt=\"\"></p>\n<p>接下来我们修改一下app.js的内容，并作为一次提交，然后在看看<code>.git/objects</code>的内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> count-objects\n<span class=\"token number\">7</span> objects, <span class=\"token number\">0</span> kilobytes\n\n\ntree .git/objects/\n\n\n.git/objects/\n├── <span class=\"token number\">13</span>\n│   └── 7c5ad58c117d04cd09ba0adfcc0f15beb5f59d\n├── <span class=\"token number\">65</span>\n│   └── fdbfbfd99f20a3d792fd2c5951324afde1b8f1\n├── 6d\n│   └── 5e4e2a71c52c661a19b8268384fd7093405f10\n├── 7f\n│   └── 7cc294ff052479b84bd1c13a510a616588af8e\n├── ea\n│   └── 61ada05f2a3bcfda48230d8f511decf026b367\n├── f6\n│   └── 8afe902f9b946699ee61f7177461ef311b1134\n├── fe\n│   └── 6b72dcf87d057d45129f5cf281c1cb6277a010\n├── info\n└── pack\n</code></pre></div>\n<p>发现多出了3个对象。</p>\n<p>由之前的内容我们得知，commit对象里包含tree对象的信息，tree对象里边包含blob对象信息，所以这次直接从commit对象开始查看，找出多出的对象和对象之间的关系。</p>\n<p>通过<code>git log</code>命令拿到最新的commit 名称为<code>f68afe902f9b946699ee61f7177461ef311b1134</code>，值与之前不一样，所以是一个新的对象</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> cat-file -p f68afe902f9b946699ee61f7177461ef311b1134\ntree 137c5ad58c117d04cd09ba0adfcc0f15beb5f59d // 新对象\nparent 65fdbfbfd99f20a3d792fd2c5951324afde1b8f1\nauthor zepang <span class=\"token operator\">&#x3C;</span>ummlq4@gmail.com<span class=\"token operator\">></span> <span class=\"token number\">1578018373</span> +0800\ncommitter zepang <span class=\"token operator\">&#x3C;</span>ummlq4@gmail.com<span class=\"token operator\">></span> <span class=\"token number\">1578018373</span> +0800\n\n\nmodify\n\n\n<span class=\"token function\">git</span> cat-file -p 137c5ad58c117d04cd09ba0adfcc0f15beb5f59d\n<span class=\"token number\">100644</span> blob ea61ada05f2a3bcfda48230d8f511decf026b367    app.js // 新对象\n<span class=\"token number\">100644</span> blob 7f7cc294ff052479b84bd1c13a510a616588af8e    index.js // 之前的对象\n\n\n<span class=\"token function\">git</span> cat-file -p ea61ada05f2a3bcfda48230d8f511decf026b367 \nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'modify'</span><span class=\"token punctuation\">)</span> // 保存着新的内容\n<span class=\"token function\">git</span> cat-file -p 7f7cc294ff052479b84bd1c13a510a616588af8e \nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token function\">cat</span> .git/refs/head/master\n\n\nf68afe902f9b946699ee61f7177461ef311b1134 // master中保存的commit的对象信息也改变了\n</code></pre></div>\n<p>由此，我们做出新的关系图为：</p>\n<p><img src=\"/images/git-object-relation-2.png\" alt=\"\"></p>\n<p>之前我们提到关于对象的名称是一个由对象内容决定的SHA1散列值，当<code>app.js</code>中的内容修改之后，app.js对应的blob对象以及上层的tree对象和commit对象的引用对象都是根据内容新计算出的对象，只有index.js对应的blob对象还是之前的对象。</p>\n<p>所以，Git存储着每一个版本的对象副本，对象中保存着完整的文件副本。我们回退，切换或者修改版本内容实际上就是改变对象之间的引用关系。</p>\n<h1 id=\"git的常用命令和使用场景\">git的常用命令和使用场景</h1>\n<p>下边工作中可能会遇到的场景，涉及命令的具体用法需要自己去查看详细的说明文档：</p>\n<h3 id=\"基本的命令\">基本的命令</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">// 切换分支\n<span class=\"token function\">git</span> checkout <span class=\"token operator\">&#x3C;</span>branch<span class=\"token operator\">></span>\n// 切换新分支\n<span class=\"token function\">git</span> checkout -b <span class=\"token operator\">&#x3C;</span>new branch<span class=\"token operator\">></span>\n// 查看文件状态\n​git status\n// 暂存\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token operator\">&#x3C;</span>name<span class=\"token operator\">></span>\n// 提交\n<span class=\"token function\">git</span> commit -m <span class=\"token operator\">&#x3C;</span>message<span class=\"token operator\">></span>\n// 推送远程仓库\n<span class=\"token function\">git</span> push origin <span class=\"token operator\">&#x3C;</span>branch<span class=\"token operator\">></span>\n</code></pre></div>\n<h3 id=\"远程仓库相关\">远程仓库相关</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> remote --help\n</code></pre></div>\n<h3 id=\"回退代码\">回退代码</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> reset --help\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">需要注意的--hard --mixed --soft的区别：\n\n\n\n--hard：回退将会影响索引和工作区\n\n\n\n--mixed：这个是默认的参数，回退仅影响索引，也就是暂存区\n\n\n\n--soft：不影响索引和工作区，回退之后直接可以直接commit</code></pre></div>\n<h3 id=\"开发过程中需要切换分支修改其他内容\">开发过程中需要切换分支修改其他内容</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">// 将文件存到临时空间，之后再取出\n\n\n<span class=\"token function\">git</span> stash \n\n\n// 先提交一个commit，回来之后修改完在使用 --amend，会将当前的修改合并到上一个commit，并且还能修改描述信息\n\n\n<span class=\"token function\">git</span> commit --amend \n</code></pre></div>\n<h3 id=\"代码误操作需要找回，或者查看操作内容\">代码误操作需要找回，或者查看操作内容</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">// 可以查看所有的操作步骤\n<span class=\"token function\">git</span> reflog\n</code></pre></div>\n<p>​</p>\n<h3 id=\"不小心将大文件提交到了git中\">不小心将大文件提交到了git中</h3>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">// 使用 git rm 命令将其删除\n\ngit rm // 同时删除索引和工作区\ngit rm --cached // 仅删除索引</code></pre></div>\n<h3 id=\"当你想取另一个分支上的commit到当前分支\">当你想取另一个分支上的commit到当前分支</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">// 首先你得知道需要取的commit的名称，就是hash值，然后使用 <span class=\"token function\">git</span> cherry-pick 命令就能够将commit搬运过来，有可能会出现冲突\n\n\n<span class=\"token function\">git</span> cherry-pick <span class=\"token operator\">&#x3C;</span>commit<span class=\"token operator\">></span>\n</code></pre></div>\n<h3 id=\"多人协作的时候你会发现，当你使用使用git-branch--a-查看分支的时候，会出现很多远程已经删除的分支，如果你想要删除这些不需要展示分支名，可以使用下边的命令：\">多人协作的时候你会发现，当你使用使用git branch -a 查看分支的时候，会出现很多远程已经删除的分支，如果你想要删除这些不需要展示分支名，可以使用下边的命令：</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> remote prune origin \n</code></pre></div>\n<h3 id=\"git-diff-命令\">git diff 命令</h3>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> <span class=\"token function\">diff</span>                工作区 vs 暂存区\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token function\">head</span>           工作区 vs 版本库\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span> –cached        暂存区 vs 版本库\n</code></pre></div>\n<p>推荐使用git difftool，比git diff更好用的命令，最好用的还是直接安装编辑器的插件。</p>\n<h3 id=\"git-merge-和-git-rebase\">git merge 和 git rebase</h3>\n<p>使用前可以先了解一下两者的区别，git merge能够保存分支完整的历史记录，git rebase会将需要合并commit添加到目标分支，网上已经有很多类似的文章讲的比较详细，大家可以去搜索一下，具体使用哪个命令，根据团队的规范或者个人喜好来定。</p>\n",
    "frontmatter": {
      "title": "一些关于Git的内容",
      "date": "2019-01-10"
    },
    "toc": "<ul>\n<li>\n<p><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></p>\n<ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E4%B8%89%E4%B8%AA%E5%88%86%E5%8C%BA%E6%A6%82%E5%BF%B5\">基本使用和三个分区概念</a></li>\n<li><a href=\"#git%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E4%BF%A1%E6%81%AF\">git如何存储信息</a></li>\n<li><a href=\"#objects%E7%9B%AE%E5%BD%95\">objects目录</a></li>\n<li><a href=\"#git%E5%AF%B9%E8%B1%A1\">git对象</a></li>\n<li><a href=\"#git%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB\">git对象关系</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#git%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\">git的常用命令和使用场景</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%91%BD%E4%BB%A4\">基本的命令</a></li>\n<li><a href=\"#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9B%B8%E5%85%B3\">远程仓库相关</a></li>\n<li><a href=\"#%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81\">回退代码</a></li>\n<li><a href=\"#%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%9C%80%E8%A6%81%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF%E4%BF%AE%E6%94%B9%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9\">开发过程中需要切换分支修改其他内容</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E8%AF%AF%E6%93%8D%E4%BD%9C%E9%9C%80%E8%A6%81%E6%89%BE%E5%9B%9E%EF%BC%8C%E6%88%96%E8%80%85%E6%9F%A5%E7%9C%8B%E6%93%8D%E4%BD%9C%E5%86%85%E5%AE%B9\">代码误操作需要找回，或者查看操作内容</a></li>\n<li><a href=\"#%E4%B8%8D%E5%B0%8F%E5%BF%83%E5%B0%86%E5%A4%A7%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4%E5%88%B0%E4%BA%86git%E4%B8%AD\">不小心将大文件提交到了git中</a></li>\n<li><a href=\"#%E5%BD%93%E4%BD%A0%E6%83%B3%E5%8F%96%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E4%B8%8A%E7%9A%84commit%E5%88%B0%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF\">当你想取另一个分支上的commit到当前分支</a></li>\n<li><a href=\"#%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E7%9A%84%E6%97%B6%E5%80%99%E4%BD%A0%E4%BC%9A%E5%8F%91%E7%8E%B0%EF%BC%8C%E5%BD%93%E4%BD%A0%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8git-branch--a-%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%BE%88%E5%A4%9A%E8%BF%9C%E7%A8%8B%E5%B7%B2%E7%BB%8F%E5%88%A0%E9%99%A4%E7%9A%84%E5%88%86%E6%94%AF%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%83%B3%E8%A6%81%E5%88%A0%E9%99%A4%E8%BF%99%E4%BA%9B%E4%B8%8D%E9%9C%80%E8%A6%81%E5%B1%95%E7%A4%BA%E5%88%86%E6%94%AF%E5%90%8D%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%B8%8B%E8%BE%B9%E7%9A%84%E5%91%BD%E4%BB%A4%EF%BC%9A\">多人协作的时候你会发现，当你使用使用git branch -a 查看分支的时候，会出现很多远程已经删除的分支，如果你想要删除这些不需要展示分支名，可以使用下边的命令：</a></li>\n<li><a href=\"#git-diff-%E5%91%BD%E4%BB%A4\">git diff 命令</a></li>\n<li><a href=\"#git-merge-%E5%92%8C-git-rebase\">git merge 和 git rebase</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
    "name": "一些关于Git的内容",
    "id": "9d416bfd8ea5d650c625f97e4f7839c6",
    "prev": {
      "name": "vite 原理解析(2)-重写npm模块和@modules",
      "id": "81022b0d239d20f20c696c37083cc328"
    },
    "next": {
      "name": "使用 Next.js SSG 和 Markdown 创建博客",
      "id": "7c63ed8670a327e4a87f9dc1a158bd10"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/使用 Next.js SSG 和 Markdown 创建博客.md",
      "/home/zepang/WorkSpace/blog/posts/使用 Next.js SSG 和 Markdown 创建博客.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"环境准备\">环境准备</h1>\n<ul>\n<li>\n<p>Node.js</p>\n</li>\n<li>\n<p>Npm, npx</p>\n</li>\n<li>\n<p>VS Code</p>\n</li>\n</ul>\n<h1 id=\"什么是-ssg？\">什么是 SSG？</h1>\n<p>静态站点生成器SSG是介于传统静态站点和动态站点之间的一种折中解决方案。</p>\n<p>传统意义的静态网站内容固定，而动态网站则会根据获取的数据动态的渲染内容。</p>\n<p>SGG与上边两者的区别是SSG会提前（打包编译）获取数据，数据来源可能是通过API或者Markdown、JSON文件等等，然后根据获取的数据输出HTML静态文件。</p>\n<p>next.js9.3版本宣布支持SSG，具体查看该文章<a href=\"https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support\">https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support</a>。</p>\n<p>本文将尝试配置一个 Next.js SSG Blog Starter 项目，并基于该项目创建个人博客。</p>\n<h1 id=\"初始化一个nextjs项目\">初始化一个next.js项目</h1>\n<p>打开next.js的文档，按照步骤快速创建一个next.js应用</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npx create-next-app\n\n# 文件目录如下\n.\n├── README.md\n├── package.json\n├── pages\n├── public\n├── styles\n└── yarn.lock</code></pre></div>\n<p>创建完成之后我们先进入目录，启动一下项目，确保没有问题</p>\n<h1 id=\"尝试使用getstaticprops提前获取数据\">尝试使用getStaticProps提前获取数据</h1>\n<p>看下官方文档对getStaticProps函数的描述：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">If you export an async function called getStaticProps from a page, Next.js will pre-render this page at build time using the props returned by getStaticProps.</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// will be passed to the page component as props</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>接下来，创建<code>/posts</code>目录，并在该目录下添加一个Markdown的文件<code>index.md</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\"># hello next.js</code></pre></div>\n<p>改造<code>index.js</code>的内容：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">fs</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'fs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">path</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'path'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> markdown <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>markdown<span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> markdown <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'posts/index.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      markdown\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>打开浏览器，可以看到标题<code># hello next.js</code>，成功的拿到了数据。</p>\n<h1 id=\"获取文章元信息（metadata）和内容\">获取文章元信息（metaData）和内容</h1>\n<p>在使用Markdown写文章的时候，为了区别文章的一些元信息和文章内容，通常会使用yaml语法来描述文章元信息。</p>\n<p>比如，创建一片文章<code>/post/第一篇文章.md</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token hr punctuation\">---</span>\n<span class=\"token title important\">title: 第一篇文章\n<span class=\"token punctuation\">---</span></span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> 第一篇文章</span>\n\n第一篇文章内容\n</code></pre></div>\n<p>我们使用<code>front-matter</code>处理元信息和获取需要的Markdown内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn add front-matter</code></pre></div>\n<p>下面是改造后的<code>index.js</code>文件内容:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">fs</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'fs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">path</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'path'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">frontMatter</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'front-matter'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">page</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>main className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">main</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&#x3C;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>\n            posts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&#x3C;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">titleWrapper</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&#x3C;</span>a className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n             <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> postsDirectory <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readdirSync</span><span class=\"token punctuation\">(</span>postsDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>md<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>postsDirectory<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> attributes<span class=\"token punctuation\">,</span> body <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">frontMatter</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 确保title存在</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'[object Object]'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">basename</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">basename</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      meta<span class=\"token operator\">:</span> attributes<span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> body\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      posts\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>打开页面，可以看到文章的标题</p>\n<h1 id=\"使用-react-markdown-渲染markdown\">使用 react-markdown 渲染Markdown</h1>\n<p>安装依赖<code>react-markdown</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn add react-markdown</code></pre></div>\n<p>改造index.js旳代码：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactMarkdown</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-markdown'</span>\n<span class=\"token spread operator\">...</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">page</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>main className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">main</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&#x3C;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>\n            posts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&#x3C;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">titleWrapper</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&#x3C;</span>a className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n             <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n        <span class=\"token comment\">// 文章内容</span>\n        <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ReactMarkdown</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>markdown<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">ReactMarkdown</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token spread operator\">...</span>\n</code></pre></div>\n<p>重新运行项目，页面已经呈现出了Markdown文件内容。</p>\n<h1 id=\"使用nextjs动态路由\">使用Next.js动态路由</h1>\n<p>SSG打包出来的都是静态页面，也就是说需要为每个Markdown文章页输出一个HTML文章页，通过访问URL上的静态文件名来访问HTML页面。</p>\n<p>为了达到这个效果，需要用到next.js的动态路由和<code>getStaticPaths</code>函数，你也可以使用通过在<code>next.config.js</code>中配置<code>exportPathMap</code>来替换<code>getStaticPaths</code>函数的作用。</p>\n<p>先来尝试一下next.js的动态路由，创建<code>pages/post/[postName].js</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'next/router'</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span>h1<span class=\"token operator\">></span>这是文章<span class=\"token punctuation\">{</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">postName</span><span class=\"token punctuation\">}</span>的详情页面<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>之后可以通过<code>localhost:3000/post/:postName</code>来访问页面，并且可以通过<code>next/router</code>的<code>useRouter</code> hooks创建的router对象获取 <code>postName</code> 的值。</p>\n<p>在改造<code>pages/post/[postName].js</code>之前，先把<code>index.js</code>文件中的一些通用方法提到<code>/utils/index.js</code>文件中：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">fs</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'fs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">path</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'path'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">frontMatter</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'front-matter'</span>\n\n<span class=\"token keyword\">const</span> postsDirectory <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAllPosts</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readdirSync</span><span class=\"token punctuation\">(</span>postsDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>md<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">basename</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> posts\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPost</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>postsDirectory<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.md</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> attributes<span class=\"token punctuation\">,</span> body <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">frontMatter</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 确保title存在</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'[object Object]'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> filename <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> filename\n  <span class=\"token punctuation\">}</span>\n\n  attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">filename</span> <span class=\"token operator\">=</span> filename\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    meta<span class=\"token operator\">:</span> attributes<span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> body\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>接下来在<code>pages/post/[postName].js</code>加入<code>getStaticPaths</code>函数和<code>getStaticProps函数</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'next/router'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> getAllPosts<span class=\"token punctuation\">,</span> getPost <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../utils'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactMarkdown</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-markdown'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> post <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>h1<span class=\"token operator\">></span>这是文章<span class=\"token punctuation\">{</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">postName</span><span class=\"token punctuation\">}</span>的详情页面<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ReactMarkdown</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">ReactMarkdown</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">contxt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> post <span class=\"token operator\">=</span> <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>contxt<span class=\"token punctuation\">.</span><span class=\"token property-access\">params</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">postName</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      post\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticPaths</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token function\">getAllPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> paths <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token comment\">// 兼容中文命名需要使用 encodeURIComponent，否则无法根据URL的文件名找到对应文件</span>\n        postName<span class=\"token operator\">:</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">filename</span><span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    paths<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 不存在的文章显示404</span>\n    fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n</code></pre></div>\n<p>目前已经可以通过访问<code>localhost:3000/post/:postName</code>正确的展示Markdown文章页面和内容。</p>\n<h1 id=\"添加markdown代码块的语法高亮\">添加markdown代码块的语法高亮</h1>\n<p><code>react-markdown</code> 默认没有语法高亮，语法高亮需要用到另外一个依赖 <code>react-syntax-highlighter</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn add react-syntax-highlighter</code></pre></div>\n<p>关于 <code>react-syntax-highlighter</code> 的使用这里不做过多说明，具体的话去查看对应的文档即可。</p>\n<p>为了使的 <code>react-syntax-highlighter</code> 配合 <code>react-markdown</code>，需要使用<code>react-markdown</code>的自定义<code>renderers</code>，文档也有提到相关的内容。</p>\n<p>修改<code>pages/post/[postName].js</code>的代码，针对<code>code</code>标签的内容交给<code>CodeBlock</code>组件处理：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ReactMarkdown</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span><span class=\"token punctuation\">}</span> renderers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> code<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CodeBlock</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">ReactMarkdown</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token spread operator\">...</span>\n</code></pre></div>\n<p>创建文件<code>components/CodeBlock.js</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Prism</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">SyntaxHighlighter</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-syntax-highlighter'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> okaidia <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-syntax-highlighter/dist/cjs/styles/prism'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">CodeBlock</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> language<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">SyntaxHighlighter</span> language<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>language<span class=\"token punctuation\">}</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>okaidia<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">SyntaxHighlighter</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">CodeBlock</span>\n</code></pre></div>\n<p>这样markdown中代码块的语法高亮就处理完了。</p>\n",
    "frontmatter": {
      "title": "使用 Next.js SSG 和 Markdown 创建博客",
      "date": "2020-11-29"
    },
    "toc": "<ul>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">环境准备</a></li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-ssg%EF%BC%9F\">什么是 SSG？</a></li>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AAnextjs%E9%A1%B9%E7%9B%AE\">初始化一个next.js项目</a></li>\n<li><a href=\"#%E5%B0%9D%E8%AF%95%E4%BD%BF%E7%94%A8getstaticprops%E6%8F%90%E5%89%8D%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\">尝试使用getStaticProps提前获取数据</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E6%96%87%E7%AB%A0%E5%85%83%E4%BF%A1%E6%81%AF%EF%BC%88metadata%EF%BC%89%E5%92%8C%E5%86%85%E5%AE%B9\">获取文章元信息（metaData）和内容</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-react-markdown-%E6%B8%B2%E6%9F%93markdown\">使用 react-markdown 渲染Markdown</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8nextjs%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\">使用Next.js动态路由</a></li>\n<li><a href=\"#%E6%B7%BB%E5%8A%A0markdown%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE\">添加markdown代码块的语法高亮</a></li>\n</ul>\n",
    "name": "使用 Next.js SSG 和 Markdown 创建博客",
    "id": "7c63ed8670a327e4a87f9dc1a158bd10",
    "prev": {
      "name": "一些关于Git的内容",
      "id": "9d416bfd8ea5d650c625f97e4f7839c6"
    },
    "next": {
      "name": "在线Web IDE--code server部署",
      "id": "00e7f2b491b451d6822c03c6285ad404"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/在线Web IDE--code server部署.md",
      "/home/zepang/WorkSpace/blog/posts/在线Web IDE--code server部署.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"环境准备\">环境准备</h1>\n<ul>\n<li>\n<p>一台服务器</p>\n</li>\n<li>\n<p>Docker环境</p>\n</li>\n<li>\n<p>Nginx</p>\n</li>\n</ul>\n<h1 id=\"code-server-部署\">Code Server 部署</h1>\n<ul>\n<li><code>code-server</code> <a href=\"https://github.com/cdr/code-server\">https://github.com/cdr/code-server</a></li>\n</ul>\n<p>由于之前使用过docker，环境都还在，所以，选择使用docker的方式进行部署</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p ~/.config\n\ndocker run -it --name code-server -p <span class=\"token number\">127.0</span>.0.1:8080:8080 <span class=\"token punctuation\">\\</span>\n  -v <span class=\"token string\">\"<span class=\"token environment constant\">$HOME</span>/.config:/home/coder/.config\"</span> <span class=\"token punctuation\">\\</span>\n  -v <span class=\"token string\">\"<span class=\"token environment constant\">$PWD</span>:/home/coder/project\"</span> <span class=\"token punctuation\">\\</span>\n  -u <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span>:<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span>\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token comment\"># 此处填写等会访问Web IDE密码</span>\n  -e <span class=\"token string\">\"PASSWORD=xxxxx\"</span>\n  codercom/code-server:latest\n</code></pre></div>\n<p>跑完之后查看一下容器是否正常运行</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">➜  ~ docker container <span class=\"token function\">ls</span> -a\nCONTAINER ID   IMAGE                         COMMAND                  CREATED       STATUS       PORTS                    NAMES\n62d7182c80ea   codercom/code-server:latest   <span class=\"token string\">\"/usr/bin/entrypoint…\"</span>   <span class=\"token number\">8</span> hours ago   Up <span class=\"token number\">8</span> hours   <span class=\"token number\">0.0</span>.0.0:8080-<span class=\"token operator\">></span><span class=\"token number\">8080</span>/tcp   code-server\n</code></pre></div>\n<p>过程进行的还比较顺利，一步就成功了</p>\n<h1 id=\"nginx-配置\">Nginx 配置</h1>\n<p>在Nginx的配置文件上加一个 <code>location</code> 的配置块</p>\n<div class=\"remark-highlight\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">location</span> <span class=\"token operator\">/</span>code<span class=\"token operator\">-</span><span class=\"token keyword\">server</span><span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span><span class=\"token operator\">/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Upgrade <span class=\"token variable\">$http_upgrade</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Connection upgrade<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Accept<span class=\"token operator\">-</span>Encoding <span class=\"token keyword\">gzip</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>打开浏览器访问 <code>https://example.com/code-server</code>，出现输入框，输入刚才设置的密码，进入IDE</p>\n<p><img src=\"/images/vscode-web-ide.png\" alt=\"\"></p>\n<p>关于code-server的配置可以查看文档或者搜索相关的文章</p>\n<p>关于换的问题根据个人的需求处理就好了</p>\n<p>参考：</p>\n<ul>\n<li>https://blog.0x233.cn/2020/04/11/code-server/</li>\n</ul>\n",
    "frontmatter": {
      "title": "在线Web IDE--code server部署",
      "date": "2020-12-17"
    },
    "toc": "<ul>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">环境准备</a></li>\n<li><a href=\"#code-server-%E9%83%A8%E7%BD%B2\">Code Server 部署</a></li>\n<li><a href=\"#nginx-%E9%85%8D%E7%BD%AE\">Nginx 配置</a></li>\n</ul>\n",
    "name": "在线Web IDE--code server部署",
    "id": "00e7f2b491b451d6822c03c6285ad404",
    "prev": {
      "name": "使用 Next.js SSG 和 Markdown 创建博客",
      "id": "7c63ed8670a327e4a87f9dc1a158bd10"
    },
    "next": {
      "name": "笔记摘录-你不知道的JavaScript-上篇",
      "id": "c34d6ff7671cf4ca397b709b871b1f32"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/笔记摘录-你不知道的JavaScript-上篇.md",
      "/home/zepang/WorkSpace/blog/posts/笔记摘录-你不知道的JavaScript-上篇.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"第一部分\">第一部分</h1>\n<h2 id=\"第一章-作用域是什么？\">第一章 作用域是什么？</h2>\n<p>存储和查找变量的规则。</p>\n<h3 id=\"11-编译原理：\">1.1 编译原理：</h3>\n<ul>\n<li>JavaScript实际上一门编译语言。任何JavaScript的代码在执行前都要进行编译。大部分的编译发生在代码执行前的几微妙（甚至更短）。</li>\n<li>编译的三个过程：\n<ul>\n<li>分词/词法分析</li>\n<li>解析/语法分析</li>\n<li>代码生成</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-作用域的理解\">1.2 作用域的理解</h3>\n<ul>\n<li>对 JavaScript 代码进行处理时需要参与的三个成员 引擎，编译器，作用域以及它们分别的作用。</li>\n<li>作用域参与编译器和引擎的工作，协助编译器和引擎存储和查找变量</li>\n</ul>\n<h3 id=\"13-作用域嵌套\">1.3 作用域嵌套</h3>\n<ul>\n<li>遍历嵌套作用域链的规则：引擎从当前的执行作用域开始查找变量，如果找不到，\n就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都\n会停止。</li>\n</ul>\n<h3 id=\"14-异常\">1.4 异常</h3>\n<p>在普通模式下，执行 LHS 查询，如果直到顶层作用域都无法找到所需的变量，会在顶层作用域，隐式的创建一个。执行 RHS 查询，在所有的嵌套作用中，无法找到需要的变量，引擎会抛出 ReferenceError 异常。\n在严格模式下（'use strict'），执行 LHS 查询，如果直到顶层作用域都无法找到所需的变量，不会在顶层作用域隐式的创建一个，引擎会抛出 ReferenceError 异常，因为严格模式不允许隐式创建变量。</p>\n<hr>\n<h2 id=\"第二章-词法作用域\">第二章 词法作用域</h2>\n<p>作用域共有两种主要的工作模型，第一种最为普遍，被大多数编程语言所采用的词法作用域。另外一种叫做动态作用域，仍有一些编程语言在使用。JavaScript所采用的模型是词法作用域。\n举个例子说明动态作用域和词法作用域的区别：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>上边的代码 js 会输出 2，因为 foo 函数的 RHS 查找变量是通过全局的作用域进行查找的\n如果 js 是动态语言，那么结果就会输出 3，动态作用域不关心函数是在何处声明的，只关心在何处调用。</p>\n<h3 id=\"21-词法阶段\">2.1 词法阶段</h3>\n<p>在之前的<a href=\"###1.1%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86\">1.1编译原理</a>中提到编译器工作的三个阶段，第一个是词法分析，大部分标准编译器的第一个工作阶段叫做词法化。\n<strong>简单的来说，词法作用域就是定义在词法阶段的作用域。换句话来说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，由此，当词法分析器处理代码时，会保持作用域不变</strong></p>\n<h3 id=\"22-词法欺骗\">2.2 词法欺骗</h3>\n<p>刚才所说，词法作用域完全由写代码期间函数所声明的位置来定义，怎样才能在运行时来“修改”（欺骗），词法作用域？</p>\n<p>JavaScript 中有两种方式：eval 和 with</p>\n<h4 id=\"221-eval\">2.2.1 eval</h4>\n<p>eval 函数可以接收一个字符串为参数，并且将其中内容作为好像在书写时就在当前位置的代码来执行。请看下面例子：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var a = 3\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>eval 常用来动态创建代码，但是，在严格模式中，eval(...) 在运行时有其自己的作用域，意味着无法修改所在地作用域。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ReferenceError: a is not defined</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var a = 3\"</span><span class=\"token punctuation\">)</span> \n</code></pre></div>\n<p>setTimeout(...) 和 setInterval(...) 的第一个参数可以是字符串，字符串的代码可以解释成正确的代码执行。这些功能已经过时，不要使用它。</p>\n<p>new Function(...) 函数最后一个参数可以接收代码字符串，并且将其转化成动态代码。这种做法比eval(...)略微安全，但是，也要尽量避免使用。</p>\n<h4 id=\"with\">with</h4>\n<p>通常被当作重复引用同一个对象的多个属性的快捷方式，可以不需要重复引用对象本身。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token property-access\">b</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token property-access\">c</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n\n<span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n  b <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n  c <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n  d <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 7</span>\n</code></pre></div>\n<p>with 可以将一个没有或者多个属性的对象处理为一个完全隔离的词法作用域。实际上，是根据你传递给它的对象凭空创造一个新的词法作用域。比如，你传递 obj 给 with，实际上，with 以 obj 作为当前作用域，在 obj 中没有找到 d ，所以，在上层作用域中找，也没有，那么就创建了 d 变量。</p>\n<hr>\n<h2 id=\"第三章-函数作用域和块作用域\">第三章 函数作用域和块作用域</h2>\n<p>JavaScript是如何形成作用域气泡？</p>\n<p>两种方式，一种是函数作用域，另一种是块作用域。</p>\n<h3 id=\"函数作用域\">函数作用域</h3>\n<p>每次创建一个函数就可以为其自身创建一个作用域气泡。</p>\n<h3 id=\"块作用域\">块作用域</h3>\n<p>通过 with try/catch let const 等关键字形成的块级作用域。\n其中try/catch 中的 catch 分句会创建块作用域，其中声明的变量只能在catch内部有效。</p>\n<hr>\n<h2 id=\"第四章-提升\">第四章 提升</h2>\n<p>先看下面代码：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ---</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\nconsoel<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// ---</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n</code></pre></div>\n<p>通常我们理解的JavaScript的代码是一行一行从上往下执行，所以我们猜测上边代码会报 ReferenceError 错误。但是，由于 JavaScript 是先编译后执行，在编译阶段会收集所有的声明，虽然，我们看到的 a 声明代码在 赋值代码后面，但是，编译器已经提前在作用域中声明了 a，所以，在执行阶段，对 a 进行 RHS 查询，不会报错。这一个现象叫提升。</p>\n<p>JavaScript 中除了上边的变量提升，还存在函数提升，不过只针对 function 关键字声明的函数。</p>\n<hr>\n<h2 id=\"第五章-作用域闭包\">第五章 作用域闭包</h2>\n<h3 id=\"闭包\">闭包</h3>\n<p>闭包的产生？</p>\n<p>当函数记住并且访问词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p>\n<p>什么叫闭包？</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">f00</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>我们可以这么解释上边的代码，bar 函数在创建时是在 foo 函数内部，所以，bar 函数所适应访问的变量的规则时，当前作用域 -> foo作用域 -> foo外层作用域，bar 函数在执行的时候，根据作用域嵌套规则，首先会在当前作用域寻找 a，不存在就会往上寻找，而 foo 作用域 是可以访问到 a 的。\n那么下边代码我们该如何解释？</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> bar\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> baz <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2 闭包产生的效果</span>\n</code></pre></div>\n<p>如果我们继续按照上边的思路去解释，那么我们会发现一个问题，由于JavaScript本身存在的垃圾回收机制，在 var baz = foo() 执行完后，foo 函数就应该会回收，所以 foo 中声明的所有上下文环境变量就该销毁，显然baz()执行的时候是无法找到 a 的。那么此处最终结果依然输出 2，可以看出 foo 在执行时生成的上下文环境变量没有被销毁，闭包阻止了垃圾回收。</p>\n<p>个人的理解：</p>\n<ul>\n<li>\n<p>作用域</p>\n<ul>\n<li>同意书上JavaScript使用的是词法作用域，所以决定变量的使用范围是在词法分析阶段。</li>\n<li>JavaScript作用域从范围来分，分为全局作用域和局部作用域，从不同的生成方式来分，分为函数作用域（由创建函数形成的作用域）和块级作用域（形成块级作用域的关键字声明形成）。</li>\n</ul>\n</li>\n<li>\n<p>闭包</p>\n<p>当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时\n就产生了闭包。</p>\n<ul>\n<li>在函数A中返回函数B，函数B对函数A的作用域存在引用，我们就说函数A形成了闭包，函数B就是函数A的闭包。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"第二部分\">第二部分</h1>\n<h2 id=\"第一章-关于-this\">第一章 关于 this</h2>\n<h3 id=\"对-this-的误解\">对 this 的误解</h3>\n<ul>\n<li>this 指向函数自身</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// foo: 6</span>\n<span class=\"token comment\">// foo: 7</span>\n<span class=\"token comment\">// foo: 8</span>\n<span class=\"token comment\">// foo: 9</span>\n<span class=\"token comment\">// foo 被调用了多少次？</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 -- WTF?</span>\n</code></pre></div>\n<p>foo 调用实际上是增加了全局的 count。</p>\n<p><strong>就针对上面的代码，如何回避以上问题：</strong></p>\n<ul>\n<li>第一种</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  data<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// foo: 6</span>\n<span class=\"token comment\">// foo: 7</span>\n<span class=\"token comment\">// foo: 8</span>\n<span class=\"token comment\">// foo: 9</span>\n<span class=\"token comment\">// foo 被调用了多少次？</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<p>创建一个对象来存储 count，回避掉 this 的问题，用词法作用域来解释。</p>\n<ul>\n<li>第二种</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>使用具名函数，指定函数名。</p>\n<ul>\n<li>第三种</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  <span class=\"token comment\">// 注意，在当前的调用方式下（参见下方代码），this 确实指向 foo</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 使用 call(..) 可以确保 this 指向函数对象 foo 本身</span>\n    foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span> foo<span class=\"token punctuation\">,</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// foo: 6</span>\n<span class=\"token comment\">// foo: 7</span>\n<span class=\"token comment\">// foo: 8</span>\n<span class=\"token comment\">// foo: 9</span>\n<span class=\"token comment\">// foo 被调用了多少次？</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<p>使用 call apply bind 这一类，强制绑顶 this 的指向。</p>\n<ul>\n<li>this 指向函数作用域\n（说实话没看懂作者举的例子和当前的主题有啥干系）</li>\n</ul>\n<h4 id=\"小结\">小结</h4>\n<p>this 既不指向函数自身也不指向函数的词法作用域，this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。</p>\n<hr>\n<h2 id=\"第二章-全面了解-this\">第二章 全面了解 this</h2>\n<h3 id=\"this的绑定规则\">this的绑定规则</h3>\n<h4 id=\"默认绑定\">默认绑定</h4>\n<p>独立函数调用（作为普通的函数调用），在非严格的模式下，this 指向全局对象。在严格模式下，this 是 undefined。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>书上的说法是 foo 是直接使用不带任何修饰的函数引用进行调用的，因此只能使用默认绑定。</p>\n<h4 id=\"隐式绑定\">隐式绑定</h4>\n<p>通常就是我们所说的把函数当做对象的属性调用，因此隐式绑定规则会把 this 绑定到这个上下文对象。还需要注意的一点是：对象属性引用链中只有最顶层或者说最后一层会影响调用位置。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  obj2<span class=\"token operator\">:</span> obj2\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj1<span class=\"token punctuation\">.</span><span class=\"token property-access\">obj2</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n</code></pre></div>\n<p>最后一层是 obj2，所有输出 obj2 的 a 属性值。</p>\n<h4 id=\"this-隐式丢失\">this 隐式丢失</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">foo</span> <span class=\"token comment\">// 函数别名</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'oops. global'</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// oops, global</span>\n</code></pre></div>\n<p>虽然 bar 和 obj.foo 是同一个引用，但是实际上，它引用的是 foo 函数本身，因此 bar() 其实是一个不带任何修饰的函数调用，因此应用了默认绑定</p>\n<p>一种更微妙、更常见的并且更加出乎意料的情况发生在传入回调函数时：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// fn 其实引用的时 foo</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 调用位置</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'oops, global'</span>\n<span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// oops global</span>\n</code></pre></div>\n<p>参数传递的方式其实是一种隐式的赋值，因此，fn 其实还是对 foo 函数的引用，结果和上个例子一样。</p>\n<p>如果把函数传入 JavaScript 内置函数会怎么样？</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'oops, global'</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">foo</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// oops global</span>\n</code></pre></div>\n<p>结果是一样的。因为传参数的方式是隐式的赋值，实际上就是执行了 var fn = obj.foo，然后执行了 fn()，显然又和上边的例子是一样的。</p>\n<h4 id=\"显示绑定\">显示绑定</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>书上说的显示绑定就是指利用函数自带的 call(...) 和 apply(...) 方法，它们的第一个参数是一个对象，它们会把这个对象绑定到 this，接着调用函数时指定这个 this。</p>\n<ol>\n<li>硬绑定</li>\n</ol>\n<p>但是，call 和 apply 解决了我们上边说的隐式丢失的问题吗？</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'oops global'</span>\ndoFoo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// oops global</span>\n</code></pre></div>\n<p>我们这里没有用 setTimeout 这一类内置函数，因为会报非法调用的错误。\n最终结果来看，没有解决，那是为什么呢？我们来看下，虽然我们利用call绑定了调用函数 doFoo 的 this 指向 obj，但是，按照函数时赋值传参的规则，假设 var fn = obj.foo，所以我们在 doFoo 中实际是 fn() 这样调用函数的，解释还是和上边一样，是不带任何修饰的函数引用调用。我们这个时候就会想到，是不是只要再调用 foo 的时候改变 fn() 的 this 指向就可以了。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  fn<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 强制绑定 obj 调用</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'oops global'</span>\n<span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>看来我们的猜想没有错，我们来看下书上的写法：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'oops global'</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>书上的写法更加直接，无论之后怎么调用 bar 都会 手动在 obj 上调用 foo，这种绑定是一种显示的强制绑定，称之为硬绑定。</p>\n<p>硬绑定的典型场景就是创建一个包裹函数，传入所有的参数并且返回接收到的所有值：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// foo 就是包裹函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">,</span> something<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">+</span> something\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// foo 就是包裹函数</span>\n  <span class=\"token keyword control-flow\">return</span> foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2 3</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p>另外一种是创建一个可以重复使用的函数，我们可以想象如果要创造一个 bar 函数来进行封装：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> fn<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">,</span> something<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">+</span> something\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2 3</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p>没错这就是我们常用的 bind 函数的功能，因为硬绑定非常常用，所以，在 ES5 中提供了内置的方法 Function.prototype.bind 方法。\n2. API 调用的'上下文'</p>\n<p>JavaScript的许多库和内置函数都提供了一个可选的参数，通常称为上下文，效果和bind一样，比如：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4 4 4</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4 4 4</span>\n</code></pre></div>\n<p>前提这个 foo 不能是 es6 的箭头函数，否则不能绑定 this</p>\n<h4 id=\"new-操作符绑定\">new 操作符绑定</h4>\n<p>使用 new 来调用函数，会自动执行下面的操作：</p>\n<ul>\n<li>创建一个全新的对象</li>\n<li>这个新对象会被执行原型链接</li>\n<li>这个新对象会被绑定到函数调用的 this</li>\n<li>如果函数没有返回其他对象，那么 new 表达式中的函数会调用自动返回的这个新对象</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> bar<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<h3 id=\"四种绑定的优先级\">四种绑定的优先级</h3>\n<ol>\n<li>隐式绑定和显示绑定</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span>\nobj1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\nobj2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n\nobj1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\nobj2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>显示绑定 > 隐式绑定</p>\n<ol start=\"2\">\n<li>隐式绑定和 new 绑定</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">=</span> something\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span>\n\nobj1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">obj1<span class=\"token punctuation\">.</span>foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<p>可以看出 new 绑定 > 隐式绑定</p>\n<ol start=\"3\">\n<li>new 绑定与显示绑定</li>\n</ol>\n<p>一般的显示绑定无法和 new 比较，因为无法通过 new foo.call(obj)，但是，可以通过硬绑定进行测试。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">=</span> something\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>结果是 new 绑定 > 硬绑定，我们拿上边硬绑定那一节写的 bind 来看下</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">=</span> something\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> fn<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> foo\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> baz <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>显然无法改变 this 的指向，所以，JavaScript 内置的 bind 在内部肯定还有其他的实现。</p>\n<p>因为 bind 是在 es5 才加入 JavaScript内置语法，所以，有些浏览器还需要做兼容性处理，下边是 mdn 上一种 bind 的 Pollyfill 实现：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">bind</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">bind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oThis</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// closest thing possible to the ECMAScript 5</span>\n      <span class=\"token comment\">// internal IsCallable function</span>\n      <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Function.prototype.bind - what is trying to be bound is not callable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> aArgs   <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        fToBind <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">fNOP</span>    <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">fBound</span>  <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// this instanceof fNOP === true时,说明返回的fBound被当做new的构造函数调用</span>\n          <span class=\"token keyword control-flow\">return</span> fToBind<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">fNOP</span>\n                 <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span>\n                 <span class=\"token operator\">:</span> oThis<span class=\"token punctuation\">,</span>\n                 <span class=\"token comment\">// 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的</span>\n                 aArgs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 维护原型关系</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Function.prototype doesn't have a prototype property</span>\n      fNOP<span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 下行的代码使fBound.prototype是fNOP的实例,因此</span>\n    <span class=\"token comment\">// 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例</span>\n    fBound<span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fNOP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> fBound<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>针对上边的判断使用哪个 this 的写法目前还不理解，估计得等看完原型那块内容。</p>\n<h4 id=\"如何判断-this\">如何判断 this</h4>\n<ol>\n<li>函数是否在 new 中调用（ new 绑定）？如果是的话 this 绑定的是新创建的对象。\nvar bar = new foo()</li>\n<li>函数是否通过 call 、 apply （显式绑定）或者硬绑定调用？如果是的话， this 绑定的是指定的对象。\nvar bar = foo.call(obj2)</li>\n<li>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话， this 绑定的是那个上\n下文对象。\nvar bar = obj1.foo()</li>\n<li>如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 undefined ，否则绑定到\n全局对象。\nvar bar = foo()</li>\n</ol>\n<h3 id=\"绑定例外\">绑定例外</h3>\n<h4 id=\"被忽略的-this\">被忽略的 this</h4>\n<p>在某些情况下进行显示绑定将 this 指定为 null，如果调用的函数确实不关心 this 是没有什么问题，但是，如果使用到 this，那么有可能造成内部错误，尤其是针对第三方的库，这种方式可能会导致许多难以分析和追踪的 bug。</p>\n<h4 id=\"更加安全的-this\">更加安全的 this</h4>\n<p>DMZ 空的非委托对象，这个概念目前还没理解~~~</p>\n<h4 id=\"间接引用\">间接引用</h4>\n<p>另一个需要注意的是，你有可能（有意或者无意地）创建一个函数的“间接引用”，在这\n种情况下，调用这个函数会应用默认绑定规则。\n间接引用最容易在赋值时发生：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> foo<span class=\"token operator\">:</span> foo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token property-access\">foo</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span><span class=\"token property-access\">foo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>赋值表达式 p.foo = o.foo 的返回值是目标函数的引用，因此调用位置是 foo() 而不是\np.foo() 或者 o.foo() 。根据我们之前说过的，这里会应用默认绑定。</p>\n<h4 id=\"软绑定\">软绑定</h4>\n<p>就是指给默认绑定指定一个全局对象和 undefined 以外的值，那就可以实现和硬绑定相同的效果，同时保留隐式绑定或者显示绑定修改 this 的能力。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">softBind</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">softBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token keyword\">var</span> curried <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> fn<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span> <span class=\"token operator\">||</span> global<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> obj<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        curried<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span>curried<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    bound<span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> bound\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"this-词法\">this 词法</h3>\n<p>上述的四种规则适合所有的正常函数，但是，es6 的箭头函数不适用 this 的四种规则，而是根据外层（函数或者全局的作用域来决定）</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 返回一个箭头函数</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//this 继承自 foo()</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span><span class=\"token number\">3</span>\n  <span class=\"token number\">100</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span> obj1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 箭头函数已经捕获 this 为 obj1，箭头函数的this绑定无法被改变</span>\nbar<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span> obj2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2, 不是 3 ！</span>\n</code></pre></div>\n<hr>\n<h2 id=\"第三章-对象\">第三章 对象</h2>\n<h3 id=\"语法\">语法</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 第一种</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 第二种</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3 id=\"类型\">类型</h3>\n<p>JavaScript主要有六种类型</p>\n<ul>\n<li>string</li>\n<li>number</li>\n<li>boolean</li>\n<li>null</li>\n<li>undefined</li>\n<li>object</li>\n</ul>\n<p>简单基本类型（ string 、 boolean 、 number 、 null 和 undefined ）本身并不是对象。</p>\n<p>null 有时会被当作一种对象类型，但是这其实只是语言本身的一个 bug，即对 null 执行\ntypeof null 时会返回字符串 \"object\" 。 1 实际上， null 本身是基本类型。\n有一种常见的错误说法是“JavaScript 中万物皆是对象”，这显然是错误的。</p>\n<p>实际上，JavaScript 中有许多特殊的对象子类型，我们可以称之为复杂基本类型。\n函数就是对象的一个子类型（从技术角度来说就是“可调用的对象”）。JavaScript 中的函\n数是“一等公民”，因为它们本质上和普通的对象一样（只是可以调用），所以可以像操作\n其他对象一样操作函数（比如当作另一个函数的参数）。</p>\n<p>数组也是对象的一种类型，具备一些额外的行为。数组中内容的组织方式比一般的对象要\n稍微复杂一些。</p>\n<h3 id=\"内置对象\">内置对象</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">*</span> <span class=\"token known-class-name class-name\">String</span>\n<span class=\"token operator\">*</span> <span class=\"token known-class-name class-name\">Number</span>\n<span class=\"token operator\">*</span> <span class=\"token known-class-name class-name\">Boolean</span>\n<span class=\"token operator\">*</span> <span class=\"token known-class-name class-name\">Object</span>\n<span class=\"token operator\">*</span> <span class=\"token known-class-name class-name\">Function</span>\n<span class=\"token operator\">*</span> <span class=\"token known-class-name class-name\">Array</span>\n<span class=\"token operator\">*</span> <span class=\"token known-class-name class-name\">Date</span>\n<span class=\"token operator\">*</span> <span class=\"token known-class-name class-name\">RegExp</span>\n<span class=\"token operator\">*</span> <span class=\"token known-class-name class-name\">Error</span>\n</code></pre></div>\n<p>在JavaScript中他们只是一些内置函数，可以当做构造函数来使用。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> strPrimitive <span class=\"token operator\">=</span> <span class=\"token string\">\"I am a string\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> strPrimitive<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 13</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> strPrimitive<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charAt</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"m\"</span>\n</code></pre></div>\n<p>javascript引擎会自动将字面量转换成String对象，所以可以访问属性和方法。同样适用于数值字面量。</p>\n<h3 id=\"内容\">内容</h3>\n<p>获取属性值的方法有两种</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 属性访问</span>\n<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span>\n<span class=\"token comment\">// 键访问</span>\n<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<h4 id=\"可就算属性名\">可就算属性名</h4>\n<p>ES6 增加了可计算属性名，可以在文字形式中使用 [] 包裹一个表达式来当作属性名</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">[</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"world\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">[</span><span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello</span>\nmyObject<span class=\"token punctuation\">[</span><span class=\"token string\">\"foobaz\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// world</span>\n</code></pre></div>\n<h4 id=\"复制对象\">复制对象</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">anotherFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*..*/</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> anotherObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  c<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> anotherArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> anotherObject<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 引用，不是复本！</span>\n  c<span class=\"token operator\">:</span> anotherArray<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 另一个引用！</span>\n  d<span class=\"token operator\">:</span> anotherFunction\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nanotherArray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span> anotherObject<span class=\"token punctuation\">,</span> myObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 浅复制</span>\n<span class=\"token keyword\">var</span> newObj <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> myObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>深复制还需要注意循环引用的问题。</p>\n<h4 id=\"属性描述符\">属性描述符</h4>\n<p>从 ES5 开始，所有的属性都具备了属性描述符</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span> myObject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">// value: 2,</span>\n<span class=\"token comment\">// writable: true,</span>\n<span class=\"token comment\">// enumerable: true,</span>\n<span class=\"token comment\">// configurable: true</span>\n<span class=\"token comment\">// }</span>\n</code></pre></div>\n<p>通过 Object.getOwnPropertyDescriptor(...) 可以获取属性的描述对象，包含 value（属性值），writable（可写的），enumerable（可枚举），configurable（可配置）</p>\n<p>在创建普通属性时，属性描述符会使用默认值，可以通过 Object.defineProperty(...)针对上边的几个值来进行设置。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span> myObject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<ol>\n<li>writable</li>\n</ol>\n<p>控制属性值是否能被写入，设置为 false 时，将无法对属性进行赋值操作。</p>\n<ol start=\"2\">\n<li>configurable</li>\n</ol>\n<p>控制属性值是否可以被配置。也就是说对于可配置的属性值，将其configurable设置为false，那么无法再次使用 Object.defineProperty(...)来将configurable设置为 true，把 configurable 修改成\nfalse 是单向操作，无法撤销！</p>\n<blockquote>\n<p>要注意有一个小小的例外：即便属性是 configurable:false ， 我们还是可以\n把 writable 的状态由 true 改为 false ，但是无法由 false 改为 true 。</p>\n</blockquote>\n<p>除了无法修改， configurable:false 还会禁止删除这个属性</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token keyword\">delete</span> myObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span> myObject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token keyword\">delete</span> myObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>在本例中， delete 只用来直接删除对象的（可删除）属性。如果对象的某个属性是某个\n对象 / 函数的最后一个引用者，对这个属性执行 delete 操作之后，这个未引用的对象 / 函数就可以被垃圾回收。但是，不要把 delete 看作一个释放内存的工具（就像 C/C++ 中那\n样），它就是一个删除对象属性的操作，仅此而已。</p>\n<ol start=\"3\">\n<li>Enumerable</li>\n</ol>\n<p>这个描述符控制的是属性是否会出现在对象的属性枚举中，比如说\nfor..in 循环。如果把 enumerable 设置成 false ，这个属性就不会出现在枚举中，虽然仍\n然可以正常访问它。相对地，设置成 true 就会让它出现在枚举中。</p>\n<h4 id=\"不变性\">不变性</h4>\n<p>有时候你会希望属性或者对象是不可改变（无论有意还是无意）的，在 ES5 中可以通过很\n多种方法来实现。</p>\n<p>很重要的一点是，所有的方法创建的都是浅不变形，也就是说，它们只会影响目标对象和\n它的直接属性。如果目标对象引用了其他对象（数组、对象、函数，等），其他对象的内\n容不受影响，仍然是可变的：</p>\n<ol>\n<li>对象常量\n结合 writable:false 和 configurable:false 就可以创建一个真正的常量属性（不可修改、\n重定义或者删除）：</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>b<span class=\"token operator\">:</span> obj1<span class=\"token punctuation\">}</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nobj1<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">=</span> <span class=\"token number\">456</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span><span class=\"token property-access\">b</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 456</span>\n</code></pre></div>\n<p>无法直接通过 obj2.b = ... 写入，但是，可以改变 obj2.b 的引用对象</p>\n<ol start=\"2\">\n<li>禁止扩展</li>\n</ol>\n<p>如果你想禁止一个对象添加新属性并且保留已有属性，可以使用 Object.prevent\nExtensions(..) ：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventExtensions</span><span class=\"token punctuation\">(</span> myObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">b</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">b</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n</code></pre></div>\n<p>在非严格模式下，创建属性 b 会静默失败。在严格模式下，将会抛出 TypeError 错误。</p>\n<ol start=\"3\">\n<li>密封</li>\n</ol>\n<p>Object.seal(..) 会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用\nObject.preventExtensions(..) 并把所有现有属性标记为 configurable:false 。</p>\n<p>所以，密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性（虽然可以\n修改属性的值）。</p>\n<ol start=\"4\">\n<li>冻结</li>\n</ol>\n<p>Object.freeze(..) 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用\nObject.seal(..) 并把所有“数据访问”属性标记为 writable:false ，这样就无法修改它们\n的值。</p>\n<p>这个方法是你可以应用在对象上的级别最高的不可变性，它会禁止对于对象本身及其任意\n直接属性的修改（不过就像我们之前说过的，这个对象引用的其他对象是不受影响的）。\n你可以“深度冻结”一个对象，具体方法为，首先在这个对象上调用 Object.freeze(..) ，\n然后遍历它引用的所有对象并在这些对象上调用 Object.freeze(..) 。但是一定要小心，因\n为这样做有可能会在无意中冻结其他（共享）对象。</p>\n<h3 id=\"getter-和-setter\">getter 和 setter</h3>\n<p>在 ES5 中可以使用 getter 和 setter 部分改写默认操作，但是只能应用在单个属性上，无法\n应用在整个对象上。getter 是一个隐藏函数，会在获取属性值时调用。setter 也是一个隐藏\n函数，会在设置属性值时调用。</p>\n<p>当你给一个属性定义 getter、setter 或者两者都有时，这个属性会被定义为“访问描述\n符”（和“数据描述符”相对）。对于访问描述符来说，JavaScript 会忽略它们的 value 和\nwritable 特性，取而代之的是关心 set 和 get （还有 configurable 和 enumerable ）特性。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 给 a 定义一个 getter</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span>\nmyObject<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 目标对象</span>\n<span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 属性名</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 描述符</span>\n    <span class=\"token comment\">// 给 b 设置一个 getter</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 确保 b 会出现在对象的属性列表中</span>\n    enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">b</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<h3 id=\"存在性\">存在性</h3>\n<p>通过 obj.key 访问属性的返回值可能是 undefined，但是这个值可能是对象中属性值为 undefined，或者不存在这个属性。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\na<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span> <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p>in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中，相比之下，\nhasOwnProperty(..) 只会检查属性是否在 myObject 对象中，不会检查 [[Prototype]] 链</p>\n<p>但是如果是针对Object.create(null) 的对象，是无法调用 hasOwnProperty 的，可以通过</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> \n</code></pre></div>\n<p>它借用基础的 hasOwnProperty(..) 方法并把它显式绑定到 myObject 上</p>\n<p>in 操作符和 hasOwnProperty 无论属性是否可枚举都可以找到，那么如何区分属性是不是可枚举呢？</p>\n<ul>\n<li>for ... in 不会遍历不可枚举的属性</li>\n<li>propertyIsEnumerable(...) 会检查给定的属性名是否直接存在于对象中（而不是在原型链上）并且满足 enumerable:true 。</li>\n</ul>\n<p>Object.keys(..) 会返回一个数组，包含所有可枚举属性， Object.getOwnPropertyNames(..)会返回一个数组，包含所有属性，无论它们是否可枚举。</p>\n<p>in 和 hasOwnProperty(..) 的区别在于是否查找 [[Prototype]] 链，然而，Object.keys(..)和 Object.getOwnPropertyNames(..) 都只会查找对象直接包含的属性。</p>\n<hr>\n<h2 id=\"第四章-混合对象类\">第四章 混合对象类</h2>\n<h3 id=\"类理论\">类理论</h3>\n<p>类/继承描述了一种代码的组织结构形式---一种在软件中对真实世界问题领域的建模方法。</p>\n<p>类的另一个核心概念是多态，这个概念是说父类的通用行为可以被子类用更特殊的行为重\n写。实际上，相对多态性允许我们从重写行为中引用基础行为。</p>\n<h4 id=\"类设计模式\">类设计模式</h4>\n<p>类是一种设计模式</p>\n<h4 id=\"javascript中的类\">JavaScript中的类</h4>\n<p>由于类是一种设计模式，所以你可以用一些方法（本章之后会介绍）近似实现类的功能。\n为了满足对于类设计模式的最普遍需求，JavaScript 提供了一些近似类的语法。其他语言中的类和 JavaScript\n中的“类”并不一样。</p>\n<h4 id=\"类的继承\">类的继承</h4>\n<p>多态并不表示子类和父类有关联，子类得到的只是父类的一份副本。类的继承其实就是\n复制。</p>\n<h4 id=\"混入\">混入</h4>\n<p>在继承或者实例化时，JavaScript 的对象机制并不会自动执行复制行为。简单来说，\nJavaScript 中只有对象，并不存在可以被实例化的“类”。一个对象并不会被复制到其他对\n象，它们会被关联起来（参见第 5 章）。</p>\n<p>由于在其他语言中类表现出来的都是复制行为，因此 JavaScript 开发者也想出了一个方法来\n模拟类的复制行为，这个方法就是混入。接下来我们会看到两种类型的混入：显式和隐式。</p>\n<h4 id=\"显示混入\">显示混入</h4>\n<p>由于 JavaScript 不会自动实现 Vehicle\n到 Car 的复制行为，所以我们需要手动实现复制功能。这个功能在许多库和框架中被称为\nextend(..) ，但是为了方便理解我们称之为 mixin(..) 。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">mixin</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sourceObj<span class=\"token punctuation\">,</span> targetObju</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> sourceObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      targetObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sourceObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>但是上边这一类写法复制的只是引用，所以，如果 target 中的引用改变可能会引起sourceObj中的改变。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 另一种混入函数，可能有重写风险</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">sourceObj<span class=\"token punctuation\">,</span> targetObj</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> sourceObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  targetObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sourceObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> targetObj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token maybe-class-name\">Vehicle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 首先创建一个空对象并把 Vehicle 的内容复制进去</span>\n<span class=\"token keyword\">var</span> <span class=\"token maybe-class-name\">Car</span> <span class=\"token operator\">=</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span> <span class=\"token maybe-class-name\">Vehicle</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 然后把新内容复制到 Car 中</span>\n<span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n  wheels<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">drive</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Car</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上边这类写法可以不进行判断是否存在相同的属性。但是，还是存在和上一个写法同样的问题，</p>\n<h4 id=\"寄生继承\">寄生继承</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// “传统的 JavaScript 类”Vehicle</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Vehicle</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">engines</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Vehicle</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">ignition</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Turning on my engine.\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Vehicle</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">drive</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ignition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Steering and moving forward!\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// “寄生类” Car</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Car</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 首先，car 是一个 Vehicle</span>\n  <span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 接着我们对 car 进行定制</span>\n  car<span class=\"token punctuation\">.</span><span class=\"token property-access\">wheels</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 保存到 Vehicle::drive() 的特殊引用</span>\n  <span class=\"token keyword\">var</span> vehDrive <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span><span class=\"token property-access\">drive</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 重写 Vehicle::drive()</span>\n  car<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">drive</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  vehDrive<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"Rolling on all \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">wheels</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" wheels!\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> car<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> myCar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCar<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在 Car 中直接实例化 Vehicle，添加覆盖实例的属性并且返回，之后再外边实例化 Car 的时候无需 new 调用。</p>\n<h4 id=\"隐式混入\">隐式混入</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token maybe-class-name\">Something</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">cool</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">greeting</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Something</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Something</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">greeting</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello World\"</span>\n<span class=\"token maybe-class-name\">Something</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">var</span> <span class=\"token maybe-class-name\">Another</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">cool</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 隐式把 Something 混入 Another</span>\n    <span class=\"token maybe-class-name\">Something</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cool</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Another</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Another</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">greeting</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello World\"</span>\n<span class=\"token maybe-class-name\">Another</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 （count 不是共享状态）</span>\n</code></pre></div>\n<hr>\n<h2 id=\"第五章原型\">第五章原型</h2>\n<h3 id=\"prototype\">[[prototype]]</h3>\n<p>javaScript 中的对象有一个特殊的 [[Prototype]] 内置属性，其实就是对于其他对象的引\n用。几乎所有的对象在创建时 [[Prototype]] 属性都会被赋予一个非空的值。</p>\n<h4 id=\"prototype-作用\">[[prototype]] 作用</h4>\n<p>当你试图访问对象属性时候，会触发 [[get]] 操作。比如 myObject.a 。对于默认的 [[Get]] 操作来说，第一步是检查对象本身是否有这个属性，如果有的话就使用它。</p>\n<p>对于默认的 [[Get]] 操作来说，如果无法在对象本身找到需要的属性，就会继续访问对象\n的 [[Prototype]] 链</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> anotherObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建一个关联到 anotherObject 的对象</span>\n<span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span> anotherObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>Object.create(...) 会创建一个\n对象并把这个对象的 [[Prototype]] 关联到指定的对象。</p>\n<p>for..in 循环可以用来遍历对象的可枚举属性列表（包括 [[Prototype]] 链）</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> anotherObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建一个关联到 anotherObject 的对象</span>\n<span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span> anotherObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"found: \"</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// found: a</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h4 id=\"prototype-尽头\">[[prototype]] 尽头</h4>\n<p>所有普通的 [[Prototype]] 链最终都会指向内置的 Object.prototype</p>\n<h4 id=\"属性设置和屏蔽\">属性设置和屏蔽</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">myObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">foo</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ol>\n<li>\n<p>如果 myObject 对象中包含名为 foo 的普通数据访问属性，这条赋值语句只会修改已有的属\n性值。</p>\n</li>\n<li>\n<p>如果 foo 不是直接存在于 myObject 中， [[Prototype]] 链就会被遍历，类似 [[Get]] 操作。如果原型链上找不到 foo ， foo 就会被直接添加到 myObject 上。</p>\n</li>\n<li>\n<p>然而，如果 foo 存在于原型链上层，赋值语句 myObject.foo = \"bar\" 的行为就会有些不同（而且可能很出人意料）。</p>\n</li>\n<li>\n<p>如果属性名 foo 既出现在 myObject 中也出现在 myObject 的 [[Prototype]] 链上层，那么就会发生屏蔽。 myObject 中包含的 foo 属性会屏蔽原型链上层的所有 foo 属性，因为myObject.foo 总是会选择原型链中最底层的 foo 属性。</p>\n</li>\n</ol>\n<p>下面我们分析一下如果 foo 不直接存在于 myObject 中而是存原型在于原型链上层时 myObject.foo = \"bar\" 会出现的三种情况:</p>\n<ol>\n<li>如果在 [[Prototype]] 链上层存在名为 foo 的普通数据访问属性（参见第 3 章）并且没有被标记为只读（ writable:false ），那就会直接在 myObject 中添加一个名为 foo 的新属性，它是屏蔽属性。</li>\n<li>如果在 [[Prototype]] 链上层存在 foo ，但是它被标记为只读（ writable:false ），那么无法修改已有属性或者在 myObject 上创建屏蔽属性。如果运行在严格模式下，代码会\n抛出一个错误。否则，这条赋值语句会被忽略。总之，不会发生屏蔽。</li>\n<li>如果在 [[Prototype]] 链上层存在 foo 并且它是一个 setter（参见第 3 章），那就一定会调用这个 setter。 foo 不会被添加到（或者说屏蔽于） myObject ，也不会重新定义 foo 这个 setter。</li>\n</ol>\n<h4 id=\"类函数\">类函数</h4>\n<p>多年以来，JavaScript 中有一种奇怪的行为一直在被无耻地滥用，那就是模仿类。我们会\n仔细分析这种方法。\n这种奇怪的“类似类”的行为利用了函数的一种特殊特性：所有的函数默认都会拥有一个\n名为 prototype 的公有并且不可枚举（参见第 3 章）的属性，它会指向另一个对象：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Foo</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { }</span>\n</code></pre></div>\n<p>这个对象通常被称为 Foo 的原型，因为我们通过名为 Foo.prototype 的属性引用来访问它。</p>\n<p>这个对象到底是什么？</p>\n<p>最直接的解释就是，这个对象是在调用 new Foo() （参见第 2 章）时创建的，最后会被\n（有点武断地）关联到这个“Foo 点 prototype”对象上。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Foo</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取 a 的原型</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getPrototypeOf</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// Foo.prototype 是 a 的原型</span>\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isPrototypeOf</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>new Foo() 会生成一个新对象（我们称之为 a ），这个新对象的内部链接 [[Prototype]] 关联的是 Foo.prototype 对象。</p>\n<p>最后我们得到了两个对象，它们之间互相关联，就是这样。我们并没有初始化一个类，实\n际上我们并没有从“类”中复制任何行为到一个对象中，只是让两个对象互相关联。</p>\n<p>实际上，绝大多数 JavaScript 开发者不知道的秘密是， new Foo() 这个函数调用实际上并没有直接创建关联，这个关联只是一个意外的副作用。 new Foo() 只是间接完成了我们的目\n标：一个关联到其他对象的新对象。</p>\n<p>那么有没有更直接的方法来做到这一点呢？当然！功臣就是 Object.create(..) ，不过我们\n现在暂时不介绍它。</p>\n<p>继承意味着复制操作，JavaScript（默认）并不会复制对象属性。相反，JavaScript 会在两\n个对象之间创建一个关联，这样一个对象就可以通过委托访问另一个对象的属性和函数。\n委托（参见第 6 章）这个术语可以更加准确地描述 JavaScript 中对象的关联机制。</p>\n<h3 id=\"构造函数\">构造函数</h3>\n<p>到底是什么让我们认为 Foo 是一个构造函数？</p>\n<p>一个原因是我们看到了 new 关键字，在面向类的语言中构造类实例时也会用到它。另\n一个原因是，看起来我们执行了类的构造函数方法， Foo() 的调用方式很像初始化类时类\n构造函数的调用方式。</p>\n<p>除了令人迷惑的“构造函数”语义外， Foo.prototype 还有另一个绝招。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Foo</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">constructor</span> <span class=\"token operator\">===</span> <span class=\"token maybe-class-name\">Foo</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">constructor</span> <span class=\"token operator\">===</span> <span class=\"token maybe-class-name\">Foo</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>Foo.prototype 默认（在代码中第一行声明时！）有一个公有并且不可枚举（参见第 3 章）\n的属性 .constructor ，这个属性引用的是对象关联的函数（本例中是 Foo ）。此外，我们\n可以看到通过“构造函数”调用 new Foo() 创建的对象也有一个 .constructor 属性，指向\n“创建这个对象的函数”。</p>\n<ol>\n<li>构造函数还是调用</li>\n</ol>\n<p>上一段代码很容易让人认为 Foo 是一个构造函数，因为我们使用 new 来调用它并且看到它\n“构造”了一个对象。</p>\n<p>实际上， Foo 和你程序中的其他函数没有任何区别。函数本身并不是构造函数，然而，当\n你在普通的函数调用前面加上 new 关键字之后，就会把这个函数调用变成一个“构造函数\n调用”。实际上， new 会劫持所有普通函数并用构造对象的形式来调用它。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">NothingSpecial</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Don't mind me!\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NothingSpecial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"Don't mind me!\"</span>\na<span class=\"token punctuation\">;</span> <span class=\"token comment\">// {}</span>\n</code></pre></div>\n<p>NothingSpecial 只是一个普通的函数，但是使用 new 调用时，它就会构造一个对象并赋值\n给 a ，这看起来像是 new 的一个副作用（无论如何都会构造一个对象）。这个调用是一个构\n造函数调用，但是 NothingSpecial 本身并不是一个构造函数。</p>\n<p>换句话说，在 JavaScript 中对于“构造函数”最准确的解释是，所有带 new 的函数调用。\n函数不是构造函数，但是当且仅当使用 new 时，函数调用会变成“构造函数调用”。</p>\n<p>之前讨论 .constructor 属性时我们说过，看起来 a.constructor === Foo 为真意味着 a 确实有一个指向 Foo 的 .constructor 属性，但是事实不是这样。这是一个很不幸的误解。实际上， .constructor 引用同样被委托给了 Foo.prototype ，而Foo.prototype.constructor 默认指向 Foo 。</p>\n<p>把 .constructor 属性指向 Foo 看作是 a 对象由 Foo“构造”非常容易理解，但这只不过\n是一种虚假的安全感。 a.constructor 只是通过默认的 [[Prototype]] 委托指向 Foo ，这和“构造”毫无关系。</p>\n<p>举例来说， Foo.prototype 的 .constructor 属性只是 Foo 函数在声明时的默认属性。如果\n你创建了一个新对象并替换了函数默认的 .prototype 对象引用，那么新对象并不会自动获\n得 .constructor 属性。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Foo</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* .. */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* .. */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建一个新原型对象</span>\n<span class=\"token keyword\">var</span> a1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na1<span class=\"token punctuation\">.</span><span class=\"token property-access\">constructor</span> <span class=\"token operator\">===</span> <span class=\"token maybe-class-name\">Foo</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false!</span>\na1<span class=\"token punctuation\">.</span><span class=\"token property-access\">constructor</span> <span class=\"token operator\">===</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true!</span>\n</code></pre></div>\n<p>a1 并没有 .constructor 属性，所以它会委托 [[Prototype]] 链上的 Foo.prototype 。但是这个对象也没有 .constructor 属性（不过默认的 Foo.prototype 对象有这\n个属性！），所以它会继续委托，这次会委托给委托链顶端的 Object.prototype 。这个对象\n有 .constructor 属性，指向内置的 Object(..) 函数。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Foo</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* .. */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* .. */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建一个新原型对象</span>\n<span class=\"token comment\">// 需要在 Foo.prototype 上“修复”丢失的 .constructor 属性</span>\n<span class=\"token comment\">// 新对象属性起到 Foo.prototype 的作用</span>\n<span class=\"token comment\">// 关于 defineProperty(..)，参见第 3 章</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"constructor\"</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Foo</span> <span class=\"token comment\">// 让 .constructor 指向 Foo</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>.constructor 并不是一个不可变属性。它是不可枚举（参见上面的代码）的，但是它的值\n是可写的（可以被修改）。此外，你可以给任意 [[Prototype]] 链中的任意对象添加一个名\n为 constructor 的属性或者对其进行修改，你可以任意对其赋值。</p>\n<p>a1.constructor 是一个非常不可靠并且不安全的引用。通常来说要尽量避免使用这些引用。</p>\n<h3 id=\"原型继承\">原型继承</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Foo</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">myName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Bar</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>label</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">label</span> <span class=\"token operator\">=</span> label<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 我们创建了一个新的 Bar.prototype 对象并关联到 Foo.prototype</span>\n<span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 注意！现在没有 Bar.prototype.constructor 了</span>\n<span class=\"token comment\">// 如果你需要这个属性的话可能需要手动修复一下它</span>\n<span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">myLabel</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">label</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"obj a\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">myName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">myLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"obj a\"</span>\n</code></pre></div>\n<p>这段代码的核心部分就是语句 Bar.prototype = Object.create( Foo.prototype ) 。调用Object.create(..) 会凭空创建一个“新”对象并把新对象内部的 [[Prototype]] 关联到你指定的对象（本例中是 Foo.prototype ）。</p>\n<p>声明 function Bar() { .. } 时，和其他函数一样， Bar 会有一个 .prototype 关联到默认的\n对象，但是这个对象并不是我们想要的 Foo.prototype 。因此我们创建了一个新对象并把\n它关联到我们希望的对象上，直接把原始的关联对象抛弃掉。\n注意，下面这两种方式是常见的错误做法，实际上它们都存在一些问题：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 和你想要的机制不一样！</span>\n<span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 基本上满足你的需求，但是可能会产生一些副作用 :(</span>\n<span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Bar.prototype = Foo.prototype 并不会创建一个关联到 Bar.prototype 的新对象，它只\n是让 Bar.prototype 直接引用 Foo.prototype 对象。因此当你执行类似 Bar.prototype.\nmyLabel = ... 的赋值语句时会直接修改 Foo.prototype 对象本身。显然这不是你想要的结果，否则你根本不需要 Bar 对象，直接使用 Foo 就可以了，这样代码也会更简单一些。</p>\n<p>Bar.prototype = new Foo() 的确会创建一个关联到 Bar.prototype 的新对象。但是它使用了 Foo(..) 的“构造函数调用”，如果函数 Foo 有一些副作用（比如写日志、修改状态、注册到其他对象、给 this 添加数据属性，等等）的话，就会影响到 Bar() 的“后代”，后果\n不堪设想。</p>\n<p>因此，要创建一个合适的关联对象，我们必须使用 Object.create(..) 而不是使用具有副\n作用的 Foo(..) 。这样做唯一的缺点就是需要创建一个新对象然后把旧对象抛弃掉，不能\n直接修改已有的默认对象。</p>\n<p>如果能有一个标准并且可靠的方法来修改对象的 [[Prototype]] 关联就好了。在 ES6 之前，我们只能通过设置 .<strong>proto</strong> 属性来实现，但是这个方法并不是标准并且无法兼容所有浏览器。ES6 添加了辅助函数 Object.setPrototypeOf(..) ，可以用标准并且可靠的方法来修改关联。</p>\n<p>我们来对比一下两种把 Bar.prototype 关联到 Foo.prototype 的方法：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES6 之前需要抛弃默认的 Bar.prototype</span>\n<span class=\"token maybe-class-name\">Bar</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">ptototype</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ES6 开始可以直接修改现有的 Bar.prototype</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPrototypeOf</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"检查类关系\">检查类关系</h4>\n<p>检查一个实例（JavaScript 中的对象）的继承祖先（JavaScript 中的委托关联）通常被称为内省（或者反射）。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Foo</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">blah</span> <span class=\"token operator\">=</span> <span class=\"token spread operator\">...</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-JS\"><code class=\"language-JS\">function isRelatedTo(o1, o2) {\nfunction F(){}\n  F.prototype = o2;\n  return o1 instanceof F;\n}\nvar a = {};\nvar b = Object.create( a );\nisRelatedTo( b, a ); // true</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-JS\"><code class=\"language-JS\">Foo.prototype.isPrototypeOf( a )</code></pre></div>\n<p>上边两段代码效果一样，第二种方法中并不需要间接引用函数（ Foo ），它的 .prototype 属性会被自动访问。换句话说，语言内置的 isPrototypeOf(..) 函数就是我们的 isRelatedTo(..) 函数。</p>\n<p>我们也可以直接获取一个对象的 [[Prototype]] 链。在 ES5 中，标准的方法是：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Object.getPrototypeOf( a );</code></pre></div>\n<p>可以验证一下，这个对象引用是否和我们想的一样：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Object.getPrototypeOf( a ) === Foo.prototype; // true</code></pre></div>\n<p>绝大多数（不是所有！）浏览器也支持一种非标准的方法来访问内部 [[Prototype]] 属性：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">a.__proto__ === Foo.prototype; // true</code></pre></div>\n<p>这个奇怪的 .<strong>proto</strong> （在 ES6 之前并不是标准！）属性“神奇地”引用了内部的\n[[Prototype]] 对象，如果你想直接查找（甚至可以通过 .<strong>proto</strong>.<strong>ptoto</strong>... 来遍历）原型链的话，这个方法非常有用。</p>\n<p>.<strong>proto</strong> 的实现大致上是这样的（对象属性的定义参见第 3 章）：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"__proto__\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getPrototypeOf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ES6 中的 setPrototypeOf(..)</span>\n    <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPrototypeOf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> o <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"对象关联\">对象关联</h3>\n<p>[[Prototype]] 机制就是存在于对象中的一个内部链接，它会引用其他对象。</p>\n<p>通常来说，这个链接的作用是：如果在对象上没有找到需要的属性或者方法引用，引擎就\n会继续在 [[Prototype]] 关联的对象上进行查找。</p>\n<h3 id=\"创建关联\">创建关联</h3>\n<p>那 [[Prototype]] 机制的意义是什么呢？为什么 JavaScript 开发者费这么大的力气（模拟类）在代码中创建这些关联呢？</p>\n<p>Object.create(..) 会创建一个新对象（ bar ）并把它关联到我们指定的对象（ foo ），这样我们就可以充分发挥 [[Prototype]] 机制的威力（委托）并且避免不必要的麻烦（比如使用 new 的构造函数调用会生成 .prototype 和 .constructor 引用）。</p>\n<p>Object.create(null) 会 创 建 一 个 拥 有 空（ 或 者 说 null ） [[Prototype]]\n链接的对象，这个对象无法进行委托。由于这个对象没有原型链，所以\ninstanceof 操作符（之前解释过）无法进行判断，因此总是会返回 false 。\n这些特殊的空 [[Prototype]] 对象通常被称作“字典”，它们完全不会受到原\n型链的干扰，因此非常适合用来存储数据。</p>\n<p>我们并不需要类来创建两个对象之间的关系，只需要通过委托来关联对象就足够了。而\nObject.create(..) 不包含任何“类的诡计”，所以它可以完美地创建我们想要的关联关系。</p>\n<p>Object.create(..) 是在 ES5 中新增的函数，所以在 ES5 之前的环境中（比如旧 IE）如\n果要支持这个功能的话就需要使用一段简单的 polyfill 代码，它部分实现了 Object.\ncreate(..) 的功能：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">create</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>标准 ES5 中内置的 Object.create(..) 函数还提供了一系列附加功能，但是 ES5 之前的版本不支持这些功能。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> anotherObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span> anotherObject<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">b</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token property-access\">c</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<hr>\n<h2 id=\"第六章-行为委托\">第六章 行为委托</h2>\n<h3 id=\"面向委托的设计\">面向委托的设计</h3>\n<h4 id=\"类理论-1\">类理论</h4>\n<p>类的设计方式可能是这样的： 定义一个父类，将通用的行为都定义在父类中，然后用子类去继承父类，并且在子类中进行特殊行为的处理，类的设计模式鼓励在继承的时候进行重写。</p>\n<h4 id=\"委托的理论\">委托的理论</h4>\n<p>不需要将通用的行为内容放到一起，可以分别在放两个对象中，需要的时候直接进行委托。</p>\n<h4 id=\"互相委托\">互相委托</h4>\n<p>如果你引用了一个两边都不存在的属性或者方法，那就会在 [[Prototype]] 链上产生一个无限递归的循环。</p>\n<p>但是如果所有的引用都被严格限制的话， B 是可以委托 A 的，反之亦然。因此，互相委托\n理论上是可以正常工作的，在某些情况下这是非常有用的。</p>\n<p>行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。JavaScript 的\n[[Prototype]] 机制本质上就是行为委托机制。</p>\n",
    "frontmatter": {
      "title": "笔记摘录-你不知道的JavaScript-上篇",
      "img": "https://placem.at/places?h=140",
      "date": "2018-01-16"
    },
    "toc": "<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86\">第一部分</a></p>\n<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">第一章 作用域是什么？</a></p>\n<ul>\n<li><a href=\"#11-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%EF%BC%9A\">1.1 编译原理：</a></li>\n<li><a href=\"#12-%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E7%90%86%E8%A7%A3\">1.2 作用域的理解</a></li>\n<li><a href=\"#13-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%B5%8C%E5%A5%97\">1.3 作用域嵌套</a></li>\n<li><a href=\"#14-%E5%BC%82%E5%B8%B8\">1.4 异常</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F\">第二章 词法作用域</a></p>\n<ul>\n<li><a href=\"#21-%E8%AF%8D%E6%B3%95%E9%98%B6%E6%AE%B5\">2.1 词法阶段</a></li>\n<li><a href=\"#22-%E8%AF%8D%E6%B3%95%E6%AC%BA%E9%AA%97\">2.2 词法欺骗</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F\">第三章 函数作用域和块作用域</a></p>\n<ul>\n<li><a href=\"#%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F\">函数作用域</a></li>\n<li><a href=\"#%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F\">块作用域</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%8F%90%E5%8D%87\">第四章 提升</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AD%E5%8C%85\">第五章 作用域闭包</a></p>\n<ul>\n<li><a href=\"#%E9%97%AD%E5%8C%85\">闭包</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86\">第二部分</a></p>\n<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%85%B3%E4%BA%8E-this\">第一章 关于 this</a></p>\n<ul>\n<li><a href=\"#%E5%AF%B9-this-%E7%9A%84%E8%AF%AF%E8%A7%A3\">对 this 的误解</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%85%A8%E9%9D%A2%E4%BA%86%E8%A7%A3-this\">第二章 全面了解 this</a></p>\n<ul>\n<li><a href=\"#this%E7%9A%84%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99\">this的绑定规则</a></li>\n<li><a href=\"#%E5%9B%9B%E7%A7%8D%E7%BB%91%E5%AE%9A%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\">四种绑定的优先级</a></li>\n<li><a href=\"#%E7%BB%91%E5%AE%9A%E4%BE%8B%E5%A4%96\">绑定例外</a></li>\n<li><a href=\"#this-%E8%AF%8D%E6%B3%95\">this 词法</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%AF%B9%E8%B1%A1\">第三章 对象</a></p>\n<ul>\n<li><a href=\"#%E8%AF%AD%E6%B3%95\">语法</a></li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B\">类型</a></li>\n<li><a href=\"#%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\">内置对象</a></li>\n<li><a href=\"#%E5%86%85%E5%AE%B9\">内容</a></li>\n<li><a href=\"#getter-%E5%92%8C-setter\">getter 和 setter</a></li>\n<li><a href=\"#%E5%AD%98%E5%9C%A8%E6%80%A7\">存在性</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%B7%B7%E5%90%88%E5%AF%B9%E8%B1%A1%E7%B1%BB\">第四章 混合对象类</a></p>\n<ul>\n<li><a href=\"#%E7%B1%BB%E7%90%86%E8%AE%BA\">类理论</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%8E%9F%E5%9E%8B\">第五章原型</a></p>\n<ul>\n<li><a href=\"#prototype\">[[prototype]]</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\">构造函数</a></li>\n<li><a href=\"#%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF\">原型继承</a></li>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1%E5%85%B3%E8%81%94\">对象关联</a></li>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E5%85%B3%E8%81%94\">创建关联</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E5%85%AD%E7%AB%A0-%E8%A1%8C%E4%B8%BA%E5%A7%94%E6%89%98\">第六章 行为委托</a></p>\n<ul>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E5%A7%94%E6%89%98%E7%9A%84%E8%AE%BE%E8%AE%A1\">面向委托的设计</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
    "name": "笔记摘录-你不知道的JavaScript-上篇",
    "id": "c34d6ff7671cf4ca397b709b871b1f32",
    "prev": {
      "name": "在线Web IDE--code server部署",
      "id": "00e7f2b491b451d6822c03c6285ad404"
    },
    "next": {
      "name": "笔记摘录-你不知道的JavaScript-下篇",
      "id": "a99a03fe768754b82f7e545b55d5f3de"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/笔记摘录-你不知道的JavaScript-下篇.md",
      "/home/zepang/WorkSpace/blog/posts/笔记摘录-你不知道的JavaScript-下篇.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"第一部分\">第一部分</h1>\n<h2 id=\"第一章深入编程\">第一章深入编程</h2>\n<h3 id=\"实践\">实践</h3>\n<p>掌握开发者工具终端：<a href=\"http://blog.teamtreehouse.com/mastering-developer-tools-console\">http://blog.teamtreehouse.com/mastering-developer-tools-console</a></p>\n<p>第一章讲一些基本的JavaScript编程语法控制语句等这些内容，比较基础跳过</p>\n<hr>\n<h3 id=\"第二章深入javascript\">第二章深入JavaScript</h3>\n<p>需要了解的两个术语：</p>\n<ul>\n<li>polyfilling</li>\n</ul>\n<p>单词\"polyfill\"，用于表示根据新特性的定义，创建一段与之等价但能够在旧的JavaScript环境中执行的代码。</p>\n<p>ES5-Shim（<a href=\"https://github.com/es-shims/es5-shim\">https://github.com/es-shims/es5-shim</a>）和 ES6-Shim（<a href=\"https://github.com/es-shims/es6-shim\">https://github.com/es-shims/es6-shim</a>）</p>\n<ul>\n<li>transpiling</li>\n</ul>\n<p>由 transforming 和 compiling 组合而成的术语，因为语言中新增的语法无法通过 pollyfilling 来解决兼容性问题，所以需要工具讲新的语法转换成旧的语法。</p>\n<ul>\n<li>\n<p>Babel （https://babeljs.io/，从 6 到 5）\n从 ES6+ 编译转换到 ES5</p>\n</li>\n<li>\n<p>Traceur （https://github.com/google/traceur-compiler）\n将 ES6、ES7 及后续版本转换到 ES5</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"第二部分-es6以及更新的版本\">第二部分 ES6以及更新的版本</h1>\n<h2 id=\"第一章-es现在与未来\">第一章 ES?现在与未来</h2>\n<h3 id=\"版本\">版本</h3>\n<p>JavaScript的官方名称是“ECMAScript”，最早的JavaScript版本是ES1和ES2，它们不怎么被人所知，实现也很少。第一个流行起来的JavaScript版本是ES3，它成为浏览器 IE6-8 和早前的旧版 Android 2.x 移动浏览器的JavaScript 标准。出于某些政治原因，倒霉的 ES4 从来没有成形，这里我们不做讨论。</p>\n<p>2009 年，ES5 正式发布（然后是 2011 年的 ES5.1），在当代浏览器（包括 Firefox、Chrome、Opera、Safari 以及许多其他类型）的进化和爆发中成为 JavaScript 广泛使用的标准。</p>\n<p>下一个 JavaScript 版本（发布日期从 2013 年拖到 2014 年，然后又到 2015 年）标签，之前的共识显然是 ES6。</p>\n<p>但是，在 ES6 规范发展后期， 出现了这样的方案：有人建议未来的版本应该改成基于年\n份，比如 ES2016（也就是 ES7）来标示在 2016 年结束之前敲定的任何版本的规范。尽管\n有异议，但比起后来提出的方案 ES2015，很可能保持统治地位的版本命名仍是 ES6。而\nES2016 可能会采用新的基于年份的命名方案。</p>\n<h2 id=\"第二章语法\">第二章语法</h2>\n<h3 id=\"对象字面量拓展\">对象字面量拓展</h3>\n<h4 id=\"简洁属性\">简洁属性</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// es5 </span>\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">x</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// es6</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">x</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>简洁的属性实际上是等价于未命名函数。如果出现下边的情况会报错</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runSomething</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">radom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">radom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> o<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">something</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">something</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">something</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">something</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword control-flow\">return</span> y <span class=\"token operator\">-</span>x\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>如果更换成ES6的间接写法：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">runSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">something</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">something</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 会报错，找不到 something</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword control-flow\">return</span> y <span class=\"token operator\">-</span>x\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>有人喜欢用下边的写法：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">runSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">something</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">something</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 会报错，找不到 something</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword control-flow\">return</span> y <span class=\"token operator\">-</span>x\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>但是在某些情况下，this会被隐式绑定，比如：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">button<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>所以这一点需要注意。</p>\n<h3 id=\"设定-prototype\">设定 prototype</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> o1<span class=\"token punctuation\">.</span><span class=\"token property-access\">__proto__</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>现在 ES6 已经有了新的工具函数来设置</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPrototypeOf</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3 id=\"super-对象\">super 对象</h3>\n<p>通常把 super 看作和类相关的属性，但是因为JavaScript的类是原型的类，而不是对象的本质，所以 super 对于普通对象的简洁方法一样有效。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"o1:foo\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"o2:foo\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPrototypeOf</span><span class=\"token punctuation\">(</span> o2<span class=\"token punctuation\">,</span> o1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\no2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// o1:foo</span>\n          <span class=\"token comment\">// o2:foo</span>\n</code></pre></div>\n<p>基本上这里的 super 就是 Object.getPrototypeOf(o2)</p>\n<p>super 只允许在简洁方法中出现，而不允许在普通函数表达式属性中出\n现。也只允许以 super.XXX 的形式（用于属性 / 方法访问）出现，而不能以\nsuper() 的形式出现。</p>\n<h3 id=\"标签模板字面量\">标签模板字面量</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">string<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> desc <span class=\"token operator\">=</span> <span class=\"token string\">'awesome'</span>\nfoo<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Everything is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>desc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!!</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// ['Everything is', '!!']</span>\n<span class=\"token comment\">// ['awesome']</span>\n</code></pre></div>\n<p>第一个参数，名为 strings ，是一个由所有普通字符串（插入表达式之间的部分）组成的\n数组。得到的 strings 数组中有两个值： \"Everything is\" 和 \"!!\" 。</p>\n<p>本质上说，这是一类不需要 ( .. ) 的特殊函数调用。标签（tag）部分，即 <code>..</code> 字符串字\n面量之前的 foo 这一部分 , 是一个要调用的函数值。实际上，它可以是任意结果为函数的\n表达式，甚至可以是一个结果为另一个函数的函数调用，就像下面这样：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">string<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> desc <span class=\"token operator\">=</span> <span class=\"token string\">'awesome'</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Everything is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>desc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!!</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// ['Everything is', '!!']</span>\n<span class=\"token comment\">// ['awesome']</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">tag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> strings<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>idx</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> s <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> values<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> desc <span class=\"token operator\">=</span> <span class=\"token string\">\"awesome\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> tag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Everything is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>desc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> text <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Everything is awesome!</span>\n</code></pre></div>\n<p>下面是一个简单的应用，将数字格式化：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">dollabillsyall</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> strings<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>idx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> values<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        s <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">$</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>values<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        s <span class=\"token operator\">+=</span> values<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> s <span class=\"token operator\">+</span> v\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> amt1 <span class=\"token operator\">=</span> <span class=\"token number\">11.99</span><span class=\"token punctuation\">,</span>\n    amt2 <span class=\"token operator\">=</span> amt1 <span class=\"token operator\">*</span> <span class=\"token number\">1.08</span><span class=\"token punctuation\">,</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"Kyle\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> dollabillsyall\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Thanks for your purchase, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">! Your</span>\n<span class=\"token string\">product cost was </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>amt1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, which with tax</span>\n<span class=\"token string\">comes out to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>amt2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> text <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Thanks for your purchase, Kyle! Your</span>\n<span class=\"token comment\">// product cost was $11.99, which with tax</span>\n<span class=\"token comment\">// comes out to $12.95.</span>\n</code></pre></div>\n<h4 id=\"原始（raw）字符串\">原始（raw）字符串</h4>\n<p>在前面的代码中，标签函数收到一个名为strings的参数，这个参数是一个数组。但是还包括了一些额外的数据：所有字符串的原始未处理版本，可以像下面这样通过 .raw 属性访问这\n些原始字符串值：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">showraw</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> strings <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> strings<span class=\"token punctuation\">.</span><span class=\"token property-access\">raw</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nshowraw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello\\nWorld</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ \"Hello</span>\n<span class=\"token comment\">// World\" ]</span>\n<span class=\"token comment\">// [ \"Hello\\nWorld\" ]</span>\n</code></pre></div>\n<h3 id=\"箭头函数\">箭头函数</h3>\n<p>除了词法 this ，箭头函数还有词法 arguments ——它们没有自己的 arguments 数组，而是继承自父层——词法 super 和 new.target 也是一样（参见 3.4 节）。</p>\n<h3 id=\"for--of\">for ... of</h3>\n<p>ES6 在把 JavaScript 中我们熟悉的 for 和 for..in 循环组合起来的基础上，又新增了一个\nfor..of 循环，在迭代器产生的一系列值上循环。\nfor..of 循环的值必须是一个 iterable，或者说它必须是可以转换 / 封箱到一个 iterable 对象\n的值（参见本系列《你不知道的 JavaScript（中卷）》第一部分）。iterable 就是一个能够产\n生迭代器供循环使用的对象。</p>\n<p>这里是 ES6 的但是不用 for..of 的等价代码，也可以用来展示如何手动在迭代器上迭代</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> val<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">,</span> it <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>ret<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nval <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> val <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// \"a\" \"b\" \"c\" \"d\" \"e\"</span>\n</code></pre></div>\n<hr>\n<h2 id=\"代码组织\">代码组织</h2>\n<p>编写 JavaScript 代码是一回事，而合理组织代码则是另一回事。利用通用模式来组织和复用代码显著提高了代码的可读性和可理解性。简单的来说，就是代码怎么写都能实现的功能，但是通过模式来写的话，可读性会比较好。</p>\n<p>ES6 提供了几个重要的特性。</p>\n<ul>\n<li>迭代器</li>\n<li>生成器</li>\n<li>模块</li>\n<li>类</li>\n</ul>\n<h3 id=\"迭代器\">迭代器</h3>\n<h4 id=\"迭代器的接口\">迭代器的接口</h4>\n<p>ES6 第 25.1.1.2 节（https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iterator-interface）详细解释了 Iterator 接口，包括如下要求：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">Iterator</span> <span class=\"token punctuation\">[</span>required<span class=\"token punctuation\">]</span> \n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>method<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> 取得下一个IteratorResult\n</code></pre></div>\n<p>有些迭代器还扩展支持两个可选成员：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">Iterator</span> <span class=\"token punctuation\">[</span>optional<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>method<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> 停止迭代器并返回IteratorResult\n        <span class=\"token keyword control-flow\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>method<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> 报错并返回IteratorResult\n</code></pre></div>\n<p>IteratorResult 接口指定如下：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">IteratorResult</span>\n      value <span class=\"token punctuation\">{</span>property<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> 当前迭代值或者最终返回值（如果<span class=\"token keyword nil\">undefined</span>为可选的）\n      done <span class=\"token punctuation\">{</span>property<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> 布尔值，指示完成状态\n</code></pre></div>\n<blockquote>\n<p>我把这些接口称为隐式的，并不是因为它们没有在规范中显式说明——它们有说明！——而是因为它们没有暴露为代码可以访问的直接对象。在 ES6中，JavaScript 不支持任何“接口”的概念，所以你自己的代码符合规范只是单纯的惯用法。然而，在 JavaScript 期望迭代器的位置 ( 比如 for..of 循环 ) 所提供的东西必须符合这些接口，否则代码会失败。</p>\n</blockquote>\n<p>还有一个 Iterable 接口，用来表述必需能够提供生成器的对象：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token maybe-class-name\">Iterable</span>\n      @@<span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>method<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> 产生一个 <span class=\"token maybe-class-name\">Iterator</span>\n</code></pre></div>\n<h4 id=\"next迭代\">next()迭代</h4>\n<p>调用数组和字符串的[Symbol.iterator]方法可以生成迭代器</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 1, done: false }</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 2, done: false }</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 3, done: false }</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: undefined, done: true }</span>\n\n<span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: \"h\", done: false }</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: \"e\", done: false }</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>ES6 还包括几个新的称为集合的数据结构，这些集合不仅本身是iterable，还提供了API方法来产生迭代器：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nm<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nm<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> cool<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> it1 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> it2 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nit1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: [ \"foo\", 42 ], done: false }</span>\nit2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: [ \"foo\", 42 ], done: false }</span>\n<span class=\"token spread operator\">...</span>\n</code></pre></div>\n<h4 id=\"迭代器循环\">迭代器循环</h4>\n<p>ES6 的 for..of 循环直接消耗一个符合规范的 iterabl，\n如果一个迭代器也是一个 iterable，那么它可以直接用于 for ... of 的循环。你可以通过为迭代\n器提供一个 Symbol.iterator 方法简单返回这个迭代器本身使它成为 iterable：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 使迭代器it成为iterable</span>\n  <span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nit<span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> it<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> v <span class=\"token keyword\">of</span> it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>要彻底理解这样的循环如何工作，可以回顾一下第 2 章 for..of 循环的等价 for 形式：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> v<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  v <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>可以看到每次迭代之前都调用了 it.next() ，然后查看一下 res.done 。如果 res.done 为 true ，表达式求值为 false ，迭代就不会发生。</p>\n<p>回忆一下，前面我们建议迭代器一般不应与最终预期的值一起返回 done: true 。现在能明\n白其中的原因了吧。\n如果迭代器返回 { done: true, value: 42 } ， for..of 循环会完全丢弃值 42 ，那么这个值就被丢失了。因为这个原因，假定你的迭代器可能会通过 for..of 循环或者手动的等价for 形式模式消耗，那么你应该等返回所有的相关迭代值之后，再返回 done: true 来标明迭代完毕。</p>\n<h4 id=\"自定义迭代器\">自定义迭代器</h4>\n<p>接下来考虑一个迭代器，它的设计意图是用来在一系列（也就是一个队列）动作上运行，一次一个条目</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> task <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> steps <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">actions</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">next</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>steps<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> steps<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> res<span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">tasks<span class=\"token punctuation\">.</span><span class=\"token property-access\">actions</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"step 1:\"</span><span class=\"token punctuation\">,</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"step 2:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"step 3:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// step 1: 10</span>\n<span class=\"token comment\">// { value: 20, done: false }</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// step 2: 20 50</span>\n<span class=\"token comment\">// { value: 120, done: false }</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// step 3: 20 50 120</span>\n<span class=\"token comment\">// { value: 1120, done: false }</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { done: true }</span>\n</code></pre></div>\n<p>定义一个迭代器来进行单个数据上的操作</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">,</span> \n    <span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">{</span>\n      writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">iterator</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> inc<span class=\"token punctuation\">,</span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> top <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 正向还是反向迭代？</span>\n        inc <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">next</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                i <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">min</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> inc<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                i <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> inc<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">}</span>\n\n              <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> top<span class=\"token punctuation\">)</span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> i<span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"迭代器消耗\">迭代器消耗</h4>\n<ul>\n<li>第一种是利用for...of一个一个消耗</li>\n<li>第二种是利用spread运算符一次性消耗</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> it\nite<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: undefined, done: true}</span>\nw <span class=\"token comment\">// [1, 2, 3, 4]</span>\n</code></pre></div>\n<h3 id=\"生成器\">生成器</h3>\n<h4 id=\"语法\">语法</h4>\n<h4 id=\"yield\">yield</h4>\n<ul>\n<li>普通的yield语法是暂停符号，也可以认为是表达式，可以想象return的机制，但是不会终止。</li>\n<li>yield 委托，语法和普通的yield差不多，但是机制不一样。对于yield...表达式，完成值来自于用it.next()恢复生成器的值，而对于yield *...表达式，完成值来自于北委托的迭代器的返回值。</li>\n</ul>\n<p>yield *可以递归调用：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: 24, done: true}</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">nexzt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: undefined, done: true}</span>\n</code></pre></div>\n<p>可以看出完全没有暂停。</p>\n<h4 id=\"提前完成\">提前完成</h4>\n<h4 id=\"错误处理\">错误处理</h4>\n<h4 id=\"transpile-生成器\">Transpile 生成器</h4>\n<h4 id=\"生成器使用场景\">生成器使用场景</h4>\n<h3 id=\"模块\">模块</h3>\n<h3 id=\"类\">类</h3>\n",
    "frontmatter": {
      "title": "笔记摘录-你不知道的JavaScript-下篇",
      "img": "https://placem.at/places?h=140",
      "date": "2018-03-29"
    },
    "toc": "<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86\">第一部分</a></p>\n<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0%E6%B7%B1%E5%85%A5%E7%BC%96%E7%A8%8B\">第一章深入编程</a></p>\n<ul>\n<li><a href=\"#%E5%AE%9E%E8%B7%B5\">实践</a></li>\n<li><a href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%B7%B1%E5%85%A5javascript\">第二章深入JavaScript</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-es6%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%96%B0%E7%9A%84%E7%89%88%E6%9C%AC\">第二部分 ES6以及更新的版本</a></p>\n<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0-es%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5\">第一章 ES?现在与未来</a></p>\n<ul>\n<li><a href=\"#%E7%89%88%E6%9C%AC\">版本</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0%E8%AF%AD%E6%B3%95\">第二章语法</a></p>\n<ul>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E6%8B%93%E5%B1%95\">对象字面量拓展</a></li>\n<li><a href=\"#%E8%AE%BE%E5%AE%9A-prototype\">设定 prototype</a></li>\n<li><a href=\"#super-%E5%AF%B9%E8%B1%A1\">super 对象</a></li>\n<li><a href=\"#%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F\">标签模板字面量</a></li>\n<li><a href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\">箭头函数</a></li>\n<li><a href=\"#for--of\">for ... of</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87\">代码组织</a></p>\n<ul>\n<li><a href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8\">迭代器</a></li>\n<li><a href=\"#%E7%94%9F%E6%88%90%E5%99%A8\">生成器</a></li>\n<li><a href=\"#%E6%A8%A1%E5%9D%97\">模块</a></li>\n<li><a href=\"#%E7%B1%BB\">类</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
    "name": "笔记摘录-你不知道的JavaScript-下篇",
    "id": "a99a03fe768754b82f7e545b55d5f3de",
    "prev": {
      "name": "笔记摘录-你不知道的JavaScript-上篇",
      "id": "c34d6ff7671cf4ca397b709b871b1f32"
    },
    "next": {
      "name": "笔记摘录-你不知道的JavaScript-中篇",
      "id": "8d1f79b5c05b29fa2dc83d23d583f1ce"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/笔记摘录-你不知道的JavaScript-中篇.md",
      "/home/zepang/WorkSpace/blog/posts/笔记摘录-你不知道的JavaScript-中篇.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1 id=\"第一部分-类型和语法\">第一部分 类型和语法</h1>\n<h2 id=\"第一章-类型\">第一章 类型</h2>\n<p>要正确合理地进行类型转换（参见第 4 章），我们必须掌握 JavaScript 中的各个类型及其内在行为。几乎所有的 JavaScript 程序都会涉及某种形式的强制类型转换，处理这些情况时\n我们需要有充分的把握和自信。</p>\n<h3 id=\"内置类型\">内置类型</h3>\n<p>上卷第二部分对象一章提到JavaScript的类型有6种，然而这里提到了7种：</p>\n<ul>\n<li>空值(null)</li>\n<li>未定义(undefined)</li>\n<li>布尔值(boolean)</li>\n<li>数字(number)</li>\n<li>字符串(string)</li>\n<li>对象(object)</li>\n<li>符号(symbol, ES6 新增)</li>\n</ul>\n<blockquote>\n<p>除对象之外，其他统称为“基本类型”。</p>\n</blockquote>\n<p>我们可以使用 typeof 运算符来查看值的类型：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword nil\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">42</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">\"42\"</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">{</span> life<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// ES6中新加入的类型</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"symbol\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>以上6种类型都有相应的字符串值与之相呼应，但是不包括 null</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span>\n</code></pre></div>\n<p>正确的返回结果应该是 \"null\" ，但这个 bug 由来已久，在 JavaScript 中已经存在了将近\n二十年，也许永远也不会修复，因为这牵涉到太多的 Web 系统，“修复”它会产生更多的\nbug，令许多系统无法正常工作。</p>\n<p>我们需要复合条件来检测 null：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword null nil\">null</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>还有一种情况：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/* .. */</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>function （函数）也是 JavaScript 的一个内置类型。然而查阅规范就会知道，\n它实际上是 object 的一个“子类型”。具体来说，函数是“可调用对象”，它有一个内部属\n性 [[Call]] ，该属性使其可以被调用。</p>\n<p>函数不仅是对象，还可以拥有属性：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token charclass class-name\">.</span><span class=\"token charclass class-name\">.</span><span class=\"token charclass class-name\">.</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<p>函数的 length 属性值是其参数的个数</p>\n<p>让我们看看数组：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token comment\">//true</span>\n</code></pre></div>\n<p>数组也是对象。确切地说，它也是 object 的一个“子类型”（参见第 3 章），数组的\n元素按数字顺序来进行索引（而非普通像对象那样通过字符串键值），其 length 属性是元\n素的个数。</p>\n<h3 id=\"值和类型\">值和类型</h3>\n<p><strong>JavaScript 的变量是没有类型的，只有值才有。变量可以持有任何类型的值。</strong></p>\n<p>换个角度来理解就是，JavaScript 不做“类型强制”；也就是说，语言引擎不要求变量总是\n持有与其初始值同类型的值。一个变量可以现在被赋值为字符串类型值，随后又被赋值为\n数字类型值。</p>\n<h3 id=\"undefined-和-undeclared\">undefined 和 undeclared</h3>\n<p>变量在未持有值的时候是 undefined。</p>\n<p>在作用域中未声明变量时未 undeclared</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: b is not defined</span>\n</code></pre></div>\n<p>通常变量在未定义的情况下使用会报 is not defined 的错误，但是有时候却不是，但是 typeof 的处理方式却不是这样：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">typeof</span> b <span class=\"token comment\">// undefined</span>\n</code></pre></div>\n<p>对于 undeclared（或者 not defined）变量， typeof 照样返回 \"undefined\" 。请注意虽然 b 是\n一个 undeclared 变量，但 typeof b 并没有报错。这是因为 typeof 有一个特殊的安全防范机制。</p>\n<p>之前在上卷中也提到一个问题，对象取值的时候有可能返回 undefined，但是我们也不能根据 undefined 来判断，对象是因为不存在这个属性还是对象属性值为 undefined.</p>\n<h4 id=\"typeof-undeclared\">typeOf Undeclared</h4>\n<p>typeOf 这种防范机制在某些情况下是十分有作用的，比如判断全局的变量是否存在：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 这样判断会报错，会中断代码</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">DEBUG</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 但是换成 typeOf 来判断是安全的，不存在的时候只会抛出一个 undefined </span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>typeOf <span class=\"token constant\">DEBUG</span> <span class=\"token operator\">!==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>当然你也可以这样写，可以不通过 typeOf:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEBUG</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">atob</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>因为访问属性，就算不存在这个属性也会返回 undefined</p>\n<hr>\n<h2 id=\"值\">值</h2>\n<h3 id=\"数组\">数组</h3>\n<p>和其他强类型语言不同，在 JavaScript 中，数组可以容纳任何类型的值，可以是字符串、\n数字、对象（ object ），甚至是其他数组（多维数组就是通过这种方式来实现的）</p>\n<p>对数组声明后即可向其中加入值，不需要预先设定大小</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>使用 delete 运算符可以将单元从数组中删除，但是请注意，单元删除后，数\n组的 length 属性并不会发生变化。第 5 章将详细介绍 delete 运算符。</p>\n<p>数组是通过数字进行索引，但是数组也是对象，所以也可以包含字符串键值和属性</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\narr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token comment\">// 0</span>\narr<span class=\"token punctuation\">[</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\narr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token comment\">// 13</span>\narr <span class=\"token comment\">// [empty X 12, 2, foo: 2]</span>\n</code></pre></div>\n<p>用字符串键值对存储，数组的 length 不会产生变化，但是需要注意的是，字符串如果被强制转换成十进制的话，它会被当成数字索引来处理，所以上边的 arr['12']就被当初了 arr[12]，所以，数组的length 变化为13</p>\n<h3 id=\"类数组\">类数组</h3>\n<p>例如一些 dom 查询会返回 dom 元素列表，或者是 arguments 对象访问函数的参数列表，它们不是正在意义上的数组，但是与数组十分类似。通过工具函数可以将这些类数组转换成真正的数组。</p>\n<p>工具函数 slice 经常被用于这类转换：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>'bam<span class=\"token punctuation\">)</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['bar', 'baz', 'bam']</span>\n</code></pre></div>\n<p>用 ES6 中的内置工具函数 Array.from(..) 也能实现同样的功能：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span> arguments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<blockquote>\n<p>Array.from(..) 有一些非常强大的功能，将在本系列的《你不知道的JavaScript（下卷）》的“ES6 &#x26; Beyond”部分详细介绍。</p>\n</blockquote>\n<h3 id=\"字符串\">字符串</h3>\n<p>字符串经常被当成字符数组。字符串的内部实现究竟有没有使用数组并不好说，但\nJavaScript 中的字符串和字符数组并不是一回事，最多只是看上去相似而已。</p>\n<p>字符串和数组的确很相似，它们都是类数组，都有 length 属性以及 indexOf(..) （从 ES5\n开始数组支持此方法）和 concat(..) 方法：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nb<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"o\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nb<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"o\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"foobar\"</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"f\",\"o\",\"o\",\"b\",\"a\",\"r\"]</span>\na <span class=\"token operator\">===</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nb <span class=\"token operator\">===</span> d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\na<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"foo\"</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"f\",\"o\",\"o\"]</span>\n</code></pre></div>\n<p>但这并不意味着它们都是“字符数组”，比如：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"foo\"</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"f\",\"O\",\"o\"]</span>\n</code></pre></div>\n<p>JavaScript 中的字符串是不可变的，但是数组是可变的。</p>\n<p>字符串不可变是指字符串的成员函数不会改变字符串的原始值，而是创建并且返回一个新的字符串。而数组的成员函数都是在其原始值进行操作的。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">===</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\na<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"foo\"</span>\nc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"FOO\"</span>\nb<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"!\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"f\",\"O\",\"o\",\"!\"]</span>\n</code></pre></div>\n<p>许多数组函数用来处理字符串很方便。虽然字符串没有这些函数，但可以通过“借用”数\n组的非变更方法来处理字符串：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">a<span class=\"token punctuation\">.</span><span class=\"token property-access\">join</span> <span class=\"token comment\">// undefined</span>\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">map</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// f-o-o</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> v<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// F.O.O</span>\n</code></pre></div>\n<p>数组有一个成员函数 reverse()，这个函数目前无法借用，想要进行字符串的反转，可以先将字符串转换成数组：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3 id=\"数字\">数字</h3>\n<p>JavaScript 只有一种数字类型：number（数字），包括“整数”和带小数的十进制数。“整数”之所以加引号是因为和其他语言不同，JavaScript 没有真正意义上的整数，这也是\n它一直以来为人诟病的地方。这种情况在将来或许会有所改观，但目前只有数字类型。\nJavaScript 中的“整数”就是没有小数的十进制数。</p>\n<h4 id=\"数字的语法\">数字的语法</h4>\n<p>JavaScript 中的数字常量一般用十进制来表示。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">42.3</span>\n</code></pre></div>\n<p>数字前面的 0 和 小数点后小数部分后面的 0 可以去掉</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0.32</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">.32</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">43.0</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">43</span>\n</code></pre></div>\n<p>特别大和特别小的数字默认用指数格式显示，与 toExponential() 函数的输出结果相同。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5E10</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50000000000</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toExponential</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"5e+10\"</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2.5e+21</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> a<span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2e-11</span>\n</code></pre></div>\n<p>tofixed(..) 方法可指定小数部分的显示位数：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42.59</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"43\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.6\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.59\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.590\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.5900\"</span>\n</code></pre></div>\n<p>toPrecision(..) 方法用来指定有效数位的显示位数：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42.59</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toPrecision</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4e+1\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toPrecision</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"43\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toPrecision</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.6\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toPrecision</span><span class=\"token punctuation\">(</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.59\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toPrecision</span><span class=\"token punctuation\">(</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.590\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toPrecision</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.5900\"</span>\n</code></pre></div>\n<p>上面的方法不仅适用于数字变量，也适用于数字常量。不过对于 . 运算符需要给予特别注\n意，因为它是一个有效的数字字符，会被优先识别为数字常量的一部分，然后才是对象属\n性访问运算符。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 无效语法：</span>\n<span class=\"token number\">42.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError</span>\n<span class=\"token comment\">// 下面的语法都有效：</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.000\"</span>\n<span class=\"token number\">0.42</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"0.420\"</span>\n<span class=\"token number\">42.</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toFixed</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.000\"</span>\n</code></pre></div>\n<p>42.tofixed(3) 是无效语法，因为 . 被视为常量 42. 的一部分（如前所述），所以没有 . 属性访问运算符来调用 tofixed 方法。\n42..tofixed(3) 则没有问题，因为第一个 . 被视为 number 的一部分，第二个 . 是属性访问运算符。只是这样看着奇怪，实际情况中也很少见。在基本类型值上直接调用的方法并不\n多见，不过这并不代表不好或不对。</p>\n<h4 id=\"较小的数值\">较小的数值</h4>\n<p>二进制浮点数最大的问题（不仅 JavaScript，所有遵循 IEEE 754 规范的语言都是如此），是会出现如下情况：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p>从数学角度来说，上面的条件判断应该为 true ，可结果为什么是 false 呢？\n简单来说，二进制浮点数中的 0.1 和 0.2 并不是十分精确，它们相加的结果并非刚好等于\n0.3 ，而是一个比较接近的数字 0.30000000000000004 ，所以条件判断结果为 false 。</p>\n<p>那么应该怎样来判断 0.1 + 0.2 和 0.3 是否相等呢？\n最常见的方法是设置一个误差范围值，通常称为“机器精度”（machine epsilon），对\nJavaScript 的数字来说，这个值通常是 2^-52 (2.220446049250313e-16) 。</p>\n<p>从 ES6 开始，这个值就定义在Number.EPSILON中，我们可以直接使用，也可以用 polyfill:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span>n2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">abs</span><span class=\"token punctuation\">(</span> n1 <span class=\"token operator\">-</span> n2 <span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0.0000001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0000002</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p>能够呈现的最大浮点数大约是 1.798e+308 （这是一个相当大的数字），它定义在 Number.\nMAX_VALUE 中。最小浮点数定义在 Number.MIN_VALUE 中，大约是 5e-324 ，它不是负数，但无限接近于 0 ！</p>\n<h4 id=\"整数的安全范围\">整数的安全范围</h4>\n<p>能够被“安全”呈现的最大整数是 2^53 - 1 ，即 9007199254740991 ，在 ES6 中被定义为\nNumber.MAX_SAFE_INTEGER 。最小整数是 -9007199254740991 ，在 ES6 中被定义为 Number.MIN_SAFE_INTEGER 。</p>\n<p>有时 JavaScript 程序需要处理一些比较大的数字，如数据库中的 64 位 ID 等。由于\nJavaScript 的数字类型无法精确呈现 64 位数值，所以必须将它们保存（转换）为字符串。\n好在大数值操作并不常见（它们的比较操作可以通过字符串来实现）。如果确实需要对大\n数值进行数学运算，目前还是需要借助相关的工具库。将来 JavaScript 也许会加入对大数\n值的支持。</p>\n<h4 id=\"整数检测\">整数检测</h4>\n<p>要检测一个数字是否为整数，可以使用 ES6 的 Number.isInterger(...)</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isInteger</span><span class=\"token punctuation\">(</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isInteger</span><span class=\"token punctuation\">(</span> <span class=\"token number\">42.000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isInteger</span><span class=\"token punctuation\">(</span> <span class=\"token number\">42.3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p>也可以为 ES6 之前的版本 polyfill  Number.isInteger(..) 方法：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isInteger</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">isInteger</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">typeof</span> num <span class=\"token operator\">==</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">&#x26;&#x26;</span> num <span class=\"token operator\">%</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>要检测一个值是否是安全的整数，可以使用 ES6 中的 Number.isSafeInteger(..) 方法：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isSafeInteger</span><span class=\"token punctuation\">(</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isSafeInteger</span><span class=\"token punctuation\">(</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pow</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isSafeInteger</span><span class=\"token punctuation\">(</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pow</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>可以为 ES6 之前的版本 polyfill  Number.isSafeInteger(..) 方法：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isSafeInteger</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">isSafeInteger</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isInteger</span><span class=\"token punctuation\">(</span> num <span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span>\n    <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">abs</span><span class=\"token punctuation\">(</span> num <span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;=</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"特殊数值\">特殊数值</h3>\n<p>JavaScript的数据类型中有几个特殊的值需要开发人员特别注意和小心使用</p>\n<h4 id=\"不是值的值\">不是值的值</h4>\n<p>undefined 类型只有一个值，即 undefined。null类型也只有一个值，即 null。它们的名称既是类型也是值。</p>\n<p>undefined 和 null 通常被用来表示“空的”或者“不是值”的值，二者之间有一些细微的差别：</p>\n<ul>\n<li>null 指空值</li>\n<li>undefined 指没有值</li>\n</ul>\n<p>或者</p>\n<ul>\n<li>undefined 指从没有赋过值</li>\n<li>null 指曾赋过值，但是目前没有值</li>\n</ul>\n<p>null 是一个特殊的关键字，不是标识符，我们不能将其当作变量来使用和赋值，然而，undefined 却是一个标识符，可以被当作变量来使用和赋值</p>\n<h4 id=\"undefined\">undefined</h4>\n<p>非严格模式下，我们可以为全局的标识符 undefined 赋值。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword nil\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword nil\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// TypeError</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h4 id=\"void-运算符\">void 运算符</h4>\n<p>undefined 是一个内置标识符（除非被重新定义，见前面的介绍）它的值为 undefined，通过 void 运算符即可得到该值。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>vaid a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined 42</span>\n</code></pre></div>\n<p>按照惯例我们使用 void 0 来获得 undefined 。void 0 void 1 和 undefined 之间并没有实质的区别</p>\n<p>此外，void 还可不让表达式返回任何结果</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">APP</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">ready</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>doSomething<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> result \n  <span class=\"token keyword control-flow\">return</span> result\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>doSomething<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 立即执行下一个任务</span>\n</code></pre></div>\n<p>很多的开发人员喜欢分开操作：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">APP</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">ready</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>doSomething<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> \n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"特殊的数字\">特殊的数字</h4>\n<p>如果数学运算符的操作数不是数字类型，就无法返回一个有效的数字，这种情况下返回值为 NaN</p>\n<p>NaN 指“不是一个数字”，我们可以将它理解为“无效的数值”“失败的数值”“坏数值”</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> <span class=\"token string\">'foo'</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">// number</span>\n</code></pre></div>\n<p>换句话来说，“不是数字的数字：仍然是数字类型。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> <span class=\"token string\">'foo'</span> <span class=\"token comment\">// NaN</span>\na <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>NaN 是一个特殊值，他是JavaScript中唯一一个不等于自身的值。我们通常通过一个全局函数 isNaN(...) 来判断一个值是不是 NaN。</p>\n<p>然而，isNaN(...)有一个严重的缺陷，上边我们说了 NaN 的类型还是一个数字类型：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> b  <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>显然 b 是一个字符串不是一个数字类型，所以不能是NaN，这个bug自JavaScript来一直存在。</p>\n<p>从 ES6 开始我们可以使用工具函数 Number.isNaN(...)。在 ES6 之前我们可以使用浏览器的 polyfill：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isNaN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">isNaN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">typeof</span> n <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isNaN</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们也可以利用 NaN 是JavaScript中唯一一个不等于自身的特点来写这个 polyfill:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isNaN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">isNaN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> n <span class=\"token operator\">!</span> <span class=\"token operator\">==</span> n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"无穷数\">无穷数</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span> <span class=\"token comment\">//Infinity</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span> <span class=\"token comment\">// -Infinity</span>\n</code></pre></div>\n<p>Infinity 即 Number.POSITIVE_INFINITY\n-Infinity 即 Number.NAGATIVE_INFINITY</p>\n<h4 id=\"零值\">零值</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">/</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token comment\">// -0</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token comment\">// -0</span>\n</code></pre></div>\n<p>javaScript 中的除法和乘法会得到 -0，但是加法和减法不会得到 -0.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '0'</span>\na <span class=\"token operator\">+</span> <span class=\"token string\">''</span> <span class=\"token comment\">// '0'</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// '0'</span>\n</code></pre></div>\n<p>我们将 -0 转换为字符串可以得到字符串 '0'</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">+</span> <span class=\"token string\">'-0'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//-0</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -0</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-0'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -0</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token comment\">//true</span>\n<span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token comment\">//false</span>\n</code></pre></div>\n<p>如何区分 0 和 -0</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isNegZero</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  n <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>n <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"特殊等式\">特殊等式</h4>\n<p>如前面所述，NaN 和 -0 在相等比较的时候比较特别，所以，需要借助 Number.isNaN(...)或者是isNegZero(...) 这样的工具函数来比较。</p>\n<p>ES6 中加入了一个新的方法 Object.is(...) 来判断两个值是否绝对相等。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> <span class=\"token string\">'foo'</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">is</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">is</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">is</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>对于 ES6 之前的版本，Object.is(...) 有一个简单的polyfill:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">is</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">is</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v1<span class=\"token punctuation\">,</span> v2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 判断是否是 -0</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&#x26;&#x26;</span> v2 <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> v1 <span class=\"token operator\">===</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> v2\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 判断是否是NaN</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">!==</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> v2 <span class=\"token operator\">!==</span> v2\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> v1 <span class=\"token operator\">===</span> v2\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<blockquote>\n<p>能使用 == 和 === 就不要使用 Object.is(...) 因为前者的效率比较高。</p>\n</blockquote>\n<h3 id=\"值和引用\">值和引用</h3>\n<p>JavaScript对值和引用的赋值/船体在语法上没有区别，完全根据值的类型来决定。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a <span class=\"token comment\">// b 是 a 的副本</span>\nb<span class=\"token operator\">++</span>\na <span class=\"token comment\">// 2</span>\nb <span class=\"token comment\">// 3</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> c\nd<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nc <span class=\"token comment\">// [1,2,3,4]</span>\nd <span class=\"token comment\">// [1,2,3,4]</span>\n</code></pre></div>\n<p><strong>简单值（即是标量基本类型值）总是通过值复制的方式来赋值/传递，包括null, undefined,字符串，数字，布尔值和ES6中symbol</strong></p>\n<p><strong>复合值---对象（包括组装和封装对象）和函数，则总通过引用扶植的方式来赋值/传递</strong></p>\n<p>由于引用指向的是值本身而并非变量，所以一个引用无法更改另一个引用的指向。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a\na <span class=\"token comment\">// [1,2,3]</span>\nb <span class=\"token comment\">// [1,2,3]</span>\n\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\na <span class=\"token comment\">// [1,2,3]</span>\nb <span class=\"token comment\">// [4,5,6]</span>\n</code></pre></div>\n<p>函数参数就经常让人产生这样的困惑：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n  x <span class=\"token comment\">// [1,2,3,4]</span>\n\n  x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n  x<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n  x <span class=\"token comment\">// [4,5,6,7]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\na <span class=\"token comment\">// [1,2,3,4] 而不是 [4,5,6,7]</span>\n</code></pre></div>\n<blockquote>\n<p>我们无法决定使用值复制还是引用复制，一切由值的类型来决定。</p>\n</blockquote>\n<p>如果通过值赋值的方式来传递复合值，就需要为它创建一个复本。</p>\n<p>如： foo(a.slice())，slice(...)能返回当前数组的一个浅复本。</p>\n<p>相反的如果要将标量的基本类型值传递到函数内并进行更改，就需要将该值封装到一个复合值中，然后通过引用复制的方式进行传递。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wrapper</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  wrapper<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> \nobj<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token comment\">// 42</span>\n</code></pre></div>\n<p>那是不是需要传递指向标量的基本类型值的引用，就可以将其风转告对应的对象中。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  x <span class=\"token comment\">//3</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 是 2，不是 3</span>\n</code></pre></div>\n<p>原因是标量基本类型值是不可变的。</p>\n<hr>\n<h2 id=\"原生函数\">原生函数</h2>\n<p>常用的原生函数：</p>\n<ul>\n<li>String()</li>\n<li>Number()</li>\n<li>Boolean()</li>\n<li>Array()</li>\n<li>Object()</li>\n<li>Function()</li>\n<li>RegExp()</li>\n<li>Date()</li>\n<li>Error()</li>\n<li>Symbol() ---- ES6 新加入</li>\n</ul>\n<p>原生函数可以当作构造函数来使用，但是其构造出来的对象可能会和我们设想的所有出入：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">typeof</span> a <span class=\"token comment\">// object</span>\na <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> <span class=\"token comment\">// true</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">//[object, String]</span>\n</code></pre></div>\n<p>typeof 在这里返回的是对象的子类型</p>\n<h3 id=\"内部属性\">内部属性</h3>\n<p>所有 typeof 返回值为\"object\"的对象都包含一个内部属性，这个属性我们无法访问，一般通过Object.prototype.toString(...)来查看。</p>\n<h3 id=\"封装对象包装\">封装对象包装</h3>\n<p>封装对象扮演着十分重要的角色。由于基本类型值没有.length 和 .toString() 这样的属性和方法，需要通过风转对象才能访问，此时 JavaScript自动为基本类型值包装一个封装对象。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'atbc'</span>\na<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token comment\">// 3</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'ABC'</span>\n</code></pre></div>\n<h4 id=\"封装对象释疑\">封装对象释疑</h4>\n<p>使用封装对象时有些地方需要特别注意</p>\n<p>比如Boolean:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oops'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 执行不到这里</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>想要自行封装基本类型值，可以使用Object(...) 函数</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">typeof</span> a <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">typeof</span> b <span class=\"token comment\">// object</span>\n<span class=\"token keyword\">typeof</span> c <span class=\"token comment\">// object</span>\n\nb <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> <span class=\"token comment\">// true</span>\nc <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// '[object String]'</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// '[object String]'</span>\n</code></pre></div>\n<p><strong>一般不推荐世界使用封装对象</strong></p>\n<h3 id=\"拆封\">拆封</h3>\n<p>如果需要得到封装中的基本类型值，可以使用 valueOf() 函数</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'abc'</span>\nb<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 42</span>\nc<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>在需要用到封装对象的基本类型值的地方会发生隐式拆封，即强制类型转换。在第四章当中会介绍。</p>\n<h3 id=\"将原生函数作为构造函数\">将原生函数作为构造函数</h3>\n<p>关于数组（Array）、对象（Object）、函数（function）和正则表达式，我们通常喜欢以常量的形式来创建它们，效果实际上和使用构造函数是一样的，除非十分必要，否则不要使用构造函数。</p>\n<h4 id=\"array\">Array(...)</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\na <span class=\"token comment\">// [1,2,3]</span>\nb <span class=\"token comment\">// [1,2,3]</span>\n</code></pre></div>\n<p>构造函数Array(...)不要求必须 new 关键字，不带时，它会自动补上。</p>\n<p>Array 构造函数只带一个数字参数时，该参数会被认为数组的长度来处理，而非只充当数组中的一个元素。</p>\n<h4 id=\"object、function-、和-regexp\">Object(...)、Function(...) 、和 RegExp(...)</h4>\n<h4 id=\"date-和-errro\">Date(...) 和 Errro(...)</h4>\n<p>相对于其他的原生构造函数，Date(...)和Error(...)的用处要大很多，因为没有对应的常量形式来作为它们的代替。</p>\n<p>创建日期对象必须使用 new Date(...)。Date(...)可以带参数，用来指定日期和时间，而不带参数的话则使用当前的日期和时间。</p>\n<p>Date(...)主要用来获得当前的Unix时间戳（从1970年1月1日开始计算，以秒为单位。该值可以通过日期对象的getTime()来获得。</p>\n<p>从 ES5 开始引入一个更简单的方法，Date.now()。对于ES5之前的版本可以使用：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">now</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">now</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>构造函数 Error(...)带不带 new 关键字都可以</p>\n<p>错误对象只要是为了获得当前运行栈上下文。栈上下文信息包括函数调用栈信息和产生的错误代码行号，以便调式。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x wasn't provided\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>通常错误对象至少包含一个message属性。</p>\n<p>除了 Error(...)之外，还有一些针对特定错误类型的原生构造函数，如：\nEvalError(...)、RangeError(...)、ReferenceError(...)、SyntaxError(...)\n、TypeError(...)和URIError(...)。这些构造函数很少使用，它们在程序发生异常时会被自动调用。</p>\n<h4 id=\"symbol\">Symbol(...)</h4>\n<p>ES6 中新加入的有一个基本数据类型---符号。符号属性具有唯一性的特殊性（并非绝对），用它来命名对象属性不容易导致重名。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> mysym <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my own symbo'</span><span class=\"token punctuation\">)</span>\nmysym <span class=\"token comment\">// Symbol(my own symbol)</span>\nmysym<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Symbol(my own symbol)'</span>\n<span class=\"token keyword\">typeof</span> mysm <span class=\"token comment\">// symbol</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\na<span class=\"token punctuation\">[</span>mysym<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'foobar'</span>\n\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [Symbol(my own symbol)]</span>\n</code></pre></div>\n<p>Object.getOwnPropertySymbos(...)可以公开获得对象中的所有符号。符号通常用域私有属性。</p>\n<hr>\n<h2 id=\"第四章-强制类型转换\">第四章 强制类型转换</h2>\n<h3 id=\"值类型转换\">值类型转换</h3>\n<p>将值从一种类型转换为另一种类型通常称为类型转换，这是显示的情况，隐式的情况称为强制类型转换。</p>\n<h3 id=\"抽象值操作\">抽象值操作</h3>\n<p>介绍隐式和显示强制类型转换之前，我们需要掌握字符串、数字和布尔值之间的类型转换的规则。</p>\n<h4 id=\"tostring\">toString()</h4>\n<ul>\n<li>基本值类型的字符串转换规则为：null 转换为 \"null\",undefined转换为\"undefined\",true转换为\"true\",数字的字符串遵循通用规则，不过第2章中讲过的那些极小和极大的数字使用指数形式：</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.07</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1.07e21\"</span>\n</code></pre></div>\n<ul>\n<li>\n<p>对于普通对象来讲，除非自行定义，否则toString()(Object.prototype.toString())返回内部属性[[Class]]的值。\n然而我们在前面讲过，如果对象由中级的toString()方法，字符串化时就会调用该方法并且使用其返回值。</p>\n</li>\n<li>\n<p>数组的默认toString() 方法经过了重新定义，将所有的单元字符串化后再用\",\"连接起来：</p>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '1,2,3'</span>\n</code></pre></div>\n<h5 id=\"json字符串化\">JSON字符串化</h5>\n<p>工具函数JSON.stringify(...)在将JSON对象序列化为字符串时也用到了ToString</p>\n<blockquote>\n<p>请注意，JSON字符串化并非严格意义上的强制类型转换，以为其中也涉及到ToString的相关规则。</p>\n</blockquote>\n<ul>\n<li>对于大多数简单值，JSON字符串化和toString()的效果基本相同，只不过序列化的结果总是字符串：</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '42'</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'42'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// '42'</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 'null'</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'true'</span>\n</code></pre></div>\n<p>所有的安全的JSON值都可以使用JSON.stringify(...)字符串化。安全值是指可以呈现为有效JSON的值。</p>\n<p>哪些是不安全的值：undefined、function、symbol和包含循环引用的对象都不符合JSON结构标准。</p>\n<p>JSON.stringify(...) 在对象中遇到undefined、function和symbol时会自动将其忽略，在数组中会返回null（以保证单元位置不变）</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[1, null, null, 4]\"</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">b</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"{\"a\": 2}\"</span>\n</code></pre></div>\n<p>对包含循环引用的对象执行JSON.stringify(...)会报错</p>\n<p>如果对象中定义了toJSON()方法，JSON字符串化时会首先调用该方法，然后用它的返回值来序列化。</p>\n<p>如果要对含非法JSON值的对象做字符串化，或者对象中的某些值无法被序列化，就需要定义JSON()方法来返回一个安全的JSON值。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> o<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">d</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在a中创建一个循环引用</span>\no<span class=\"token punctuation\">.</span><span class=\"token property-access\">e</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 循环引用在这里会产生错误</span>\n<span class=\"token comment\">// JSON.stringify( a );</span>\n<span class=\"token comment\">// 自定义的JSON序列化</span>\na<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">toJSON</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 序列化仅包含b</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> b<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">b</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"{\"b\":42}\"</span>\n</code></pre></div>\n<p>很多人误认为toJSON返回的是JSON字符串化后的值，其实不是，toJSON()的返回值应该是一个适当的值，可以是任何类型，然后再用JSON.stringify(...)进行格式化。</p>\n<p>我们可以向JSON.stringify(...)中传递一个可选择参数replacer，他可以是数组或者函数，用来指定对象序列化过程中，哪些属性应该被处理哪些应该被排除。</p>\n<ul>\n<li>如果replacer是一个数组，那么它必须是一个字符串数组，其中包含要被处理的对象属性名称。</li>\n<li>如果replacer是一个函数，它会对对象本身调用一次，然后对对象中的每个属性各调用一次，每次传递两个参数，键和值。如果要忽略某个键就返回 undefined ，否则返回指定的值。</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">,</span>\n  d<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"{\"b\":42,\"c\":\"42\"}\"</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k<span class=\"token punctuation\">,</span>v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">!==</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"{\"b\":42,\"d\":[1,2,3]}\"</span>\n</code></pre></div>\n<p>请记住， JSON.stringify(..) 并不是强制类型转换。在这里介绍是因为它涉及 ToString 强\n制类型转换，具体表现在以下两点。</p>\n<p>(1) 字符串、数字、布尔值和 null 的 JSON.stringify(..) 规则与 ToString 基本相同。</p>\n<p>(2) 如果传递给 JSON.stringify(..) 的对象中定义了 toJSON() 方法，那么该方法会在字符\n串化前调用，以便将对象转换为安全的 JSON 值。</p>\n<h4 id=\"tonumber\">ToNumber</h4>\n<p>有时我们需要将非数字值当作数字来使用，比如数学运算。为此 ES5 规范在 9.3 节定义了\n抽象操作 ToNumber 。</p>\n<p>其中 true 转换为 1 ， false 转换为 0 。 undefined 转换为 NaN ， null 转换为 0 。</p>\n<p>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</p>\n<p>为了将值转换为相应的基本类型值，抽象操作toPrimitive会首先检查该值是否有valueOf(...)方法。如果有并且返回基本类型值，就用该值进行强制转换，如果没有就是用toString(...)的返回值来进行强制的类型转换。</p>\n<p>如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。</p>\n<p>从 ES5 开始，使用 Object.create(null) 创建的对象 [[Prototype]] 属性为 null ，并且没\n有 valueOf() 和 toString() 方法，因此无法进行强制类型转换。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">valueOf</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"abc\"</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n</code></pre></div>\n<h4 id=\"toboolean\">ToBoolean</h4>\n<h5 id=\"假值\">假值</h5>\n<p>我们再来看看其他值是如何被强制类型转换为布尔值的。</p>\n<p>JavaScript 中的值可以分为以下两类：</p>\n<p>(1) 可以被强制类型转换为 false 的值</p>\n<p>(2) 其他（被强制类型转换为 true 的值）</p>\n<p>以下这些是假值：</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>false</li>\n<li>+0 -0和NaN</li>\n<li>''</li>\n</ul>\n<p>假值的布尔强制类型转换结果为 false 。</p>\n<p>从逻辑上说，假值列表以外的都应该是真值（truthy）。但 JavaScript 规范对此并没有明确\n定义，只是给出了一些示例，例如规定所有的对象都是真值，我们可以理解为假值列表以\n外的值都是真值。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">&#x26;&#x26;</span> b <span class=\"token operator\">&#x26;&#x26;</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h5 id=\"真值\">真值</h5>\n<p>不在假值列表的值叫真值。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"''\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">&#x26;&#x26;</span> b <span class=\"token operator\">&#x26;&#x26;</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空数组——是真值还是假值？</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空对象——是真值还是假值？</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">c</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空函数——是真值还是假值？</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">&#x26;&#x26;</span> b <span class=\"token operator\">&#x26;&#x26;</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h3 id=\"显示强制类型转换\">显示强制类型转换</h3>\n<h4 id=\"字符串和数字之间的显示转换\">字符串和数字之间的显示转换</h4>\n<p>字符串和数字之间的转换是通过String(...)和Number(...)这两个内建函数来实现的。</p>\n<p>请注意它们前面没有 new 关键字，并不创建封装对象。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"3.14\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42\"</span>\nd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3.14</span>\n</code></pre></div>\n<p>String(..) 遵循前面讲过的 ToString 规则，将值转换为字符串基本类型。 Number(..) 遵循\n前面讲过的 ToNumber 规则，将值转换为数字基本类型。</p>\n<p>除了String(...)和Number(...)，还有其他可以实现字符串和数字之间显示转换的方法：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"3.14\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42\"</span>\nd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3.14</span>\n</code></pre></div>\n<p>a.toString() 是显式的（“toString”意为“to a string”），不过其中涉及隐式转换。因为\ntoString() 对 42 这样的基本类型值不适用，所以 JavaScript 引擎会自动为 42 创建一个封\n装对象（参见第 3 章），然后对该对象调用 toString() 。这里显式转换中含有隐式转换</p>\n<p>上例中 +c 是 + 运算符的一元（unary）形式（即只有一个操作数）。 + 运算符显式地将 c 转\n换为数字，而非数字加法运算（也不是字符串拼接，见下）。</p>\n<p>d = +c(d =+ c) 和 d += c有天壤之别。</p>\n<ol>\n<li>日期显示转换为数字</li>\n</ol>\n<p>一元运算符+的另一个用途是将日期（Date）对象强制转换为数字类型。返回结果为Unix的时间戳。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Mon, 18 Aug 2014 08:53:06 CDT\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1408369986000</span>\n<span class=\"token comment\">// 通常使用下面的方法来获取当前的时间戳</span>\n<span class=\"token keyword\">var</span> timestamp <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>奇特的~运算符</li>\n</ol>\n<p>一个常被人忽视的地方是 ~ 运算符（即字位操作“非”）相关的强制类型转换</p>\n<p>~x 大致等同于 -(x + 1)。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">~</span><span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -(42+1) ==> -43</span>\n</code></pre></div>\n<p>在 -(x+1) 中唯一能够得到 0 （或者严格说是 -0 ）的 x 值是 -1 。也就是说如果 x 为 -1 时， ~和一些数字值在一起会返回假值 0 ，其他情况则返回真值。</p>\n<p>-1是一个哨位值，通常在各个语言中都有特殊的含义。</p>\n<p>比如JavaScript中的indexOf(...)函数。indexOf(..) 不仅能够得到子字符串的位置，还可以用来检查字符串中是否包含指定的子字符串，相当于一个条件判断。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"lo\"</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 找到匹配！</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"lo\"</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 找到匹配！</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"ol\"</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 没有找到匹配！</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"ol\"</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 没有找到匹配！</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><strong>>= 0 和 == -1 这样的写法不是很好，称为“抽象渗漏”，意思是在代码中暴露了底层的实现细节，这里是指用 -1 作为失败时的返回值，这些细节应该被屏蔽掉。</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">~</span>a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"lo\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -4 &#x3C;-- 真值!</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"lo\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 找到匹配！</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">~</span>a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"ol\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 &#x3C;-- 假值!</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">~</span>a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"ol\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">~</span>a<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"ol\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 没有找到匹配！</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>如果 indexOf(..) 返回 -1 ， ~ 将其转换为假值 0 ，其他情况一律转换为真值。</p>\n<ol start=\"3\">\n<li>字位截除\n一些开发人员使用 ~~ 来截除数字值的小数部分，以为这和 Math.floor(..) 的效果一样，\n实际上并非如此。</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span><span class=\"token number\">49.6</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -50</span>\n<span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">-</span><span class=\"token number\">49.6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -49</span>\n</code></pre></div>\n<h4 id=\"显示的解析数字字符串\">显示的解析数字字符串</h4>\n<p>解析字符串中的数字和强制转换字符串为数字返回的结果都是数字，但是解析和转换两者之间还是有差别的。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"42px\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n<span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n</code></pre></div>\n<p>解析允许字符串中含有非数字字符串，解析按照从左至右的顺序，如果遇到非数字字符串就会停止。而转换不允许包含非数字字符串，否则返回NaN。</p>\n<blockquote>\n<p>解析字符串中的浮点数可以使用 parseFloat(..) 函数。</p>\n</blockquote>\n<p>如何解释下面的返回结果？</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 18</span>\n</code></pre></div>\n<p>parseInt(..) 先将参数强制类型转换为字符串再进行解析（toString()），1/0 = Infinity，所以上边等同于parseInt('Infinity', 19)，19进制的表示 123456789ABCDEFGHIJ，parseInt解析到n的时候发现是无效的，所以只能到I，而I在19进制中表示18，所以最终的结果是18。</p>\n<p>此外还有一些看起来奇怪但实际上解释得通的例子：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0.000008</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 (\"0\" 来自于 \"0.000008\")</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0.0000008</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8 (\"8\" 来自于 \"8e-7\")</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 250 (\"fa\" 来自于 \"false\")</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span> parseInt<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15 (\"f\" 来自于 \"function..\")</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"0x10\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"103\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n</code></pre></div>\n<h4 id=\"显示的转换为布尔值\">显示的转换为布尔值</h4>\n<p>与前面的 String(..) 和 Number(..) 一样， Boolean(..) （不带 new ）是显式的 ToBoolean 强制类型转换：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> g<span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span> d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span> e <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token known-class-name class-name\">Boolean</span><span class=\"token punctuation\">(</span> g <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p>和前面讲过的 + 类似，一元运算符 ! 显式地将值强制类型转换为布尔值。但是它同时还将\n真值反转为假值（或者将假值反转为真值）。所以显式强制类型转换为布尔值最常用的方\n法是 !! ，因为第二个 ! 会将结果反转回原值：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> g<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span>d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span>f<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span>g<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p>显式 ToBoolean 的另外一个用处，是在 JSON 序列化过程中将值强制类型转换为 true 或\nfalse ：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/*..*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/*..*/</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[1,null,2,null]\"</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span>val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> val <span class=\"token operator\">==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 函数的ToBoolean强制类型转换</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"[1,true,2,true]\"</span>\n</code></pre></div>\n<h3 id=\"隐式强制转换\">隐式强制转换</h3>\n<h4 id=\"字符串和数字之间的隐式强制转换\">字符串和数字之间的隐式强制转换</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"420\"</span>\nc <span class=\"token operator\">+</span> d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n</code></pre></div>\n<p>因为某一个或者两个操作数都是字符串，所以 + 执行的是字符串拼接操作。</p>\n<h4 id=\"布尔值到数字的隐式强制转换\">布尔值到数字的隐式强制转换</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onlyOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> arguments<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 跳过假值，和处理0一样，但是避免了NaN</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sum <span class=\"token operator\">+=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> sum <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"隐式强制类型转换为布尔值\">隐式强制类型转换为布尔值</h4>\n<p>相对布尔值，数字和字符串操作中的隐式强制类型转换还算比较明显。下面的情况会发生\n布尔值隐式强制类型转换。</p>\n<p>(1)  if (..) 语句中的条件判断表达式。</p>\n<p>(2)  for ( .. ; .. ; .. ) 语句中的条件判断表达式（第二个）。</p>\n<p>(3)  while (..) 和 do..while(..) 循环中的条件判断表达式。</p>\n<p>(4)  ? : 中的条件判断表达式。</p>\n<p>(5) 逻辑运算符 || （逻辑或）和 &#x26;&#x26; （逻辑与）左边的操作数（作为条件判断表达式）。</p>\n<h3 id=\"-和-\">|| 和 &#x26;&#x26;</h3>\n<p>逻辑运算符 || （或）和 &#x26;&#x26; （与）应该并不陌生，也许正因为如此有人觉得它们在\nJavaScript 中的表现也和在其他语言中一样</p>\n<p>这里面有一些非常重要但却不太为人所知的细微差别。</p>\n<p>我其实不太赞同将它们称为“逻辑运算符”，因为这不太准确。称它们为“选择器运算符”（selector operators）或者“操作数选择器运算符”（operand selector operators）更恰当些。</p>\n<p>为什么？因为和其他语言不同，在 JavaScript 中它们返回的并不是布尔值。</p>\n<p>它们的返回值是两个操作数中的一个（且仅一个）。即选择两个操作数中的一个，然后返回它的值。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">||</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\na <span class=\"token operator\">&#x26;&#x26;</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"abc\"</span>\nc <span class=\"token operator\">||</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"abc\"</span>\nc <span class=\"token operator\">&#x26;&#x26;</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n</code></pre></div>\n<p>对于 || 来说，如果条件判断结果为 true 就返回第一个操作数（ a 和 c ）的值，如果为\nfalse 就返回第二个操作数（ b ）的值。\n&#x26;&#x26; 则相反，如果条件判断结果为 true 就返回第二个操作数（ b ）的值，如果为 false 就返\n回第一个操作数（ a 和 c ）的值。</p>\n<h4 id=\"符号的强制类型转换\">符号的强制类型转换</h4>\n<p>ES6 引入了符号类型，但是它的强制转换有个坑，这里有必要提一下：ES6 允许从符号到字符串的显示强制转换，然而，隐式强制转换会发生错误。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> s1 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cool'</span><span class=\"token punctuation\">)</span>\n<span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Symbol(cool)'</span>\n\n<span class=\"token keyword\">var</span> s2 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cool'</span><span class=\"token punctuation\">)</span>\ns2 <span class=\"token operator\">+</span> <span class=\"token string\">''</span> <span class=\"token comment\">// TypeError</span>\n</code></pre></div>\n<h3 id=\"宽松相等和严格相等\">宽松相等和严格相等</h3>\n<p>宽松相等（==）和严格相等（===）都用来判断两个值是否相等。但是他们两有个很重要的区别。\n常见的误区是”==检查值是否相等，===检查值和类型是否想等“。这种解释不够正确。</p>\n<p>正确的解释：”==允许相等比较中进行强制类型转换，而===不允许“</p>\n<h4 id=\"相等比较操作的性能\">相等比较操作的性能</h4>\n<p>根据第一种解释（不准确的版本）， === 似乎比 == 做的事情更多，因为它还要检查值的类型。</p>\n<p>第二种解释中 == 的工作量更大一些，因为如果值的类型不同还需要进行强制类型转换。\n有人觉得 == 会比 === 慢，实际上虽然强制类型转换确实要多花点时间，但仅仅是微秒级\n（百万分之一秒）的差别而已。</p>\n<p>如果进行比较的两个值类型相同，则 == 和 === 使用相同的算法，所以除了 JavaScript 引擎\n实现上的细微差别之外，它们之间并没有什么不同。</p>\n<p>如果两个值的类型不同，我们就需要考虑有没有强制类型转换的必要，有就用 == ，没有就用\n=== ，不用在乎性能。</p>\n<h3 id=\"抽象相等\">抽象相等</h3>\n<ul>\n<li>\n<p>字符串和数字之间的相等的比较</p>\n<ul>\n<li>如果type(x)是数字，type(y)是字符串，则返回 x == toNumber(y)的结果</li>\n<li>如果type(x)是字符串，type(y)是数字，则返回 toNumber(x) == y的结果</li>\n</ul>\n</li>\n<li>\n<p>其他类型和布尔类型之间的相等比较</p>\n<ul>\n<li>如果 Type(x) 是布尔类型，则返回 ToNumber(x) == y 的结果</li>\n<li>如果 Type(y) 是布尔类型，则返回 x == ToNumber(y) 的结果</li>\n</ul>\n</li>\n<li>\n<p>null 和 undefined 之间的相等比较</p>\n<ul>\n<li>如果 x 为 null ， y 为 undefined ，则结果为 true</li>\n<li>如果 x 为 undefined ， y 为 null ，则结果为 true</li>\n</ul>\n</li>\n<li>\n<p>对象和非对象之间的相等比较</p>\n<ul>\n<li>如果 Type(x) 是字符串或数字， Type(y) 是对象，则返回 x == ToPrimitive(y)\n的结果</li>\n<li>如果 Type(x) 是对象， Type(y) 是字符串或数字，则返回 ToPromitive(x) == y\n的结果</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"比较少见的情况\">比较少见的情况</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"0\"</span> <span class=\"token operator\">==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token string\">\"0\"</span> <span class=\"token operator\">==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token string\">\"0\"</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true -- 晕！</span>\n<span class=\"token string\">\"0\"</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token string\">\"0\"</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"0\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true -- 晕！</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true -- 晕！</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true -- 晕！</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token string\">\"\"</span> <span class=\"token operator\">==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token string\">\"\"</span> <span class=\"token operator\">==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token string\">\"\"</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token string\">\"\"</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true -- 晕！</span>\n<span class=\"token string\">\"\"</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true -- 晕！</span>\n<span class=\"token string\">\"\"</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true -- 晕！</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<h4 id=\"抽象关系比较\">抽象关系比较</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> b<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> b<span class=\"token operator\">:</span> <span class=\"token number\">43</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">&#x3C;</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\na <span class=\"token operator\">==</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\na <span class=\"token operator\">></span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\na <span class=\"token operator\">&#x3C;=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\na <span class=\"token operator\">>=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<hr>\n<h2 id=\"第五章-语法\">第五章 语法</h2>\n<h3 id=\"语句和表达式\">语句和表达式</h3>\n<h4 id=\"代码块\">代码块</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object Object]\"</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n</code></pre></div>\n<p>第一行代码中， {} 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。第\n4 章讲过 [] 会被强制类型转换为 \"\" ，而 {} 会被强制类型转换为 \"[object Object]\" 。</p>\n<p>但在第二行代码中， {} 被当作一个独立的空代码块（不执行任何操作）。代码块结尾不需\n要分号，所以这里不存在语法上的问题。最后 + [] 将 [] 显式强制类型转换（参见第 4 章）\n为 0 。</p>\n<h3 id=\"运算符的优先级\">运算符的优先级</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 43</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 43</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 43</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n</code></pre></div>\n<p>运算符的优先级比 = (等号) 低，可以认为 (b = a++)，a</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>&#x26;&#x26; 先执行，然后是 || 。</p>\n<p>mdn 上的运算符优先级列表</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">https://developer.mozilla.org/en-\nUS/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</a></p>\n<h3 id=\"自动分号\">自动分号</h3>\n<p>有时JavaScript会为代码行补上缺失的分号，即自动分号插入（Automatic Semicolon Insertion, ASI）</p>\n<p><strong>请注意，ASI 只在换行符处起作用，而不会在代码行的中间插入分号。</strong></p>\n<p>ES5-Shim（https://github.com/es-shims/es5-shim）是一个完整的 shim/polyfill\n集合，能够为你的项目提供 ES5 基本规范支持。同样，ES6-Shim（https://\ngithub.com/es-shims/es6-shim）提供了对 ES6 基本规范的支持。虽然我们可\n以通过 shim/polyfill 来填补新的 API，但是无法填补新的语法。可以使用\nTraceur（https://github.com/google/traceur-compiler/wiki/GettingStarted） 这 样的工具来实现新旧语法之间的转换。</p>\n<hr>\n<h1 id=\"第二部分-异步与性能\">第二部分 异步与性能</h1>\n<h2 id=\"程序中现在运行的部分和将来运行的部分之间的关系就是异步编程的核心。\">程序中现在运行的部分和将来运行的部分之间的关系就是异步编程的核心。</h2>\n<h2 id=\"第一章-现在与将来\">第一章 现在与将来</h2>\n<h3 id=\"分块的程序\">分块的程序</h3>\n<p>可以把js程序写在单个js文件中，但是这个程序几乎是由几个块组成的。这些块中，只有一个是现在执行的，其余的则会在将来执行。最常见的快单位是函数。</p>\n<p>大多数新手JavaScript程序员都会遇到的问题：程序中将来执行的部分并不一定在现在执行部分执行之后立即运行。换句话来说，现在无法完成的任务将会异步完成，并不会出现人们本能认为会出现的或者希望出现的阻塞行为。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ajax(..)是某个库中提供的某个Ajax函数</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.1\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 啊哦！data通常不会包含Ajax结果</span>\n</code></pre></div>\n<p>从现在到将来的等待，最简单的方法（但绝对不是唯一，甚至也不是最好的）是使用一个通常称为回调函数的函数：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ajax(..)是某个库中提供的某个Ajax函数</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myCallbackFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 耶！这里得到了一些数据！</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<blockquote>\n<p>可能你已经听说过，可以发送同步 Ajax 请求。尽管技术上说是这样，但是，在任何情况下都不应该使用这种方式，因为它会锁定浏览器 UI（按钮、菜单、滚动条等），并阻塞所有的用户交互。这是一个可怕的想法，一定要避免。</p>\n</blockquote>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">later</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  answer <span class=\"token operator\">=</span> answer <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Meaning of life:\"</span><span class=\"token punctuation\">,</span> answer <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> later<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Meaning of life: 42</span>\n</code></pre></div>\n<p>这个程序有两个块：现在执行的部分，以及将来执行的部分。这两块的内容很明显，但这\n里我们还是要明确指出来。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 现在</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">later</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> later<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 将来</span>\nanswer <span class=\"token operator\">=</span> answer <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Meaning of life:\"</span><span class=\"token punctuation\">,</span> answer <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>任何时候，只要把一段代码包装成一个函数，并指定它在响应某个事件（定时器、鼠标点击、Ajax 响应等）时执行，你就是在代码中创建了一个将来执行的块，也由此在这个程序\n中引入了异步机制。</p>\n<h3 id=\"事件循环\">事件循环</h3>\n<p>尽管你显然能够编写异步 JavaScript 代码\n（就像前面我们看到的定时代码），但直到最近（ES6），JavaScript 才真正内建有直接的异\n步概念。</p>\n<p>JavaScript 引擎本身所做的只不过是在需要的时候，在给定的任意时刻执行程序中的单个代码块。</p>\n<p>JavaScript 引擎并不是独立运行的，它运行在宿主环境中，对多数开发者来说通常就是\nWeb 浏览器。经过最近几年（不仅于此）的发展，JavaScript 已经超出了浏览器的范围，\n进入了其他环境，比如通过像 Node.js 这样的工具进入服务器领域。实际上，JavaScript 现\n如今已经嵌入到了从机器人到电灯泡等各种各样的设备中。</p>\n<p>但是，所有这些环境都有一个共同“点”（thread，也指线程。不论真假与否，这都不算一\n个很精妙的异步笑话），即它们都提供了一种机制来处理程序中多个块的执行，且执行每\n块时调用 JavaScript 引擎，这种机制被称为事件循环。</p>\n<p>话句话说：JavaScript引擎本身没有时间的概念，只是一个按需执行JavaScript任意代码片段的环境。“事件”（JavaScript代码执行）调度总是由包含它的环境进行。</p>\n<p><strong>那么，什么是事件循环？？</strong></p>\n<p>先通过一段伪代码了解一下这个概念:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// eventLoop是一个用作队列的数组</span>\n<span class=\"token comment\">// （先进，先出）</span>\n<span class=\"token keyword\">var</span> eventLoop <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> event<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// “永远”执行</span>\n<span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 一次tick</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>eventLoop<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 拿到队列中的下一个事件</span>\n    event <span class=\"token operator\">=</span> eventLoop<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 现在，执行下一个事件</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reportError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>你可以看到，有一个用 while 循环实现的持续运行的循环，循环的每一轮称为一个 tick。\n对每个 tick 而言，如果在队列中有等待事件，那么就会从队列中摘下一个事件并执行。这\n些事件就是你的回调函数。</p>\n<p>一定要清楚， setTimeout(..) 并 没有把你的回调函数挂在事件循环队列中。它所做的是设\n定一个定时器。当定时器到时后，环境会把你的回调函数放在事件循环中，这样，在未来\n某个时刻的 tick 会摘下并执行这个回调。</p>\n<p>如果这时候事件循环中已经有 20 个项目了会怎样呢？你的回调就会等待。它得排在\n其他项目后面——通常没有抢占式的方式支持直接将其排到队首。这也解释了为什么\nsetTimeout(..) 定时器的精度可能不高。大体说来，只能确保你的回调函数不会在指定的\n时间间隔之前运行，但可能会在那个时刻运行，也可能在那之后运行，要根据事件队列的\n状态而定。</p>\n<p>所以换句话来说，程序通常分成了很多的小块，在事件队列中一个接一个的执行，严格来说，和你程序不直接相关的其他事件也可能插入到队列中。</p>\n<h3 id=\"并行线程\">并行线程</h3>\n<p>异步是现在和将来的时间间隙，并行是关于能够同时发生的事情。</p>\n<p>并行计算最常见的工具就是进程和线程。进程和线程能够独立运行，并可能同时运行：在不同的处理器上，甚至不同的计算机上，但多个线程能够共享单个进程的内存。</p>\n<p>与之相对的是，事件循环把自身的工作分成一个个任务并顺序执行，不允许对共享内存的\n并行访问和修改。通过分立线程中彼此合作的事件循环，并行和顺序执行可以共存。</p>\n<p>并行线程的交替执行和异步事件的交替调度，其粒度是完全不同的。</p>\n<p>JavaScript 从不跨线程共享数据，这意味着不需要考虑多线程交错运行，可能会得到出乎意料的、不确定的行为。但是这并不意味着 JavaScript 总是确定性的：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  b <span class=\"token operator\">=</span> b <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  b <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ajax(..)是某个库中提供的某个Ajax函数</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.1\"</span><span class=\"token punctuation\">,</span> foo <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.2\"</span><span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>块1是同步的，而块2、块3是异步的：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 块 1：</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 块 2（ foo() ）：</span>\na<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> b <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 块 3（ bar() ）：</span>\nb<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>所以这段程序可能存在两种不同的输出结果</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">输出 <span class=\"token number\">1</span>：\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// foo()</span>\na<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> b <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// bar()</span>\nb<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 22</span>\n输出 <span class=\"token number\">2</span>：\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// bar()</span>\nb<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// foo()</span>\na<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> b <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 183</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 180</span>\n</code></pre></div>\n<p>同一段代码有不同的输出意味着还存在不确定性，但是这种不确定性实在函数的执行顺序级别上的，而不是多线程下的语句顺序的问题。换句话说，这一确定性要高于多线程情况。</p>\n<p>在 JavaScript 的特性中，这种函数顺序的不确定性就是通常所说的竞态条件（race\ncondition）， foo() 和 bar() 相互竞争，看谁先运行。具体来说，因为无法可靠预测 a 和 b的最终结果，所以才是竞态条件。</p>\n<h3 id=\"并发\">并发</h3>\n<p>现在让我们来设想一个展示状态更新列表（比如社交网络新闻种子）的网站，其随着用户\n向下滚动列表而逐渐加载更多内容。要正确地实现这一特性，需要（至少）两个独立的\n“进程”同时运行（也就是说，是在同一段时间内，并不需要在同一时刻）。</p>\n<p>这里的“进程”之所以打上引号，是因为这并不是计算机科学意义上的真正\n操作系统级进程。这是虚拟进程，或者任务，表示一个逻辑上相关的运算序\n列。之所以使用“进程”而不是“任务”，是因为从概念上来讲，“进程”的\n定义更符合这里我们使用的意义。</p>\n<h4 id=\"非交互\">非交互</h4>\n<p>两个或多个“进程”在同一个程序内并发地交替运行它们的步骤 / 事件时，如果这些任务\n彼此不相关，就不一定需要交互。如果进程间没有相互影响的话，不确定性是完全可以接\n受的。</p>\n<h4 id=\"交互\">交互</h4>\n<p>更常见的情况是，并发的“进程”需要相互交流，通过作用域或 DOM 间接交互。正如前\n面介绍的，如果出现这样的交互，就需要对它们的交互进行协调以避免竞态的出现。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  b <span class=\"token operator\">=</span> y <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ajax(..)是某个库中的某个Ajax函数</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.1\"</span><span class=\"token punctuation\">,</span> foo <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.2\"</span><span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>所谓了协调就是给执行添加条件，也叫门</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&#x26;&#x26;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  b <span class=\"token operator\">=</span> y <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&#x26;&#x26;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">+</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ajax(..)是某个库中的某个Ajax函数</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.1\"</span><span class=\"token punctuation\">,</span> foo <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.2\"</span><span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>包裹 baz() 调用的条件判断 if (a &#x26;&#x26; b) 传统上称为门（gate），我们虽然不能确定 a 和 b\n到达的顺序，但是会等到它们两个都准备好再进一步打开门（调用 baz() ）。\n另一种可能遇到的并发交互条件有时称为竞态（race），但是更精确的叫法是门闩（latch）。\n它的特性可以描述为“只有第一名取胜”。在这里，不确定性是可以接受的，因为它明确\n指出了这一点是可以接受的：需要“竞争”到终点，且只有唯一的胜利者。</p>\n<h4 id=\"协作\">协作</h4>\n<p>还有一种并发合作方式，称为并发协作（cooperative concurrency）。这里的重点不再是通过\n共享作用域中的值进行交互（尽管显然这也是允许的！）。这里的目标是取到一个长期运\n行的“进程”，并将其分割成多个步骤或多批任务，使得其他并发“进程”有机会将自己\n的运算插入到事件循环队列中交替运行。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// response(..)从Ajax调用中取得结果数组</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 添加到已有的res数组</span>\n  res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// 创建一个新的变换数组把所有data值加倍</span>\n    data<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> val <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ajax(..)是某个库中提供的某个Ajax函数</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.1\"</span><span class=\"token punctuation\">,</span> response <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.2\"</span><span class=\"token punctuation\">,</span> response <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果 \"http://some.url.1\" 首先取得结果，那么整个列表会立刻映射到 res 中。如果记录\n有几千条或更少，这不算什么。但是如果有像 1000 万条记录的话，就可能需要运行相当\n一段时间了（在高性能笔记本上需要几秒钟，在移动设备上需要更长时间，等等）。\n这样的“进程”运行时，页面上的其他代码都不能运行，包括不能有其他的 response(..)\n调用或 UI 刷新，甚至是像滚动、输入、按钮点击这样的用户事件。这是相当痛苦的。\n所以，要创建一个协作性更强更友好且不会霸占事件循环队列的并发系统，你可以异步地\n批处理这些结果。每次处理之后返回事件循环，让其他等待事件有机会运行。\n决绝办法：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// response(..)从Ajax调用中取得结果数组</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 一次处理1000个</span>\n<span class=\"token keyword\">var</span> chunk <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 添加到已有的res组</span>\n  res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">concat</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// 创建一个新的数组把chunk中所有值加倍</span>\n    chunk<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> val <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 还有剩下的需要处理吗？</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 异步调度下一次批处理</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">response</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ajax(..)是某个库中提供的某个Ajax函数</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.1\"</span><span class=\"token punctuation\">,</span> response <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.url.2\"</span><span class=\"token punctuation\">,</span> response <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我们把数据集合放在最多包含 1000 条项目的块中。这样，我们就确保了“进程”运行时\n间会很短，即使这意味着需要更多的后续“进程”，因为事件循环队列的交替运行会提高\n站点 /App 的响应（性能）。\n当然，我们并没有协调这些“进程”的顺序，所以结果的顺序是不可预测的。如果需要排\n序的话，就要使用和前面提到类似的交互技术，或者本书后面章节将要介绍的技术。\n这里使用 setTimeout(..0) （hack）进行异步调度，基本上它的意思就是“把这个函数插入\n到当前事件循环队列的结尾处”。</p>\n<blockquote>\n<p>严格说来，setTimeout(..0) 并不直接把项目插入到事件循环队列。定时器会在有机会的时候插入事件。举例来说，两个连续的 setTimeout(..0) 调用不能保证会严格按照调用顺序处理，所以各种情况都有可能出现，比如定时器漂移，在这种情况下，这些事件的顺序就不可预测。在 Node.js 中，类似的方法是 process.nextTick(..)。尽管它们使用方便（通常性能也更高），但并没有（至少到目前为止）直接的方法可以适应所有环境来确保异步事件的顺序。下一小节我们会深入讨论这个话题。</p>\n</blockquote>\n<h3 id=\"任务\">任务</h3>\n<p>在 ES6 中，有一个新的概念建立在事件循环队列之上，叫作任务队列（job queue）</p>\n<p>任务和 setTimeout(..0) hack 的思路类似，但是其实现方式的定义更加良好，对顺序的保\n证性更强：尽可能早的将来。</p>\n<p>设想一个调度任务（直接地，不要 hack）的 API，称其为 schedule(..) 。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"A\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"B\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 理论上的\"任务API\"</span>\n<span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"D\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//  A C D B</span>\n</code></pre></div>\n<hr>\n<h2 id=\"第二章-回调\">第二章 回调</h2>\n<h3 id=\"continuation\">continuation</h3>\n<h3 id=\"顺序大脑\">顺序大脑</h3>\n<h4 id=\"嵌套回调与链式回调\">嵌套回调与链式回调</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://some.url.1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>text <span class=\"token operator\">==</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>text <span class=\"token operator\">==</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>上边的这种代码通常称为回调地狱或者毁灭金字塔。</p>\n<p>但是实际上回调地狱和嵌套与缩进没有什么关系。它引起的问题比这些严重的多。</p>\n<p>感觉回调这一章大部分是以故事的形式在讲回调的一些问题。不是很懂，以后再看，先过。</p>\n<hr>\n<h2 id=\"promise\">Promise</h2>\n<h3 id=\"具有-then-方法的鸭子类型\">具有 then 方法的鸭子类型</h3>\n<p>如何确定某个值是不是真正的 Promise？</p>\n<p>识别Promise就是定义某种称为 thenable 的东西，将其定义为任何具有 then(...) 方法的对象或者函数。我们认为这样的值就是 Promise 一致的 thenable。</p>\n<p>根据一个值的形态（具有哪些属性）对这和个值的类型做出一些假定，这种类型检查一般用术语鸭子类型来表示---“如果它看起来像鸭子，叫起来像鸭子，那它一定就是一条鸭子”，于是对 thenable 值的鸭子类型检测就大致类似：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!==</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">(</span>typeor p <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> p <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token keyword\">typeof</span> p<span class=\"token punctuation\">.</span><span class=\"token property-access\">then</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 假定这是一个 thenable</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 不是 thenable</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>但是这个逻辑会带来更深层次的麻烦。</p>\n<p>假如我们正好有一个对象含有 then 方法，那么它也会被当作 thenable 或者 Promise，比如：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">then</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">then</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> v1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>hello<span class=\"token operator\">:</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> v2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>按照上边的鸭子类型检查，v1,v2都是 thenable。尤其时一些在 ES6 之前就有的一些非常著名的非 Promise 库恰好有 thenable 方法，要么就是重新命名自己的方法，要么就是降级与 Promise 不兼容，否则容易产生无法追踪的 bug。</p>\n<h3 id=\"promise-的信任问题\">Promise 的信任问题</h3>\n<h4 id=\"调用过早\">调用过早</h4>\n<p>一个人有时同步完成，有时异步完成，这可能会导致竞态条件（不确定性），比如：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">result</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 无法确定 ajax 是同步还是异步，result 的输出结果也不一样</span>\na<span class=\"token operator\">++</span>\n</code></pre></div>\n<p>但是，Promise 不存在这种问题，即使是立即完成的 Promise 也无法被同步观察到。</p>\n<p>也即是说，对一个 Promise 调用 then(...) 的时候，即使这个 Promise 已经决议，提供给 then 的回调也总是会被异步调用。不会存在上边可能是同步调用的问题，所以不需要插入 setTimout 这一类 hack 来异步调用。</p>\n<h4 id=\"调用过晚\">调用过晚</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span><span class=\"token punctuation\">{</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 5s 后</span>\n<span class=\"token comment\">// a b c</span>\n<span class=\"token operator\">~</span><span class=\"token operator\">~</span>\n\n<span class=\"token known-class-name class-name\">Promise</span> 所有通过 <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">)</span> 方法注册的回调都会在下一个异步时机上依次被立即调用。回调中任何一个都无法影响或者延误对其回调的调用。\n\n#### <span class=\"token known-class-name class-name\">Promise</span> 调度技巧\n\n如果两个 <span class=\"token known-class-name class-name\">Promise</span> p1 和 p2 都已经决议，那么 p1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">)</span> 和 p2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">)</span> 最终应该会先调用 p1 的回调，然后 p2 的回调。但是，有些微妙的场景不是这样的，比如：\n<span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span>js\n<span class=\"token keyword\">var</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\np1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\np2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// p2 p3</span>\n</code></pre></div>\n<p>结果不是p1 的回调先调用，而是 p2 的回调。因为 p1 不是立即值，而是用另一个 Promise p3 l决定。</p>\n<h4 id=\"回调未调用\">回调未调用</h4>\n<p>只要注册了完成回调和拒绝回调，那么 Promise 在决议时，总会调用其中一个。</p>\n<h4 id=\"调用次数过多或者过少\">调用次数过多或者过少</h4>\n<p>Promise 只能决议一次。</p>\n<h4 id=\"吞掉错误或者异常\">吞掉错误或者异常</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n  <span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 会捕获到错误</span>\n<span class=\"token punctuation\">)</span> \n</code></pre></div>\n<p>在 Promise 的创建过程中，或者在查看其决议结果过程中的任何时间点上出现一个 JavaScript 异常的错误，都会使这个 Promise 拒绝。</p>\n<p>如果在完成回调中出现了错误：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n  <span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此时无法捕获到错误</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>此时是无法捕获到异常的，因为 Promise.then(...) 本身返回了一个 Promise，所以在上一个完成回调中的错误应该是在返回的 Promise 中侦听和捕获：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n  <span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">error</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这里可以捕获到异常</span>\n</code></pre></div>\n<p>基于上面几点，Promise 这种模式通过可信任的语义把回调作为参数传递，把回调的控制权反转回来，使得这种行为更加可靠和合理。</p>\n<h3 id=\"链式流\">链式流</h3>\n<h3 id=\"错误处理\">错误处理</h3>\n<ul>\n<li>对于多数的开发者来说，错误处理的最自然的形式就是同步的try...catch结构，遗憾的是它只能是同步，而无法处理异步代码模式。</li>\n<li>成功回调中出现的错误无法被当前 then 中的失败回调捕捉，只能是在下一个 Promise 中捕捉。</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fulfilled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 数字没有string函数，所以会抛出错误</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> msg<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">rejected</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 永远不会到达这里</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"绝望的陷阱\">绝望的陷阱</h4>\n<p>为了避免丢失被忽略和被抛弃的 Promise 错误，一些开发者表示，Promise 的最佳实践就是最后总以一个 cache 结束：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fulfilled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 数字没有string函数，所以会抛出错误</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> msg<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span> handleErrors <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>因为我们没有为 then(..) 传入拒绝处理函数，所以默认的处理函数被替换掉了，而这仅仅是把错误传递给了链中的下一个 promise。因此，进入 p 的错误以及 p 之后进入其决议（就像 msg.toLowerCase() ）的错误都会传递到最后的 handleErrors(..) 。</p>\n<p>那么如果 handleErrors 本身出现错误怎么办？在尾部添加一个 cache 只能是降低了丢失错误的可能性。</p>\n<h4 id=\"处理未捕获的情况\">处理未捕获的情况</h4>\n<p>这节内容不是很懂。</p>\n<h3 id=\"promise-模式\">Promise 模式</h3>\n<h4 id=\"promiseall--\">Promise.all([ .. ])</h4>\n<h4 id=\"promiserace--\">Promise.race([ .. ])</h4>\n<h4 id=\"all-和-race-的变体\">all 和 race 的变体</h4>\n<ul>\n<li>none</li>\n</ul>\n<p>这个模式类似于 all([ .. ]) ，不过完成和拒绝的情况互换了。所有的 Promise 都要被拒绝，即拒绝转化为完成值，反之亦然。</p>\n<ul>\n<li>any([ .. ])</li>\n</ul>\n<p>这个模式与 all([ .. ]) 类似，但是会忽略拒绝，所以只需要完成一个而不是全部。</p>\n<ul>\n<li>first([ .. ])</li>\n</ul>\n<p>这个模式类似于与 any([ .. ]) 的竞争，即只要第一个 Promise 完成，它就会忽略后续的任何拒绝和完成。</p>\n<ul>\n<li>last([ .. ])</li>\n</ul>\n<p>这个模式类似于 first([ .. ]) ，但却是只有最后一个完成胜出。</p>\n<p>有些 Promise 抽象库提供了这些支持，但也可以使用 Promise、 race([ .. ]) 和 all([ .. ])这些机制，你自己来实现它们。\n比如 first:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// polyfill安全的guard检查</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">first</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">first</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 在所有promise上循环</span>\n    prs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 把值规整化</span>\n      <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span> pr <span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 不管哪个最先完成，就决议主promise</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span> resolve <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"promise-api-概述\">Promise API 概述</h3>\n<h4 id=\"new-promise-构造器\">new Promise(..) 构造器</h4>\n<p>有启示性的构造器 Promise(..) 必须和 new 一起使用，并且必须提供一个函数回调。这个回调是同步的或立即调用的。这个函数接受两个函数回调，用以支持 promise 的决议。通常我们把这两个函数称为 resolve(..) 和 reject(..) ：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// resolve(..)用于决议/完成这个promise</span>\n<span class=\"token comment\">// reject(..)用于拒绝这个promise</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>reject(...) 就是拒绝这个 Promise；但 resolve(...) 既可能完成这个 Promise 也可能拒绝这个 Promise，要根据传入的参数决定。如果传入的是一个非 Promise 或者 非 thenable 的立即值，这个 promise 就会用这个值完成。</p>\n<p>如果传入的是一个 Promise 或者 thenable 这个只就会被递归展开，并且要构造的 Promise 就会取其最终的值或者状态。</p>\n<h4 id=\"promiseresolve-和-promisereject\">Promise.resolve(..) 和 Promise.reject(..)</h4>\n<h4 id=\"then-和-catch\">then(..) 和 catch(..)</h4>\n<h4 id=\"promiseall---和-promiserace--\">Promise.all([ .. ]) 和 Promise.race([ .. ])</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Hello World\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p3 <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reject</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Oops\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">race</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> msg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span> err <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Oops\"</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msgs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> msgs <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [42,\"Hello World\"]</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<blockquote>\n<p>当心！若向 Promise.all([ .. ]) 传入空数组，它会立即完成，但 Promise.race([ .. ]) 会挂住，且永远不会决议。</p>\n</blockquote>\n<h3 id=\"promise-局限性\">Promise 局限性</h3>\n<h4 id=\"顺序错误处理\">顺序错误处理</h4>\n<p>即 Promise 链中的错误很容易被无意中默默忽略掉。</p>\n<h4 id=\"单决议\">单决议</h4>\n<h4 id=\"惯性\">惯性</h4>\n<h4 id=\"无法取消的-promise\">无法取消的 Promise</h4>\n<h4 id=\"promise-性能\">Promise 性能</h4>\n<hr>\n<h2 id=\"第四章-生成器\">第四章 生成器</h2>\n<h3 id=\"打破完整的运行\">打破完整的运行</h3>\n<p>在第 1 章中，我们解释了 JavaScript 开发者在代码中几乎普遍依赖的一个假定：一个函数\n一旦开始执行，就会运行到结束，期间不会有其他代码能够打断它并插入其间。</p>\n<p>可能看起来似乎有点奇怪，不过 ES6 引入了一个新的函数类型，它并不符合这种运行到结\n束的特性。这类新的函数被称为生成器。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">++</span>\n  <span class=\"token keyword control-flow\">yield</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>很可能你看到的其他多数 JavaScript 文档和代码中的生成器声明格式都是function* foo() { .. }，而不是我这里使用的 function <em>foo() { .. }：\n唯一区别是 * 位置的风格不同。这两种形式在功能和语法上都是等同的，还有一种是 function</em>foo(){ .. }（没有空格）也一样。两种风格，各有优缺，但总体上我比较喜欢 function *foo.. 的形式，因为这样在使用 *foo()来引用生成器的时候就会比较一致。如果只用 foo() 的形式，你就不会清楚知道我指的是生成器还是常规函数。这完全是一个风格偏好问题。</p>\n<p>现在，我们要如何运行前面的代码片段，使得 bar() 在 *foo() 内部的 yield 处执行呢？</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 构造一个迭代器it来控制这个生成器</span>\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这里启动foo()！</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x: 3</span>\n</code></pre></div>\n<ol>\n<li>\n<p>it = foo() 并没有执行生成器 *foo()，而只是构造了一个迭代器（iterator），这个迭代器会控制它的执行。</p>\n</li>\n<li>\n<p>第一个 it.next() 启动了生成器 *foo()，并且运行了第一行 x++。</p>\n</li>\n<li>\n<p>*foo() 在 yield 语句处暂停，在这一点上第一个 it.next() 调用结束。此时 *foo() 仍\n在运行并且是活跃的，但处于暂停状态。</p>\n</li>\n<li>\n<p>我们查看 x 的值，此时为 2 。</p>\n</li>\n<li>\n<p>我们调用 bar() ，它通过 x++ 再次递增 x 。</p>\n</li>\n<li>\n<p>我们再次查看 x 的值，此时为 3 。</p>\n</li>\n<li>\n<p>最后的 it.next() 调用从暂停处恢复了生成器 *foo() 的执行，并运行 console.log(..)\n语句，这条语句使用当前 x 的值 3 。</p>\n</li>\n</ol>\n<p>生成器就是一类特殊的函数，可以一次或多次启动和停止，并不一定非得要完成。</p>\n<h4 id=\"输入和输出\">输入和输出</h4>\n<p>生成器仍然是一个函数，这意味着它仍然有一些基本的特性没有改变。比如，它仍然可以接受参数（即输入），也能够返回值（即输出）。</p>\n<p>但难以理解的是，生成器 *foo(..) 并没有像普通函数一样实际运行。事实上，我们只是创建了一个迭代器对象，把它赋给了一个变量 it ，用于控制生成器\n*foo(..) 。然后调用 it.next() ，指示生成器 *foo(..) 从当前位置开始继续运行，停在下\n一个 yield 处或者直到生成器结束。</p>\n<p>这个 next(..) 调用的结果是一个对象，它有一个 value 属性，持有从 *foo(..) 返回的值\n（如果有的话）。换句话说， yield 会导致生成器在执行过程中发送出一个值，这有点类似\n于中间的 return 。</p>\n<p><strong>目前还不清楚为什么需要这一整个间接迭代器对象来控制生成器</strong></p>\n<h4 id=\"迭代消息传递\">迭代消息传递</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">yield</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 启动foo(..)</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nres<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n</code></pre></div>\n<p>注意，这里有一点非常重要，但即使对于有经验的 JavaScript 开发者也很有迷惑性：根据\n你的视角不同， yield 和 next(..) 调用有一个不匹配。一般来说，需要的 next(..) 调用要\n比 yield 语句多一个，前面的代码片段有一个 yield 和两个 next(..) 调用。</p>\n<p>为什么会有这个不匹配？</p>\n<p>因为第一个 next(..) 总是启动一个生成器，并运行到第一个 yield 处。不过，是第二个\nnext(..) 调用完成第一个被暂停的 yield 表达式，第三个 next(..) 调用完成第二个 yield，以此类推。</p>\n<h4 id=\"两个问题\">两个问题</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">yield</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">return</span> y<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>第一个 yield 基本上是提出了一个问题：“这里我应该插入什么值？”</p>\n<p>谁来回答这个问题呢？第一个 next() 已经运行，使得生成器启动并运行到此处，所以显\n然它无法回答这个问题。因此必须由第二个 next(..) 调用回答第一个 yield 提出的这个\n问题。</p>\n<p>把视角转化一下：不从生成器的视角看这个问题，而是从迭代器的角度。</p>\n<p><strong>为了恰当阐述这个视角，我们还需要解释一下：消息是双向传递的</strong>—— yield.. 作为一个\n表达式可以发出消息响应 next(..) 调用， next(..) 也可以向暂停的 yield 表达式发送值。\n考虑下面这段稍稍调整过的代码：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">yield</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#x3C;-- yield一个值！</span>\n  <span class=\"token keyword control-flow\">return</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一个next()，并不传入任何东西</span>\nres<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello\"</span>\nres <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向等待的yield传入7</span>\nres<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n</code></pre></div>\n<p>yield .. 和 next(..) 这一对组合起来，在生成器的执行过程中构成了一个双向消息传递系统。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一个next()，并不传入任何东西</span>\nres<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello\"</span>\nres <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向等待的yield传入7</span>\nres<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n</code></pre></div>\n<p>我们并没有向第一个 next() 调用发送值，这是有意为之。<strong>只有暂停的 yield才能接受这样一个通过 next(..) 传递的值</strong>，而在生成器的起始处我们调用\n第一个 next() 时，还没有暂停的 yield 来接受这样一个值。规范和所有兼\n容浏览器都会默默丢弃传递给第一个 next() 的任何东西。传值过去仍然不\n是一个好思路，因为你创建了沉默的无效代码，这会让人迷惑。因此，启动\n生成器时一定要用不带参数的 next()。</p>\n<p>*<em>第一个 next() 调用（没有参数的）基本上就是在提出一个问题：“生成器 <em>foo(..) 要给我的下一个值是什么”。谁来回答这个问题呢？第一个 yield \"hello\" 表达式。</em></em>\n看见了吗？这里没有不匹配。</p>\n<p>根据你认为提出问题的是谁， yield 和 next(..) 调用之间要么有不匹配，要么没有。\n但是，稍等！与 yield 语句的数量相比，还是多出了一个额外的 next() 。<strong>所以，最后一个it.next(7) 调用再次提出了这样的问题：生成器将要产生的下一个值是什么。但是，再没有 yield 语句来回答这个问题了，是不是？那么谁来回答呢？return 语句回答这个问题！</strong></p>\n<p><strong>所以每一个next()都对应一个yield，如果最后一个next()找不到对应的yield，就会使用return的值，并且完成生成器。</strong></p>\n<p>如果你的生成器中没有 return 的话——在生成器中和在普通函数中一样， return 当然不\n是必需的——总有一个假定的 / 隐式的 return; （也就是  return undefined; ），它会在默认情况下回答最后的 it.next(7) 调用提出的问题。\n这样的提问和回答是非常强大的：通过 yield 和 next(..) 建立的双向消息传递。但<strong>目前还不清楚这些机制是如何与异步流程控制联系到一起的</strong>。会清楚的！</p>\n<h3 id=\"生成器产生值\">生成器产生值</h3>\n<p>迭代器是一个定义良好的接口，用于从一个生产者一步步得到一系列值。JavaScript 迭代器的接口，与多数语言类似，就是每次想要从生产者得到下一个值的时候调用 next() 。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> something <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> nextVal\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>nextVal <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nextVal <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        nextVal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> nextVal<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">6</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> nextVal<span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>next()调用返回一个对象。这个对象有两个属性： done 是一个 boolean 值。标识迭代器的完成状态，value 中放置迭代值。</p>\n<p>ES6 还心中了一个 for ...of 循环，这意味着可以通过原生循环语法自动迭代标准迭代器。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> v <span class=\"token keyword\">of</span> something<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 不要死循环</span>\n  <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">></span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">break</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>因为我们的迭代器 something 总是返回 done:false，因此这个 for...of 循环将永远的运行下去，这也就是为什么我们要在里面放一个 break 条件。迭代器永不结束是完全没问题的，但也是有一些情况下，迭代器会在有限的值集合上运行，并最终返回 done: true</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> ret<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> something<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>ret<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 不要死循环</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">break</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"iterable\">iterable</h4>\n<p>前面例子中 something 对象叫做迭代器，因为它的接口中有一个 next() 方法。而与其紧密相关的一个术语是 iterable，即指一个包含可以在其值上迭代的迭代器的对象。比如 Array 自带 Symbol.iterator 属性且属性值是一个函数。</p>\n<p>从 ES6 开始，从一个iterable 中提取迭代器的方法是： iterable 必须支持一个函数，其名称是专门的 ES6 符号返回值 Symbol.iterator。这个函数会返回一个迭代器。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">iterator</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>现在 something 的值既是一个 iterable 也是一个迭代器。</p>\n<h4 id=\"生成器迭代器\">生成器迭代器</h4>\n<p>可以把生成器看成是一个值的生产者，我们通过迭代器接口的 next 方法调用一个提取除一个值。</p>\n<p>所以，严格来说，生成器并不是 iterable，尽管非常类似，当前执行一个生成器，就会得到一个迭代器</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>因此可以通过生成器来实现前面的这个 something 无线数字序列生产者</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">something</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> nextVal\n\n  <span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>nextVal <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextVal <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n      nextVal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> nextVal<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">6</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">yield</span> nextVal\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>现在可以通过for...of循环来使用我们雕琢过的新的 *something() 生成器。方式基本和iterable是一样的。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> v <span class=\"token keyword\">of</span> <span class=\"token function\">something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 不要死循环</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">></span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">break</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>\n<p>为什么不能用 for (var of something) ? 因为这里的 something 是生成器，并不是 iterable。我们需要调用 something() 来构造一个生产者供 for ... of 循环迭代。</p>\n</li>\n<li>\n<p>something() 调用产生也有一个迭代器，但是 for ... of 循环需要的是一个 iterable。生成器也有一个 Symbol.iterator 函数，基本上这个函数做的就是return this，和我们前面定义的 iterable something 一样。换句话，<strong>生成器的迭代器也是一个 iterable</strong>。</p>\n</li>\n</ul>\n<h4 id=\"停止生成器\">停止生成器</h4>\n<p>在前面的例子中，看起来似乎 *something() 生成器的迭代器实例在循环中的 break 调用之后就永远留在了挂起的状态。</p>\n<p>其实有一个隐藏的特性会帮助你管理此事，for ... of循环的“异常结束”，也就是“提前终止”，通常由 break、return或者未捕获的异常引起，会向生成器的迭代器发送一个信号使其终止。</p>\n<blockquote>\n<p>严格的来说，在循环正常结束之后，for ... of 循环也会向迭代器发送这个信号。对于生成器来说，这本质上是没有意义的操作。因为生成器的迭代器需要先完成 for ... of 循环才能结束，但是，自定义的迭代器可能会需要从 for ... of 循环的消费者那里接收这个额外的信号。</p>\n</blockquote>\n<p>尽管 for ... of 循环会自动发送这个信号，但是你可能会希望向一个迭代器手工发送这个信号。可以通过调用， return(...) 实现这一点。</p>\n<p>如果在生成器内有 try ... finally 语句，它将总会运行，即使生成器已经外部结束。如果需要清理资源的话，这一点非常的有有用。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">something</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nextVal\n\n    <span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>nextVal <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nextVal <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        nextVal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> nextVal<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">6</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword control-flow\">yield</span> nextVal\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cleaning up'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>之前的例子中，for ... of 循环内 break 会触发 finally 语句。但是，也可以在外部通过 return(...) 手工终止生成器这样的迭代实例。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> v <span class=\"token keyword\">of</span> it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">></span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 完成生成器的迭代器</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">(</span><span class=\"token string\">'helle world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 不需要 break</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>调用 it.return(...) 之后，它立即会终止生成器，这当然会运行 finally 语句。它还会把返回的 value 值设置为传人 return(...) 的内容，这也就是'hello world'被传出去的过程。现在我们也不需要 break 语句，因为生成器的迭代器已经被设置为 done: true，所以 for ... of 循环会在下一个迭代终止。</p>\n<h3 id=\"异步迭代生成器\">异步迭代生成器</h3>\n<p>生成器与异步编码模式以及解决回调问题等，有什么关系？</p>\n<p>回想以下之前的例子：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://some.url.1/?x='</span><span class=\"token operator\">+</span><span class=\"token string\">' x '</span><span class=\"token operator\">+</span><span class=\"token string\">' &#x26;y='</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span> db<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>如果想通过生成器来实现：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://some.url.1/?x='</span><span class=\"token operator\">+</span><span class=\"token string\">' x '</span><span class=\"token operator\">+</span><span class=\"token string\">' &#x26;y='</span> <span class=\"token operator\">+</span>  y<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      it<span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">throw</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n      it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h4 id=\"同步错误处理\">同步错误处理</h4>\n<p>之前我们知道 try catch 只能捕获到同步代码的错误，我们看看上边的代码：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 这里可以捕获到 迭代器抛出的 error</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们可以将异步的错误抛入生成器中进行处理。</p>\n<h3 id=\"生成器加迭代器\">生成器加迭代器</h3>\n<p><strong>获得 promise 和 生成器最大效用的最自然的方法就是yield出来一个promise，然后通过这个promise来控制生成器的迭代。</strong></p>\n<p>让我们尝试把支持promise的foo(...)和生成器*main()放在一起：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://some.url.1/?x='</span><span class=\"token operator\">+</span><span class=\"token string\">' x '</span><span class=\"token operator\">+</span><span class=\"token string\">' &#x26;y='</span> <span class=\"token operator\">+</span>  y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\np<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    it<span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">throw</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>这种写法解决掉了之前的回调。隐藏了if (err) {...}这样的细节，由promise来分离完成和拒绝。</p>\n<h4 id=\"支持promise的generator-runner\">支持Promise的generator runner</h4>\n<p>如果有一种方法可以实现重复（循环）迭代控制，每次会生成一个promise，等其决议之后再继续，那该多好。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">run</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">gen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> aggs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> it\n\n  <span class=\"token comment\">// 在当前上下文中初始化生成器</span>\n  it <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 返回一个promise用于生成器完成</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">handleNext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 对下一个yield出的值运行</span>\n      <span class=\"token keyword\">var</span> next <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">handleResult</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 生成器运行完毕</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span><span class=\"token property-access\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword control-flow\">return</span> next<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n              handleNext<span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">function</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">throw</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>handleResult<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"生成器中promise的并发\">生成器中promise的并发</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> r1 <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> r2 <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">var</span> r3 <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>p1<span class=\"token spread operator\">...</span>p2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最简单的改写，让r1，r2并发</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> r1 <span class=\"token operator\">=</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> r2 <span class=\"token operator\">=</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> r1\n  <span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> r2\n\n  <span class=\"token keyword\">var</span> r3 <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>p1<span class=\"token spread operator\">...</span>p2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>换成 Promise.all([])</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> results <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">var</span> r1 <span class=\"token operator\">=</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">var</span> r2 <span class=\"token operator\">=</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">var</span> r3 <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>r1<span class=\"token spread operator\">...</span>r2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"生成器委托\">生成器委托</h3>\n<p>你可能会从一个生成器调用另一个生成器</p>\n<p>yield 委托，语法是 yield *__</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*foo() starting'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">yield</span> <span class=\"token number\">3</span>\n  <span class=\"token keyword control-flow\">yield</span> <span class=\"token number\">4</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*foo() finished'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">yield</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword control-flow\">yield</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword control-flow\">yield</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">yield</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token comment\">// 1</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token comment\">// 2</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token comment\">// *foo() 启动 3</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token comment\">// 4</span>\nit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token comment\">// *foo() 完成 5</span>\n</code></pre></div>\n<h4 id=\"为什么要委托？\">为什么要委托？</h4>\n<p>yield 委托的目的主要是代码组织，以达到与普通函数调用的对称。</p>\n<h4 id=\"消息委托\">消息委托</h4>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inside *foo():'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inside *foo():'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">'d'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inside *bar():'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inside *bar():'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token operator\">*</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inside *bar():'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword control-flow\">yield</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">'f'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ouside:'</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// outside: a</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ouside:'</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// inside *bar(): 1 outside: b</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ouside:'</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// inside *foo(): 2 outside: c</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ouside:'</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// inside *foo(): 3 inside *bar(): d outside: e</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ouside:'</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// inside *bar(): 4 outside: f</span>\n</code></pre></div>\n<p>一一对应解析：</p>\n<ol>\n<li>\n<p>无代码执行，代码停在 console.log('inside *bar():', yield 'a') 生成器*bar()给出 'a'</p>\n</li>\n<li>\n<p>代码执行 console.log('inside *bar():', yield 'a')，yield 插入 1，代码停在console.log('inside *bar():', yield *foo()) 发现用 yield  对 *foo()进行了委托, 这一步相当于启动了*foo(), 并在*foo()中将代码停在console.log('inside *foo():', yield 'b') 生成器*foo()给出</p>\n</li>\n<li>\n<p>代码执行console.log('inside *foo():', yield 'b')，yield 插入2， 代码停在 console.log('inside *foo():', yield 'c') 生成器*foo()给出 'c'</p>\n</li>\n<li>\n<p>代码执行 console.log('inside *foo():', yield 'c')，yield插入 3，从*foo()返回*bar()，发现之前的代码停在 console.log('inside *bar():', yield *foo()) 所以执行 console.log('inside *bar():', yield *foo())，准确来说应该是 console.log('inside *bar():', 'd')，然后将代码代码停在 console.log('inside *bar():', yield 'e') 处，所以给出'e'</p>\n</li>\n<li>\n<p>代码执行 console.log('inside *bar():', yield 'e')，yield插入 4，最后没有yield返回一个值，所以默认使用 return 返回的值。</p>\n</li>\n</ol>\n<h4 id=\"异步委托\">异步委托</h4>\n<h4 id=\"递归委托\">递归委托</h4>\n<p>yield 委托自身</p>\n<h3 id=\"es6-之前的生成器\">ES6 之前的生成器</h3>\n<hr>\n<h2 id=\"程序性能\">程序性能</h2>\n<h3 id=\"web-worker\">Web Worker</h3>\n<p>从 JavaScript 主程序中，可以这样实例化一个 Worker</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> w1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://...'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>这个 URL 应该指向一个 JavaScript 文件的位置，这个问价将被加载到一个 Worker 中，然后浏览器启动一个独立的线程，让这个文件在这个独立的线程中运行。</p>\n<blockquote>\n<p>通过这样的URL创建的Worker称为专用Woerkr，除了提供一个 指向外部文件URL,还可以通过提供一个Blob URL(另一个html5的特性)创建一个在线Worker，本质上就是一个存储在单位（二进制）值中的在线文件。</p>\n</blockquote>\n<p>Worker 之间以及它们和主程序之间，不会共享任何作用域或资源，而是通过一个基本的事件消息机制相互联系。</p>\n<p>Worker w1 是一个事件的侦听者和触发者，可以通过订阅它来获得这个Worker发出的事件以及发送事件给这个Worker。</p>\n<p>侦听事件</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">w1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListenner</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// evt.data</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>发送'message'</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">w1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>在这个 Worker 内部收发消息是完全对称的。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">addEventListenner</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// evt.data</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>要在创建的 Worker 中终止 Worker，可以调用 Worker 对象上的 terminate()。突然终止 Worker 线程不会给它任何机会完成它的工作或者清理任何资源。这就类似通过关闭浏览器标签页来关闭页面。</p>\n<h4 id=\"worker-环境\">Worker 环境</h4>\n<p>在 Worker内部是无法访问主程序的任何资源的，这意味着你不能访问它的任何全局变量，也不能访问页面dom或者其他资源。这是一个完全独立的线程。</p>\n<p>但是，可以执行网络操作（Ajax、WebSockets）以及设定定时器，还有可以访问几个重要的全局变量和功能的本地副本，包括navigator,location,JSON和 applicationCache.</p>\n<p>你还可以通过 importScript(...) 向 Worker 加载额外的 JavaScript 脚本。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 在 worker 内部</span>\n<span class=\"token function\">importScript</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar.js'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>这些脚本的加载是同步的。也就是说，importScript(...)调用会阻塞余下 Worker的执行，知道文件加载和执行完成。</p>\n<p>Web Worker 通常用于哪些方面：</p>\n<ul>\n<li>处理密集数学计算</li>\n<li>大数据集排序</li>\n<li>数据处理（压缩，音频分析，图像处理等）</li>\n<li>高流量网络通信</li>\n</ul>\n<h4 id=\"数据传递\">数据传递</h4>\n<p>上面提到的这些应用大多数有一个共性，就是需要在线程之间通过事件机制传递大量的信息，可能是双向。</p>\n<p>在早期的 Worker 中，唯一的选择就是把所有数据序列化到一个字符串值中。除了双向序列化导致的速度损失之外，另外一个主要的负面因素是数据需要被复制，这意味着两倍的内存使用（以及引起的垃圾收集方面的波动）</p>\n<p>现在我们可以使用结构化克隆算法（mdn上有相关的说明）可以把对象赋值到另一边，这个算法作非常高级，甚至可以处理要复制对象有循环引用的情况，但是它只作为API的一部分不会暴露出来，通过我们通过postMessage将消息发送到其他的窗口或者Web Worker就会用到它，所以我们一般只通过API来使用，目前IE10以及更高的版本以及所有的其他主流浏览器都支持这种方案。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">structuralClone</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> port1<span class=\"token punctuation\">,</span> port2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    port2<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span>\n    port1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">postMessage</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">structuralClone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>还有一个更好的选择，特别是对于大数据集，就是使用 Transferable 对象。这个时候发生的对象所有权的转移，数据本身并没有移动，一旦你把对象传递到一个 Worker 中，在原来的位置上，他就会变为空后者不可以访问，这样就消除了多线程编程作用域共享带来的混乱。当然，所有权传递是可以双向进行的。</p>\n<p>如果使用 Transferable 对象其实不需要做什么，任何实现了 Transferable 接口的数据结构就会自动按照着种方式进行传输。</p>\n<p>比如Uinit8Array:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">butter</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">buffer</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>第一个参数就是原始缓冲区，第二个就是一个要传输的内容的列表。</p>\n<h4 id=\"共享的-worker\">共享的 worker</h4>\n<p>创建一个整个站点或者app的所有页面实例都可以共享的中心Worker就非常有用。这种称为 SharedWorker:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> w1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SharedWorker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://...'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>因为共享 Worker 可以与站点的多个程序实列或者多个页面连接，所以这个 Worker 需要通过某种方式来得知消息来自于哪个程序。这个唯一的标识符就是端口。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">w1<span class=\"token punctuation\">.</span><span class=\"token property-access\">port</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> handleMessage<span class=\"token punctuation\">)</span>\nw1<span class=\"token punctuation\">.</span><span class=\"token property-access\">port</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'something cool'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 端口必须要初始化</span>\nw1<span class=\"token punctuation\">.</span><span class=\"token property-access\">port</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>在共享 Worker 内部，必须要处理额外的一个事件： \"connect\" 。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 在共享Worker内部</span>\n<span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"connect\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 这个连接分配的端口</span>\n  <span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> evt<span class=\"token punctuation\">.</span><span class=\"token property-access\">ports</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  port<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n    port<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">postMessage</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化端口连接</span>\n  port<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n",
    "frontmatter": {
      "title": "笔记摘录-你不知道的JavaScript-中篇",
      "img": "https://placem.at/places?h=140",
      "date": "2018-02-25"
    },
    "toc": "<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%AF%AD%E6%B3%95\">第一部分 类型和语法</a></p>\n<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%B1%BB%E5%9E%8B\">第一章 类型</a></p>\n<ul>\n<li><a href=\"#%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B\">内置类型</a></li>\n<li><a href=\"#%E5%80%BC%E5%92%8C%E7%B1%BB%E5%9E%8B\">值和类型</a></li>\n<li><a href=\"#undefined-%E5%92%8C-undeclared\">undefined 和 undeclared</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%80%BC\">值</a></p>\n<ul>\n<li><a href=\"#%E6%95%B0%E7%BB%84\">数组</a></li>\n<li><a href=\"#%E7%B1%BB%E6%95%B0%E7%BB%84\">类数组</a></li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\">字符串</a></li>\n<li><a href=\"#%E6%95%B0%E5%AD%97\">数字</a></li>\n<li><a href=\"#%E7%89%B9%E6%AE%8A%E6%95%B0%E5%80%BC\">特殊数值</a></li>\n<li><a href=\"#%E5%80%BC%E5%92%8C%E5%BC%95%E7%94%A8\">值和引用</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%8E%9F%E7%94%9F%E5%87%BD%E6%95%B0\">原生函数</a></p>\n<ul>\n<li><a href=\"#%E5%86%85%E9%83%A8%E5%B1%9E%E6%80%A7\">内部属性</a></li>\n<li><a href=\"#%E5%B0%81%E8%A3%85%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85\">封装对象包装</a></li>\n<li><a href=\"#%E6%8B%86%E5%B0%81\">拆封</a></li>\n<li><a href=\"#%E5%B0%86%E5%8E%9F%E7%94%9F%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\">将原生函数作为构造函数</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\">第四章 强制类型转换</a></p>\n<ul>\n<li><a href=\"#%E5%80%BC%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\">值类型转换</a></li>\n<li><a href=\"#%E6%8A%BD%E8%B1%A1%E5%80%BC%E6%93%8D%E4%BD%9C\">抽象值操作</a></li>\n<li><a href=\"#%E6%98%BE%E7%A4%BA%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\">显示强制类型转换</a></li>\n<li><a href=\"#%E9%9A%90%E5%BC%8F%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2\">隐式强制转换</a></li>\n<li><a href=\"#-%E5%92%8C-\">|| 和 &#x26;&#x26;</a></li>\n<li><a href=\"#%E5%AE%BD%E6%9D%BE%E7%9B%B8%E7%AD%89%E5%92%8C%E4%B8%A5%E6%A0%BC%E7%9B%B8%E7%AD%89\">宽松相等和严格相等</a></li>\n<li><a href=\"#%E6%8A%BD%E8%B1%A1%E7%9B%B8%E7%AD%89\">抽象相等</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%AF%AD%E6%B3%95\">第五章 语法</a></p>\n<ul>\n<li><a href=\"#%E8%AF%AD%E5%8F%A5%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F\">语句和表达式</a></li>\n<li><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\">运算符的优先级</a></li>\n<li><a href=\"#%E8%87%AA%E5%8A%A8%E5%88%86%E5%8F%B7\">自动分号</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E5%BC%82%E6%AD%A5%E4%B8%8E%E6%80%A7%E8%83%BD\">第二部分 异步与性能</a></p>\n<ul>\n<li>\n<p><a href=\"#%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%8E%B0%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E9%83%A8%E5%88%86%E5%92%8C%E5%B0%86%E6%9D%A5%E8%BF%90%E8%A1%8C%E7%9A%84%E9%83%A8%E5%88%86%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E5%B0%B1%E6%98%AF%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E6%A0%B8%E5%BF%83%E3%80%82\">程序中现在运行的部分和将来运行的部分之间的关系就是异步编程的核心。</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%8E%B0%E5%9C%A8%E4%B8%8E%E5%B0%86%E6%9D%A5\">第一章 现在与将来</a></p>\n<ul>\n<li><a href=\"#%E5%88%86%E5%9D%97%E7%9A%84%E7%A8%8B%E5%BA%8F\">分块的程序</a></li>\n<li><a href=\"#%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF\">事件循环</a></li>\n<li><a href=\"#%E5%B9%B6%E8%A1%8C%E7%BA%BF%E7%A8%8B\">并行线程</a></li>\n<li><a href=\"#%E5%B9%B6%E5%8F%91\">并发</a></li>\n<li><a href=\"#%E4%BB%BB%E5%8A%A1\">任务</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9B%9E%E8%B0%83\">第二章 回调</a></p>\n<ul>\n<li><a href=\"#continuation\">continuation</a></li>\n<li><a href=\"#%E9%A1%BA%E5%BA%8F%E5%A4%A7%E8%84%91\">顺序大脑</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#promise\">Promise</a></p>\n<ul>\n<li><a href=\"#%E5%85%B7%E6%9C%89-then-%E6%96%B9%E6%B3%95%E7%9A%84%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B\">具有 then 方法的鸭子类型</a></li>\n<li><a href=\"#promise-%E7%9A%84%E4%BF%A1%E4%BB%BB%E9%97%AE%E9%A2%98\">Promise 的信任问题</a></li>\n<li><a href=\"#%E9%93%BE%E5%BC%8F%E6%B5%81\">链式流</a></li>\n<li><a href=\"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\">错误处理</a></li>\n<li><a href=\"#promise-%E6%A8%A1%E5%BC%8F\">Promise 模式</a></li>\n<li><a href=\"#promise-api-%E6%A6%82%E8%BF%B0\">Promise API 概述</a></li>\n<li><a href=\"#promise-%E5%B1%80%E9%99%90%E6%80%A7\">Promise 局限性</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%94%9F%E6%88%90%E5%99%A8\">第四章 生成器</a></p>\n<ul>\n<li><a href=\"#%E6%89%93%E7%A0%B4%E5%AE%8C%E6%95%B4%E7%9A%84%E8%BF%90%E8%A1%8C\">打破完整的运行</a></li>\n<li><a href=\"#%E7%94%9F%E6%88%90%E5%99%A8%E4%BA%A7%E7%94%9F%E5%80%BC\">生成器产生值</a></li>\n<li><a href=\"#%E5%BC%82%E6%AD%A5%E8%BF%AD%E4%BB%A3%E7%94%9F%E6%88%90%E5%99%A8\">异步迭代生成器</a></li>\n<li><a href=\"#%E7%94%9F%E6%88%90%E5%99%A8%E5%8A%A0%E8%BF%AD%E4%BB%A3%E5%99%A8\">生成器加迭代器</a></li>\n<li><a href=\"#%E7%94%9F%E6%88%90%E5%99%A8%E5%A7%94%E6%89%98\">生成器委托</a></li>\n<li><a href=\"#es6-%E4%B9%8B%E5%89%8D%E7%9A%84%E7%94%9F%E6%88%90%E5%99%A8\">ES6 之前的生成器</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD\">程序性能</a></p>\n<ul>\n<li><a href=\"#web-worker\">Web Worker</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
    "name": "笔记摘录-你不知道的JavaScript-中篇",
    "id": "8d1f79b5c05b29fa2dc83d23d583f1ce",
    "prev": {
      "name": "笔记摘录-你不知道的JavaScript-下篇",
      "id": "a99a03fe768754b82f7e545b55d5f3de"
    }
  }
]