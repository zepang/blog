[
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/Vue3x组件渲染.md",
      "/home/zepang/WorkSpace/blog/posts/Vue3x组件渲染.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1>应用初始化</h1>\n<p>我们简单的创建一个Vue3x的应用：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn create vite-app leraning-vue3x</code></pre></div>\n<p>Vue会从一个根节点开始整个组件树的渲染，打开 <code>src/main.js</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createApp <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./App.vue'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token string\">'./index.css'</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Vue3x导出一个函数<code>createApp</code>来创建应用实例（<code>app</code>），这与Vue2x使用 <code>new</code> 关键字直接创建实例略微有所差别，不过两者最终都需要通过调用 <code>app.mount</code> 挂载到 <code>DOM</code> 节点。</p>\n<p>接下来，在<code>createApp(app)</code>之前打一个断点，然后启动运用，打开<code>chrome</code>浏览器和控制台，我们通过断点调试来分析一下该函数和<code>app</code>创建过程。</p>\n<h1>createApp函数</h1>\n<p>ok，通过断点直接进入<code>createApp</code>内部，可以发现<code>createApp</code>大概做了下边两件事情</p>\n<ul>\n<li>\n<p>创建 app</p>\n</li>\n<li>\n<p>重写 app.mount 函数，并在内部调用原来的 mount 函数</p>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> createApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. 创建 app</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">ensureRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">injectNativeTagCheck</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 导出 app 的 mount 函数</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mount <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. 重写 mount 函数</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">mount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">containerOrSelector</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token function\">normalizeContainer</span><span class=\"token punctuation\">(</span>containerOrSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>container<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_component</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">render</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span> <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// clear content before mounting</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用原 app.mount</span>\n        <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v-cloak'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-v-app'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> proxy<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接下来，我们逐步分析一下具体的过程。</p>\n<h1>创建app</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * render = <span class=\"token punctuation\">{</span> render, hydrate, createApp <span class=\"token punctuation\">}</span>\n */</span>\n<span class=\"token keyword\">const</span> render <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ensureRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ensureRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> renderer <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>renderer <span class=\"token operator\">=</span> <span class=\"token function\">createRenderer</span><span class=\"token punctuation\">(</span>rendererOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createRenderer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">baseCreateRenderer</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">baseCreateRenderer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options<span class=\"token punctuation\">,</span> createHydrationFns</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">path</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> parentComponent <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> parentSuspense <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> isSVG <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> optimized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">processText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">processCommentNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> anchor</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 组件渲染的核心逻辑</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> \n       <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>vnode <span class=\"token operator\">==</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span><span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span> <span class=\"token operator\">||</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">flushPostFlushCbs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token property-access\">_vnode</span> <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        render<span class=\"token punctuation\">,</span>\n        hydrate<span class=\"token punctuation\">,</span>\n        createApp<span class=\"token operator\">:</span> <span class=\"token function\">createAppAPI</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">,</span> hydrate<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>通过追踪代码，发现Vue导出的<code>createApp</code>函数内，创建<code>app</code>调用的<code>createApp</code>函数实际上调用的是<code>createAppAPI</code>返回的函数<code>createApp</code>。</p>\n<p>该函数清晰的描述了 <code>app</code> 这个对象的所有属性，下边我贴出了该函数的全部代码，并在重要的地方做了一些注释。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createAppContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        app<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n        config<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            isNativeTag<span class=\"token operator\">:</span> <span class=\"token constant\">NO</span><span class=\"token punctuation\">,</span>\n            <span class=\"token dom variable\">performance</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            globalProperties<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            optionMergeStrategies<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            isCustomElement<span class=\"token operator\">:</span> <span class=\"token constant\">NO</span><span class=\"token punctuation\">,</span>\n            errorHandler<span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span>\n            warnHandler<span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局mixins</span>\n        mixins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局插件</span>\n        components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局指令</span>\n        directives<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 全局的provide</span>\n        provides<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAppAPI</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">render<span class=\"token punctuation\">,</span> hydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootComponent<span class=\"token punctuation\">,</span> rootProps <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>rootProps <span class=\"token operator\">!=</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>rootProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">root props passed to app.mount() must be an object.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rootProps <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token doc-comment comment\">/**</span>\n<span class=\"token doc-comment comment\">         * 1. 创建全局的上下文对象</span>\n<span class=\"token doc-comment comment\">         * 2. 在调用 app.use app.mixin app.component app.directive ... 等这些方法的时候分别会往全局上下文中存入一些属性</span>\n<span class=\"token doc-comment comment\">         * 3. 具体的内容可以查看下边的代码和 createAppContext 函数的返回对象</span>\n<span class=\"token doc-comment comment\">         */</span> \n        <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">createAppContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> installedPlugins <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">app</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            _uid<span class=\"token operator\">:</span> uid$<span class=\"token number\">1</span><span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>\n            _component<span class=\"token operator\">:</span> rootComponent<span class=\"token punctuation\">,</span>\n            _props<span class=\"token operator\">:</span> rootProps<span class=\"token punctuation\">,</span>\n            _container<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n            _context<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n            version<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">get</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">config</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">set</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">app.config cannot be replaced. Modify individual options instead.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局插件</span>\n            <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plugin<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>installedPlugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Plugin has already been applied to target app.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>plugin <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">.</span><span class=\"token property-access\">install</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    installedPlugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    plugin<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">install</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    installedPlugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">A plugin must either be a function or an object with an \"install\" </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">function.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局mixins</span>\n            <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mixin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>__VUE_OPTIONS_API__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span><span class=\"token property-access\">mixins</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        context<span class=\"token punctuation\">.</span><span class=\"token property-access\">mixins</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// global mixin with props/emits de-optimizes props/emits</span>\n                        <span class=\"token comment\">// normalization caching.</span>\n                        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span> <span class=\"token operator\">||</span> mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">emits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            context<span class=\"token punctuation\">.</span><span class=\"token property-access\">deopt</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mixin has already been applied to target app'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token punctuation\">(</span>mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mixin<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mixins are only available in builds supporting Options API'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局组件</span>\n            <span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">validateComponentName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">config</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">components</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">components</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Component \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" has already been registered in target app.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token property-access\">components</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> component<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局指令</span>\n            <span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> directive</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">validateDirectiveName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>directive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword control-flow\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">directives</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">directives</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Directive \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" has already been registered in target app.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token property-access\">directives</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> directive<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootContainer<span class=\"token punctuation\">,</span> isHydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token function\">createVNode</span><span class=\"token punctuation\">(</span>rootComponent<span class=\"token punctuation\">,</span> rootProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// store app context on the root VNode.</span>\n                    <span class=\"token comment\">// this will be set on the root instance on initial mount.</span>\n                    vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">appContext</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// HMR root reload</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        context<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">reload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">cloneVNode</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isHydrate <span class=\"token operator\">&#x26;&#x26;</span> hydrate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_container</span> <span class=\"token operator\">=</span> rootContainer<span class=\"token punctuation\">;</span>\n                    rootContainer<span class=\"token punctuation\">.</span><span class=\"token property-access\">__vue_app__</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> __VUE_PROD_DEVTOOLS__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">devtoolsInitApp</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword control-flow\">return</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">component</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">proxy</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App has already been mounted.\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">If you want to remount the same app, move your app creation logic </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">into a factory function and create fresh app instances for each </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mount - e.g. \\`const createMyApp = () => createApp(App)\\`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_container</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> __VUE_PROD_DEVTOOLS__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">devtoolsUnmountApp</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cannot unmount an app that is not mounted.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 全局的provide</span>\n            <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> key <span class=\"token keyword\">in</span> context<span class=\"token punctuation\">.</span><span class=\"token property-access\">provides</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App already provides property with key \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\". </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">It will be overwritten with the new value.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// TypeScript doesn't allow symbols as index type</span>\n                <span class=\"token comment\">// https://github.com/Microsoft/TypeScript/issues/24587</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token property-access\">provides</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 返回 app 对象</span>\n        <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<h1>重写 app.mount</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">normalizeContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Failed to mount app: mount target selector returned null.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> container<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> createApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// 导出 app 的 mount 函数</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mount <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. 重写 mount 函数</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">mount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">containerOrSelector</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 获取container，</span>\n        <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token function\">normalizeContainer</span><span class=\"token punctuation\">(</span>containerOrSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>container<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_component</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">render</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            component<span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span> <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// clear content before mounting</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用原 app.mount</span>\n        <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v-cloak'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        container<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-v-app'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> proxy<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> app<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAppAPI</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">render<span class=\"token punctuation\">,</span> hydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootComponent<span class=\"token punctuation\">,</span> rootProps <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootContainer<span class=\"token punctuation\">,</span> isHydrate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token function\">createVNode</span><span class=\"token punctuation\">(</span>rootComponent<span class=\"token punctuation\">,</span> rootProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// store app context on the root VNode.</span>\n                <span class=\"token comment\">// this will be set on the root instance on initial mount.</span>\n                vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">appContext</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// HMR root reload</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    context<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">reload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">cloneVNode</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>isHydrate <span class=\"token operator\">&#x26;&#x26;</span> hydrate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> rootContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                app<span class=\"token punctuation\">.</span><span class=\"token property-access\">_container</span> <span class=\"token operator\">=</span> rootContainer<span class=\"token punctuation\">;</span>\n                rootContainer<span class=\"token punctuation\">.</span><span class=\"token property-access\">__vue_app__</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> __VUE_PROD_DEVTOOLS__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">devtoolsInitApp</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword control-flow\">return</span> vnode<span class=\"token punctuation\">.</span><span class=\"token property-access\">component</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">proxy</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token property-access\">env</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App has already been mounted.\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">If you want to remount the same app, move your app creation logic </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">into a factory function and create fresh app instances for each </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mount - e.g. \\`const createMyApp = () => createApp(App)\\`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n",
    "frontmatter": {
      "title": "Vue3x组件渲染",
      "date": "2020-11-05"
    },
    "toc": "<ul>\n<li><a href=\"#%E5%BA%94%E7%94%A8%E5%88%9D%E5%A7%8B%E5%8C%96\">应用初始化</a></li>\n<li><a href=\"#createapp%E5%87%BD%E6%95%B0\">createApp函数</a></li>\n<li><a href=\"#%E5%88%9B%E5%BB%BAapp\">创建app</a></li>\n<li><a href=\"#%E9%87%8D%E5%86%99-appmount\">重写 app.mount</a></li>\n</ul>\n",
    "name": "Vue3x组件渲染",
    "id": 0,
    "next": {
      "name": "使用 Next.js SSG 和 Markdown 创建博客"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/使用 Next.js SSG 和 Markdown 创建博客.md",
      "/home/zepang/WorkSpace/blog/posts/使用 Next.js SSG 和 Markdown 创建博客.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1>环境准备</h1>\n<ul>\n<li>\n<p>Node.js</p>\n</li>\n<li>\n<p>Npm, npx</p>\n</li>\n<li>\n<p>VS Code</p>\n</li>\n</ul>\n<h1>什么是 SSG？</h1>\n<p>静态站点生成器SSG是介于传统静态站点和动态站点之间的一种折中解决方案。</p>\n<p>传统意义的静态网站内容固定，而动态网站则会根据获取的数据动态的渲染内容。</p>\n<p>SGG与上边两者的区别是SSG会提前（打包编译）获取数据，数据来源可能是通过API或者Markdown、JSON文件等等，然后根据获取的数据输出HTML静态文件。</p>\n<p>next.js9.3版本宣布支持SSG，具体查看该文章<a href=\"https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support\">https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support</a>。</p>\n<p>本文将尝试配置一个 Next.js SSG Blog Starter 项目，并基于该项目创建个人博客。</p>\n<h1>初始化一个next.js项目</h1>\n<p>打开next.js的文档，按照步骤快速创建一个next.js应用</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">npx create-next-app\n\n# 文件目录如下\n.\n├── README.md\n├── package.json\n├── pages\n├── public\n├── styles\n└── yarn.lock</code></pre></div>\n<p>创建完成之后我们先进入目录，启动一下项目，确保没有问题</p>\n<h1>尝试使用getStaticProps提前获取数据</h1>\n<p>看下官方文档对getStaticProps函数的描述：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">If you export an async function called getStaticProps from a page, Next.js will pre-render this page at build time using the props returned by getStaticProps.</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// will be passed to the page component as props</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>接下来，创建<code>/posts</code>目录，并在该目录下添加一个Markdown的文件<code>index.md</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\"># hello next.js</code></pre></div>\n<p>改造<code>index.js</code>的内容：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">fs</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'fs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">path</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'path'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> markdown <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>markdown<span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> markdown <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'posts/index.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      markdown\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>打开浏览器，可以看到标题<code># hello next.js</code>，成功的拿到了数据。</p>\n<h1>获取文章元信息（metaData）和内容</h1>\n<p>在使用Markdown写文章的时候，为了区别文章的一些元信息和文章内容，通常会使用yaml语法来描述文章元信息。</p>\n<p>比如，创建一片文章<code>/post/第一篇文章.md</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token hr punctuation\">---</span>\n<span class=\"token title important\">title: 第一篇文章\n<span class=\"token punctuation\">---</span></span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> 第一篇文章</span>\n\n第一篇文章内容\n</code></pre></div>\n<p>我们使用<code>front-matter</code>处理元信息和获取需要的Markdown内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn add front-matter</code></pre></div>\n<p>下面是改造后的<code>index.js</code>文件内容:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">fs</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'fs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">path</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'path'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">frontMatter</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'front-matter'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">page</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>main className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">main</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&#x3C;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>\n            posts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&#x3C;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">titleWrapper</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&#x3C;</span>a className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n             <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> postsDirectory <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readdirSync</span><span class=\"token punctuation\">(</span>postsDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>md<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>postsDirectory<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> attributes<span class=\"token punctuation\">,</span> body <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">frontMatter</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 确保title存在</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'[object Object]'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">basename</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">basename</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      meta<span class=\"token operator\">:</span> attributes<span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> body\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      posts\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>打开页面，可以看到文章的标题</p>\n<h1>使用 react-markdown 渲染Markdown</h1>\n<p>安装依赖<code>react-markdown</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn add react-markdown</code></pre></div>\n<p>改造index.js旳代码：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactMarkdown</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-markdown'</span>\n<span class=\"token spread operator\">...</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Home</span></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">page</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>main className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">main</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&#x3C;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>\n            posts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&#x3C;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">titleWrapper</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&#x3C;</span>a className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&#x3C;</span>span className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">date</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n             <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n        <span class=\"token comment\">// 文章内容</span>\n        <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ReactMarkdown</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>markdown<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">ReactMarkdown</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token spread operator\">...</span>\n</code></pre></div>\n<p>重新运行项目，页面已经呈现出了Markdown文件内容。</p>\n<h1>使用Next.js动态路由</h1>\n<p>SSG打包出来的都是静态页面，也就是说需要为每个Markdown文章页输出一个HTML文章页，通过访问URL上的静态文件名来访问HTML页面。</p>\n<p>为了达到这个效果，需要用到next.js的动态路由和<code>getStaticPaths</code>函数，你也可以使用通过在<code>next.config.js</code>中配置<code>exportPathMap</code>来替换<code>getStaticPaths</code>函数的作用。</p>\n<p>先来尝试一下next.js的动态路由，创建<code>pages/post/[postName].js</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'next/router'</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span>h1<span class=\"token operator\">></span>这是文章<span class=\"token punctuation\">{</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">postName</span><span class=\"token punctuation\">}</span>的详情页面<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>之后可以通过<code>localhost:3000/post/:postName</code>来访问页面，并且可以通过<code>next/router</code>的<code>useRouter</code> hooks创建的router对象获取 <code>postName</code> 的值。</p>\n<p>在改造<code>pages/post/[postName].js</code>之前，先把<code>index.js</code>文件中的一些通用方法提到<code>/utils/index.js</code>文件中：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">fs</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'fs'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">path</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'path'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">frontMatter</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'front-matter'</span>\n\n<span class=\"token keyword\">const</span> postsDirectory <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAllPosts</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readdirSync</span><span class=\"token punctuation\">(</span>postsDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>md<span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">basename</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">extname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> posts\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPost</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>postsDirectory<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.md</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> attributes<span class=\"token punctuation\">,</span> body <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">frontMatter</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 确保title存在</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'[object Object]'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> filename <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> filename\n  <span class=\"token punctuation\">}</span>\n\n  attributes<span class=\"token punctuation\">.</span><span class=\"token property-access\">filename</span> <span class=\"token operator\">=</span> filename\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    meta<span class=\"token operator\">:</span> attributes<span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> body\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>接下来在<code>pages/post/[postName].js</code>加入<code>getStaticPaths</code>函数和<code>getStaticProps函数</code>：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'next/router'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> getAllPosts<span class=\"token punctuation\">,</span> getPost <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../utils'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">ReactMarkdown</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-markdown'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> post <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>h1<span class=\"token operator\">></span>这是文章<span class=\"token punctuation\">{</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">postName</span><span class=\"token punctuation\">}</span>的详情页面<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ReactMarkdown</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">ReactMarkdown</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">contxt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> post <span class=\"token operator\">=</span> <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>contxt<span class=\"token punctuation\">.</span><span class=\"token property-access\">params</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">postName</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      post\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticPaths</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token function\">getAllPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> paths <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token comment\">// 兼容中文命名需要使用 encodeURIComponent，否则无法根据URL的文件名找到对应文件</span>\n        postName<span class=\"token operator\">:</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">meta</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">filename</span><span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    paths<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 不存在的文章显示404</span>\n    fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n</code></pre></div>\n<p>目前已经可以通过访问<code>localhost:3000/post/:postName</code>正确的展示Markdown文章页面和内容。</p>\n<h1>添加markdown代码块的语法高亮</h1>\n<p><code>react-markdown</code> 默认没有语法高亮，语法高亮需要用到另外一个依赖 <code>react-syntax-highlighter</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">yarn add react-syntax-highlighter</code></pre></div>\n<p>关于 <code>react-syntax-highlighter</code> 的使用这里不做过多说明，具体的话去查看对应的文档即可。</p>\n<p>为了使的 <code>react-syntax-highlighter</code> 配合 <code>react-markdown</code>，需要使用<code>react-markdown</code>的自定义<code>renderers</code>，文档也有提到相关的内容。</p>\n<p>修改<code>pages/post/[postName].js</code>的代码，针对<code>code</code>标签的内容交给<code>CodeBlock</code>组件处理：</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ReactMarkdown</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span><span class=\"token punctuation\">}</span> renderers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> code<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CodeBlock</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">ReactMarkdown</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token spread operator\">...</span>\n</code></pre></div>\n<p>创建文件<code>components/CodeBlock.js</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Prism</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">SyntaxHighlighter</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-syntax-highlighter'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> okaidia <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-syntax-highlighter/dist/cjs/styles/prism'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">CodeBlock</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> language<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">SyntaxHighlighter</span> language<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>language<span class=\"token punctuation\">}</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>okaidia<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">SyntaxHighlighter</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">CodeBlock</span>\n</code></pre></div>\n<p>这样markdown中代码块的语法高亮就处理完了。</p>\n",
    "frontmatter": {
      "title": "使用 Next.js SSG 和 Markdown 创建博客",
      "date": "2020-11-29"
    },
    "toc": "<ul>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">环境准备</a></li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-ssg%EF%BC%9F\">什么是 SSG？</a></li>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AAnextjs%E9%A1%B9%E7%9B%AE\">初始化一个next.js项目</a></li>\n<li><a href=\"#%E5%B0%9D%E8%AF%95%E4%BD%BF%E7%94%A8getstaticprops%E6%8F%90%E5%89%8D%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\">尝试使用getStaticProps提前获取数据</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E6%96%87%E7%AB%A0%E5%85%83%E4%BF%A1%E6%81%AF%EF%BC%88metadata%EF%BC%89%E5%92%8C%E5%86%85%E5%AE%B9\">获取文章元信息（metaData）和内容</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-react-markdown-%E6%B8%B2%E6%9F%93markdown\">使用 react-markdown 渲染Markdown</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8nextjs%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\">使用Next.js动态路由</a></li>\n<li><a href=\"#%E6%B7%BB%E5%8A%A0markdown%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE\">添加markdown代码块的语法高亮</a></li>\n</ul>\n",
    "name": "使用 Next.js SSG 和 Markdown 创建博客",
    "id": 1,
    "prev": {
      "name": "Vue3x组件渲染"
    },
    "next": {
      "name": "在线Web IDE--code server部署"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/在线Web IDE--code server部署.md",
      "/home/zepang/WorkSpace/blog/posts/在线Web IDE--code server部署.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h1>环境准备</h1>\n<ul>\n<li>\n<p>一台服务器</p>\n</li>\n<li>\n<p>Docker环境</p>\n</li>\n<li>\n<p>Nginx</p>\n</li>\n</ul>\n<h1>Code Server 部署</h1>\n<ul>\n<li><code>code-server</code> <a href=\"https://github.com/cdr/code-server\">https://github.com/cdr/code-server</a></li>\n</ul>\n<p>由于之前使用过docker，环境都还在，所以，选择使用docker的方式进行部署</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p ~/.config\n\ndocker run -it --name code-server -p <span class=\"token number\">127.0</span>.0.1:8080:8080 <span class=\"token punctuation\">\\</span>\n  -v <span class=\"token string\">\"<span class=\"token environment constant\">$HOME</span>/.config:/home/coder/.config\"</span> <span class=\"token punctuation\">\\</span>\n  -v <span class=\"token string\">\"<span class=\"token environment constant\">$PWD</span>:/home/coder/project\"</span> <span class=\"token punctuation\">\\</span>\n  -u <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span>:<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span>\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token comment\"># 此处填写等会访问Web IDE密码</span>\n  -e <span class=\"token string\">\"PASSWORD=xxxxx\"</span>\n  codercom/code-server:latest\n</code></pre></div>\n<p>跑完之后查看一下容器是否正常运行</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">➜  ~ docker container <span class=\"token function\">ls</span> -a\nCONTAINER ID   IMAGE                         COMMAND                  CREATED       STATUS       PORTS                    NAMES\n62d7182c80ea   codercom/code-server:latest   <span class=\"token string\">\"/usr/bin/entrypoint…\"</span>   <span class=\"token number\">8</span> hours ago   Up <span class=\"token number\">8</span> hours   <span class=\"token number\">0.0</span>.0.0:8080-<span class=\"token operator\">></span><span class=\"token number\">8080</span>/tcp   code-server\n</code></pre></div>\n<p>过程进行的还比较顺利，一步就成功了</p>\n<h1>Nginx 配置</h1>\n<p>在Nginx的配置文件上加一个 <code>location</code> 的配置块</p>\n<div class=\"remark-highlight\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">location</span> <span class=\"token operator\">/</span>code<span class=\"token operator\">-</span><span class=\"token keyword\">server</span><span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span><span class=\"token operator\">/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Upgrade <span class=\"token variable\">$http_upgrade</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Connection upgrade<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">proxy_set_header</span> Accept<span class=\"token operator\">-</span>Encoding <span class=\"token keyword\">gzip</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>打开浏览器访问 <code>https://example.com/code-server</code>，出现输入框，输入刚才设置的密码，进入IDE</p>\n<p><img src=\"/images/vscode-web-ide.png\" alt=\"\"></p>\n<p>关于code-server的配置可以查看文档或者搜索相关的文章</p>\n<p>关于换的问题根据个人的需求处理就好了</p>\n<p>参考：</p>\n<ul>\n<li>https://blog.0x233.cn/2020/04/11/code-server/</li>\n</ul>\n",
    "frontmatter": {
      "title": "在线Web IDE--code server部署",
      "date": "2020-12-17"
    },
    "toc": "<ul>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\">环境准备</a></li>\n<li><a href=\"#code-server-%E9%83%A8%E7%BD%B2\">Code Server 部署</a></li>\n<li><a href=\"#nginx-%E9%85%8D%E7%BD%AE\">Nginx 配置</a></li>\n</ul>\n",
    "name": "在线Web IDE--code server部署",
    "id": 2,
    "prev": {
      "name": "使用 Next.js SSG 和 Markdown 创建博客"
    },
    "next": {
      "name": "读书笔记-你不知道的JavaScript-上篇"
    }
  },
  {
    "data": {},
    "messages": [],
    "history": [
      "/home/zepang/WorkSpace/blog/posts/读书笔记-你不知道的JavaScript-上篇.md",
      "/home/zepang/WorkSpace/blog/posts/读书笔记-你不知道的JavaScript-上篇.html"
    ],
    "cwd": "/home/zepang/WorkSpace/blog",
    "contents": "<h2>第一章 作用域是什么？</h2>\n<h1>第二部分</h1>\n<h2>第一章 关于 this</h2>\n<h3>对 this 的误解</h3>\n<ul>\n<li>this 指向函数自身</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// foo: 6</span>\n<span class=\"token comment\">// foo: 7</span>\n<span class=\"token comment\">// foo: 8</span>\n<span class=\"token comment\">// foo: 9</span>\n<span class=\"token comment\">// foo 被调用了多少次？</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 -- WTF?</span>\n</code></pre></div>\n<p>foo 调用实际上是增加了全局的 count。</p>\n<p><strong>就针对上面的代码，如何回避以上问题：</strong></p>\n<ul>\n<li>第一种</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  data<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// foo: 6</span>\n<span class=\"token comment\">// foo: 7</span>\n<span class=\"token comment\">// foo: 8</span>\n<span class=\"token comment\">// foo: 9</span>\n<span class=\"token comment\">// foo 被调用了多少次？</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<p>创建一个对象来存储 count，回避掉 this 的问题，用词法作用域来解释。</p>\n<ul>\n<li>第二种</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>使用具名函数，指定函数名。</p>\n<ul>\n<li>第三种</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"foo: \"</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 记录 foo 被调用的次数</span>\n  <span class=\"token comment\">// 注意，在当前的调用方式下（参见下方代码），this 确实指向 foo</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 使用 call(..) 可以确保 this 指向函数对象 foo 本身</span>\n    foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span> foo<span class=\"token punctuation\">,</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// foo: 6</span>\n<span class=\"token comment\">// foo: 7</span>\n<span class=\"token comment\">// foo: 8</span>\n<span class=\"token comment\">// foo: 9</span>\n<span class=\"token comment\">// foo 被调用了多少次？</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span> foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<p>使用 call apply bind 这一类，强制绑顶 this 的指向。</p>\n<ul>\n<li>this 指向函数作用域\n（说实话没看懂作者举的例子和当前的主题有啥干系）</li>\n</ul>\n<h4>小结</h4>\n<p>this 既不指向函数自身也不指向函数的词法作用域，this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。</p>\n<hr>\n<h2>第二章 全面了解 this</h2>\n<h3>this的绑定规则</h3>\n<h4>默认绑定</h4>\n<p>独立函数调用（作为普通的函数调用），在非严格的模式下，this 指向全局对象。在严格模式下，this 是 undefined。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>书上的说法是 foo 是直接使用不带任何修饰的函数引用进行调用的，因此只能使用默认绑定。</p>\n",
    "frontmatter": {
      "title": "你不知道的JavaScript系列摘录-上卷",
      "img": "https://placem.at/places?h=140",
      "date": "2019-04-29"
    },
    "toc": "<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86\">第二部分</a></p>\n<ul>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%85%B3%E4%BA%8E-this\">第一章 关于 this</a></p>\n<ul>\n<li>\n<p><a href=\"#%E5%AF%B9-this-%E7%9A%84%E8%AF%AF%E8%A7%A3\">对 this 的误解</a></p>\n<ul>\n<li><a href=\"#%E5%B0%8F%E7%BB%93\">小结</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%85%A8%E9%9D%A2%E4%BA%86%E8%A7%A3-this\">第二章 全面了解 this</a></p>\n<ul>\n<li>\n<p><a href=\"#this%E7%9A%84%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99\">this的绑定规则</a></p>\n<ul>\n<li><a href=\"#%E9%BB%98%E8%AE%A4%E7%BB%91%E5%AE%9A\">默认绑定</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
    "name": "读书笔记-你不知道的JavaScript-上篇",
    "id": 3,
    "prev": {
      "name": "在线Web IDE--code server部署"
    }
  }
]